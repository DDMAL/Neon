!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=87)}([function(e,t,n){"use strict";var i,r="object"==typeof Reflect?Reflect:null,o=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,i){function r(n){e.removeListener(t,o),i(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}v(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&v(e,"error",t,n)}(e,r,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function d(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function u(e,t,n,i){var r,o,s,a;if(l(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=i?[n,s]:[s,n]:i?s.unshift(n):s.push(n),(r=d(e))>0&&s.length>r&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=f.bind(i);return r.listener=n,i.wrapFn=r,r}function m(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):g(r,r.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function g(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function v(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(o){i.once&&e.removeEventListener(t,r),n(o)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return d(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=r[e];if(void 0===c)return!1;if("function"==typeof c)o(c,this,t);else{var l=c.length,d=g(c,l);for(n=0;n<l;++n)o(d[n],this,t)}return!0},a.prototype.addListener=function(e,t){return u(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return u(this,e,t,!0)},a.prototype.once=function(e,t){return l(t),this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,i,r,o,s;if(l(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},a.prototype.listeners=function(e){return m(this,e,!0)},a.prototype.rawListeners=function(e){return m(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},a.prototype.listenerCount=h,a.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";var i,r,o,s=[n(37),n(38),n(39),n(40),n(41),n(42)],a=-1,c=[],l=!1;function d(){i&&r&&(i=!1,r.length?c=r.concat(c):a=-1,c.length&&u())}function u(){if(!i){l=!1,i=!0;for(var e=c.length,t=setTimeout(d);e;){for(r=c,c=[];r&&++a<e;)r[a].run();a=-1,e=c.length}r=null,a=-1,i=!1,clearTimeout(t)}}for(var f=-1,p=s.length;++f<p;)if(s[f]&&s[f].test&&s[f].test()){o=s[f].install(u);break}function m(e,t){this.fun=e,this.array=t}m.prototype.run=function(){var e=this.fun,t=this.array;switch(t.length){case 0:return e();case 1:return e(t[0]);case 2:return e(t[0],t[1]);case 3:return e(t[0],t[1],t[2]);default:return e.apply(null,t)}},e.exports=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),l||i||(l=!0,o())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectAll=t.selectNn=t.selectBBox=t.getStaffBBox=t.isMultiStaveSelection=t.sharedSecondLevelParent=t.elementsHaveCorrectType=t.sharedLogicalParent=t.areAdjacent=t.isLigature=t.selectNcs=t.select=t.selectLayerElement=t.selectStaff=t.unselect=t.getSelectionType=void 0;const i=n(18),r=n(12),o=n(24),s=n(27),a=n(13),c=n(7);function l(){const e=document.getElementsByClassName("sel-by is-active");return 0!==e.length?e[0].id:null}function d(){document.querySelectorAll(".no-moving").forEach(e=>e.classList.remove("no-moving")),document.querySelectorAll(".selected").forEach(e=>{e.classList.remove("selected"),e.classList.contains("staff")?(e.removeAttribute("style"),i.unhighlight(e)):(e.removeAttribute("style"),e.style.fill=""),Array.from(e.querySelectorAll(".divLine")).forEach(e=>{e.style.stroke="",e.setAttribute("stroke-width","30px")}),Array.from(e.querySelectorAll(".neume")).forEach(e=>{e.style.fill=""}),Array.from(e.querySelectorAll(".sylTextRect-display")).forEach(e=>{e.style.fill="blue"}),e.parentElement.classList.contains("syllable-highlighted")&&(e.parentElement.style.fill="",e.parentElement.classList.add("syllable"),e.parentElement.classList.remove("syllable-highlighted"),Array.from(e.parentElement.querySelectorAll(".divLine")).forEach(e=>{e.style.stroke="",e.setAttribute("stroke-width","30px")}),Array.from(e.parentElement.querySelectorAll(".neume")).forEach(e=>{e.style.fill=""})),c.selectAll("#resizeRect").remove(),c.selectAll(".resizePoint").remove(),c.selectAll(".rotatePoint").remove()}),Array.from(document.querySelectorAll(".text-select")).forEach(e=>{e.style.color="",e.style.fontWeight="",e.classList.remove("text-select")}),document.getElementById("selByStaff").classList.contains("is-active")?a.endOptionsSelection():o.endGroupingSelection(),document.getElementById("extraEdit").innerHTML="",document.getElementById("extraEdit").parentElement.classList.add("hidden"),(0,r.updateHighlight)()}function u(e,t){e.classList.contains("selected")||(e.classList.add("selected"),i.unhighlight(e),i.highlight(e,"#d00"),a.triggerSingleStaffActions(),o.initGroupingListeners(),t.dragInit())}function f(e,t){e.classList.contains("selected")||(e.classList.add("selected"),i.unhighlight(e),i.highlight(e,"#d00"),t.dragInit())}function p(e,t,n=!0){if(e){if(e.classList.contains("staff"))return u(e,t);if(e.classList.contains("layer"))return f(e,t);if(!e.classList.contains("selected")&&!e.classList.contains("sylTextRect")&&!e.classList.contains("sylTextRect-display")){let t;if(e.classList.add("selected"),e.style.fill="#d00",e.style.stroke=e.classList.contains("divLine")?"#d00":"black",e.querySelectorAll(".sylTextRect-display").length&&e.querySelectorAll(".sylTextRect-display").forEach(e=>{e.style.fill="#d00"}),e.querySelectorAll(".divLine").length&&e.querySelectorAll(".divLine").forEach(e=>{e.style.stroke="#d00"}),e.classList.contains("syllable")&&e.querySelectorAll(".neume").forEach(e=>{e.style.fill="#d00"}),e.classList.contains("syllable")?t=e.id:null!==e.closest(".syllable")&&(t=e.closest(".syllable").id),void 0!==t){document.querySelectorAll("span."+t).forEach(e=>{e.style.color="#d00",e.style.fontWeight="bold",e.classList.add("text-select")})}}n&&(0,r.updateHighlight)()}}async function m(e,t){const n=await t.getElementAttr(e.id,t.view.getCurrentPageURI());return Boolean(n.ligated)}function h(e,t){if(t.length<2)return!1;switch(e){case"selBySyllable":t.forEach(e=>{if(!e.classList.contains("syllable"))return!1});break;case"selByNeume":t.forEach(e=>{if(!e.classList.contains("neume"))return!1});break;case"selByStaff":t.forEach(e=>{if(!e.classList.contains("staff"))return!1});break;default:return!1}return!0}function g(e){const t=Array.from(e),n=t.pop().parentElement.parentElement;for(const e of t){if(e.parentElement.parentElement.id!==n.id)return!1}return!0}function v(e,t,n){const i=e,r=i.closest(".syl");if(!r.classList.contains("selected")){r.classList.add("selected"),i.style.fill="#d00";const o=e.closest(".syllable");o.style.fill="#d00",o.classList.add("syllable-highlighted"),o.querySelectorAll(".divLine").length&&(o.querySelectorAll(".neume").forEach(e=>{e.style.fill="#d00"}),o.querySelectorAll(".divLine").forEach(e=>{e.style.stroke="#d00"})),void 0!==n&&(0,s.resize)(r,n,t),void 0!==t&&t.dragInit();const a=e.closest(".syllable").id;if(void 0!==a){const e=document.querySelector("span."+a);e&&(e.style.color="#d00",e.style.fontWeight="bold",e.classList.add("text-select"))}}a.triggerBBoxActions()}t.getSelectionType=l,t.unselect=d,t.selectStaff=u,t.selectLayerElement=f,t.select=p,t.selectNcs=async function(e,t,n){if(!e.parentElement.classList.contains("selected")){const i=e.parentElement;if(d(),p(i),await m(i,t)){const e=i.previousSibling;if(await m(e,t))p(e);else{const e=i.nextSibling;await m(e,t)?p(e):console.warn("Error: Neither prev or next nc are ligatures")}o.triggerGrouping("ligature")}else i.classList.contains("nc")?a.triggerNcActions(i):console.warn("No action triggered!");n.dragInit()}},t.isLigature=m,t.areAdjacent=function(e,t){if(t.length<2)return!1;let n;switch(e){case"selBySyllable":n=Array.from(document.querySelectorAll(".syllable"));break;case"selByNeume":return!0;case"selByNc":n=Array.from(document.querySelectorAll(".nc"));break;case"selByStaff":n=Array.from(document.querySelectorAll(".staff"));break;default:return!1}const i=[];for(let e=0;e<n.length;e++)for(let r=0;r<t.length;r++)n[e].isSameNode(t[r])&&i.push(t[r]);for(let e=0;e<i.length-1;e++){const t=i[e],r=i[e+1],o=n.indexOf(t),s=n.indexOf(r);if(1!==Math.abs(o-s))return!1}return!0},t.sharedLogicalParent=function(e,t){if(!h(e,t=t.filter(e=>!(e.classList.contains("divLine")||e.classList.contains("accid")||e.classList.contains("clef")))))return!1;switch(e){case"selBySyllable":const e=t[0].closest(".staff");for(let n=0;n<t.length;n++){if(!t[n].closest(".staff").isSameNode(e))return!1}return!0;case"selByNeume":const n=t[0].closest(".syllable");for(let e=0;e<t.length;e++){if(!t[e].closest(".syllable").isSameNode(n))return!1}return!0;case"selByStaff":return!0;default:return!1}},t.elementsHaveCorrectType=h,t.sharedSecondLevelParent=g,t.isMultiStaveSelection=function(e){const t=Array.from(e);for(let e=0;e<t.length;e++){const n=t[e].closest(".staff");for(let i=e;i<t.length;i++){const e=t[i].closest(".staff");if(!n.isSameNode(e))return!0}}return!1},t.getStaffBBox=function(e){let t,n,i,r,o;return e.querySelectorAll("path").forEach(e=>{const s=e.getAttribute("d").match(/\d+/g).map(e=>Number(e));void 0===o&&(o=Math.atan((s[3]-s[1])/(s[2]-s[0]))),(void 0===n||Math.min(s[1],s[3])<n)&&(n=Math.min(s[1],s[3])),(void 0===t||s[0]<t)&&(t=s[0]),(void 0===r||Math.max(s[1],s[3])>r)&&(r=Math.max(s[1],s[3])),(void 0===i||s[2]>i)&&(i=s[2])}),{id:e.id,ulx:t,uly:n,lrx:i,lry:r,rotate:o}},t.selectBBox=v,t.selectNn=function(e){return!(e.length>0)||(e.forEach(e=>{p(e)}),!1)},t.selectAll=async function(e,t,n){const i=l();if(d(),0===e.length)return;let r,c=!1,u=!1;switch(i){case"selBySyllable":r=".syllable";break;case"selByNeume":r=".neume";break;case"selByNc":r=".nc";break;case"selByStaff":r=".staff";break;case"selByBBox":r=".sylTextRect-display";break;case"selByLayerElement":r=".clef, .custos, .accid, .divLine";break;default:return void console.error("Unknown selection type "+i)}const f=new Set;for(const t of e){let e=t.closest(r);if(null===e){if(e=t.closest(".clef, .custos, .accid, .divLine"),null===e){console.warn("Element "+t.id+" is not part of specified group and is not a clef or custos or accid or divLine.");continue}c=c||!0}else u=u||!0;f.add(e);const n=e.getAttribute("mei:follows");n&&(document.querySelector("#"+n.slice(1)).classList.add("no-moving"),f.add(document.querySelector("#"+n.slice(1))));const i=e.getAttribute("mei:precedes");i&&(document.querySelector("#"+i.slice(1)).classList.add("no-moving"),f.add(document.querySelector("#"+i.slice(1))))}f.forEach(e=>p(e,n,!1));const m=Array.from(f.values());if(!c||u)switch(i){case"selByStaff":switch(m.length){case 1:a.triggerSingleStaffActions(),o.initGroupingListeners(),(0,s.resize)(m[0],t,n);break;default:a.triggerMultiStaffActions(),o.initGroupingListeners()}break;case"selByLayerElement":1===f.size?a.triggerLayerElementActions(m[0]):a.triggerDefaultActions();break;case"selBySyllable":switch(m.length){case 1:a.triggerSyllableActions("singleSelect");break;case 2:o.isLinkable("selBySyllable",m)?a.triggerSyllableActions("linkableSelect"):o.isGroupable("selBySyllable",m)?a.triggerSyllableActions("multiSelect"):a.triggerSyllableActions("default");break;default:o.isGroupable("selBySyllable",m)?a.triggerSyllableActions("multiSelect"):a.triggerSyllableActions("default")}break;case"selByNeume":switch(m.length){case 1:a.triggerNeumeActions(),o.initGroupingListeners();break;default:o.isGroupable("selByNeume",m)?o.triggerGrouping("neume"):a.triggerDefaultActions()}break;case"selByNc":switch(m.length){case 1:a.triggerNcActions(m[0]);break;case 2:if(g(m)){if(m[0].parentElement===m[1].parentElement){const e=Array.from(m[0].parentElement.children);if(1===Math.abs(e.indexOf(m[0])-e.indexOf(m[1]))){let e=m[0].children[0],t=m[1].children[0],n=e.x.baseVal.value,i=t.x.baseVal.value,r=e.y.baseVal.value,s=t.y.baseVal.value;if((n>i||n===i&&r<s)&&([e,t]=[t,e],[n,r,i,s]=[i,s,n,r]),n===i||r<s){o.triggerGrouping("ligature");break}}}o.triggerGrouping("nc")}else a.triggerDefaultActions();break;default:g(m)?o.triggerGrouping("nc"):a.triggerDefaultActions()}break;case"selByBBox":switch(m.length){case 1:v(m[0],n,t),a.triggerBBoxActions();break;default:m.forEach(e=>v(e,n,void 0))}break;default:console.error("Unknown selection type. This should not have occurred.")}else 1===f.size?a.triggerLayerElementActions(m[0]):"selBySyllable"==i?a.triggerDefaultSylActions():a.triggerDefaultActions()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setSettings=t.getSettings=void 0;let i=null;const r={zoom:100,glyphOpacity:100,imageOpacity:100,circleSize:25,highlightMode:"none",userMode:"edit",insertMode:"punctum",insertTab:"primitiveTab",selectionMode:"selBySyllable",displayBBox:!1,displayText:!1,displayInfo:!1,displayErrLog:!1,viewBox:null};t.getSettings=function(){return i.settings},t.setSettings=function(e){i.set(e)},t.default=class{constructor(e){i=this,this.id=e,this.load()}load(){try{const e=JSON.parse(window.localStorage.getItem(this.id));this.sync(e)}catch(e){this.sync({})}}set(e){this.settings=Object.assign(Object.assign({},this.settings),e),window.localStorage.setItem(this.id,JSON.stringify(this.settings))}sync(e){this.settings=Object.assign(Object.assign({},r),e),window.localStorage.setItem(this.id,JSON.stringify(this.settings))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.queueNotification=t.Notification=void 0;const i=n(26),r=n(16),o=new Array(0);let s=null;const a={default:"",warning:"⚠️ ",error:"🔴 ",success:"✅ "};class c{constructor(e,t){this.message=a[t]+e,this.displayed=!1,this.id=(0,r.uuidv4)(),this.isModeMessage=-1!==e.search("Mode"),this.timeoutID=-1,this.type=t}setTimeoutId(e){this.timeoutID=Math.max(e,-1)}display(){this.displayed=!0}getId(){return this.id}}function l(e){document.getElementById(e)&&document.getElementById(e).remove()}function d(e){!function(e){if(e.isModeMessage){if(null!==s)return void window.clearTimeout(s.timeoutID);s=e}if(o.push(e),o.length>3){l(o.shift().getId())}const t=document.getElementById("notification-content"),n=document.createElement("div");n.classList.add("neon-notification"),n.classList.add("neon-notification-"+e.type),n.id=e.getId(),n.innerHTML=e.message,t.append(n),t.style.display="",e.display()}(e),e.setTimeoutId(window.setTimeout(l,5e3,e.getId())),document.getElementById(e.getId()).addEventListener("click",()=>{window.clearTimeout(e.timeoutID),l(e.getId())})}function u(e,t="default"){const n=new c(e,t);"error"!=n.type&&"warning"!=n.type||(0,i.recordNotification)(n),d(n)}t.Notification=c,t.queueNotification=u,t.default={queueNotification:u}},function(e,t,n){"use strict";e.exports=function(e){return function(){var t=arguments.length;if(t){for(var n=[],i=-1;++i<t;)n[i]=arguments[i];return e.call(this,n)}return e.call(this,[])}}},function(e,t){e.exports=d3},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.errorLogsPanelContents=t.syllableActionsContent=t.hotkeysModal=t.editTextModal=t.groupingMenu=t.bboxActionContents=t.divLineActionContents=t.clefActionContents=t.columnActionContents=t.staffMergeActionContents=t.staffSplitActionContents=t.accidActionContents=t.layerElementInActionContents=t.layerElementOutActionContents=t.custosActionContents=t.defaultSylActionContents=t.defaultActionContents=t.neumeActionContents=t.defaultNeumeActionContents=t.ncActionContents=t.editControlsPanel=t.insertControlsPanel=t.insertTabHtml=void 0,t.insertTabHtml={primitiveTab:'<p class="insert-element-container">\n            <button id="punctum" class="side-panel-btn insertel smallel" aria-label="punctum" title="punctum"><img src="/Neon/Neon-gh/assets/img/punctum.png" class="image"/></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virga" class="side-panel-btn insertel smallel" aria-label="virga" title="virga"><img src="/Neon/Neon-gh/assets/img/virga.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virgaReversed" class="side-panel-btn insertel smallel" aria-label="Reversed Virga" title="Reversed Virga"><img src="/Neon/Neon-gh/assets/img/virga_reversed.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="diamond" class="side-panel-btn insertel smallel" aria-label="inclinatum" title="inclinatum"><img src="/Neon/Neon-gh/assets/img/diamond.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="custos" class="side-panel-btn insertel smallel" aria-label="custos" title="custos"><img src="/Neon/Neon-gh/assets/img/custos.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="cClef" class="side-panel-btn insertel smallel" aria-label="C Clef" title=" C Clef"><img src="/Neon/Neon-gh/assets/img/cClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="fClef" class="side-panel-btn insertel smallel" aria-label="F Clef" title="F Clef"><img src="/Neon/Neon-gh/assets/img/fClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentA" class="side-panel-btn insertel smallel" aria-label="Liquescent A" title="Liquescent A"><img src="/Neon/Neon-gh/assets/img/liquescentA.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentC" class="side-panel-btn insertel smallel" aria-label="Liquescent C" title="Liquescent C"><img src="/Neon/Neon-gh/assets/img/liquescentC.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="flat" class="side-panel-btn insertel smallel" aria-label="Flat" title="Flat"><img src="/Neon/Neon-gh/assets/img/accidFlat.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="natural" class="side-panel-btn insertel smallel" aria-label="Natural" title="Natural"><img src="/Neon/Neon-gh/assets/img/accidNatural.png" class="image"></button>\n        </p> \n        <p class="insert-element-container">\n            <button id="divLineMaxima" class="side-panel-btn insertel smallel" aria-label="DivLine Maxima" title="DivLine Maxima"><img src="/Neon/Neon-gh/assets/img/divisio.png" class="image"></button>\n        </p>',groupingTab:'<p class="insert-element-container">\n            <button id="pes" class="side-panel-btn insertel smallel" aria-label="pes" title="pes"><img src="/Neon/Neon-gh/assets/img/pes.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="clivis" class="side-panel-btn insertel smallel" aria-label="clivis" title="clivis"><img src="/Neon/Neon-gh/assets/img/clivis.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="scandicus" class="side-panel-btn insertel smallel" aria-label="scandicus" title="scandicus"><img src="/Neon/Neon-gh/assets/img/scandicus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="climacus" class="side-panel-btn insertel smallel" aria-label="climacus" title="climacus"><img src="/Neon/Neon-gh/assets/img/climacus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="torculus" class="side-panel-btn insertel smallel" aria-label="toculus" title="toculus"><img src="/Neon/Neon-gh/assets/img/torculus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="porrectus" class="side-panel-btn insertel smallel" aria-label="porrectus" title="porrectus"><img src="/Neon/Neon-gh/assets/img/porrectus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="pressus" class="side-panel-btn insertel smallel" aria-label="pressus" title="pressus"><img src="/Neon/Neon-gh/assets/img/pressus.png" class="image"></button>\n        </p>',systemTab:'<p class="insert-element-container">\n            <button id="staff" class="side-panel-btn insertel longel" aria-label="system" title="system"><img src="/Neon/Neon-gh/assets/img/staff.png" class="image"></button>\n        </p>\n        <p>Click upper left and lower right corners of new staff.</p>'},t.insertControlsPanel='<div class="panel-heading" id="insertMenu">\n        <div class="panel-heading-title">INSERT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleInsert" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n\t<div class="panel-content-subsection first-subsection">\n        <div id="insertContents" class="panel-contents" style="overflow-y: hidden;">\n            <p class="panel-tabs">\n                <a id="primitiveTab" class="insertTab">Primitive Elements</a>\n                <a id="groupingTab" class="insertTab">Grouping</a>\n                <a id="systemTab" class="insertTab">System</a>\n            </p>\n            <div id="insert_data"></div>\n        </div>\n    </div>',t.editControlsPanel='<div class="panel-heading" id="editMenu">\n        <div class="panel-heading-title focused">EDIT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleEdit" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div id="editContents" class="panel-contents">\n        <div class="panel-content-subsection first-subsection">\n            <div id="selection-mode-container">\n                <div class="panel-sub-title">Selection Mode:</div>\n                <div id="selection-mode-btns-container"  class="right-side-panel-btns-container" style="overflow-x: auto;">\n                    \n                        <button class="side-panel-btn sel-by" id="selBySyllable">Syllable</button>\n                        <button class="side-panel-btn sel-by" id="selByNeume">Neume</button>\n                        <button class="side-panel-btn sel-by" id="selByNc">Neume Component</button>\n                        <button class="side-panel-btn sel-by" id="selByStaff">Staff</button>\n                        <button class="side-panel-btn sel-by" id="selByLayerElement">Layer Element</button>\n                    \n                </div>\n            </div>\n        </div>\n\n        <div id="display-slider-actions-container">\n                <div class="panel-content-subsection hidden">\n                    <div id="moreEdit"></div>\n                </div>\n                <div class="panel-content-subsection hidden">\n                    <div id="extraEdit"></div>\n                </div>\n                    \x3c!--\n                    * The extraEdit panel is added for edit options that have dropdown menus\n                    * Like the Neume and Clef menus\n                    * This is done because the moreEdit menu needs to have overflow for cases where it has lots of buttons\n                    * But overflow ruins dropdown menus\n                    --\x3e\n                <div class="panel-content-subsection hidden">\n                    <div id="neumeEdit"></div>\n                </div>\n                <div class="panel-content-subsection">\n                    <div id="undoRedo_controls"></div>\n                </div>\n        </div>\n    </div>',t.ncActionContents='<label>Change Head Shape:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Head Shapes</span>\n                <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="Punctum" class="dropdown-item">Punctum</a>\n                <a id="Virga" class="dropdown-item">Virga</a> \n                <a id="VirgaReversed" class="dropdown-item">Reversed Virga</a>\n                <a id="Inclinatum" class="dropdown-item">Inclinatum</a>\n                <a id="LiquescentAnticlockwise" class="dropdown-item">Liquescent A</a>\n                <a id="LiquescentClockwise" class="dropdown-item">Liquescent C</a>\n            </div>\n        </div>\n    </div>',t.defaultNeumeActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="split-neume">Split Neumes</button>\n    </div>',t.neumeActionContents='<label>Grouping Options:</label>\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Groupings</span>\n                    <svg class="icon">\n                        <use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n                    </svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content scrollable-dropdown">\n                <a id="Climacus" class="dropdown-item grouping">Climacus</a>\n                <a id="ClimacusResupinus" class="dropdown-item grouping">Climacus Resupinus</a>\n                <a id="Clivis" class="dropdown-item grouping">Clivis</a>\n                <a id="Pes" class="dropdown-item grouping">Pes</a>\n                <a id="PesSubpunctis" class="dropdown-item grouping">Pes Subpunctis</a>\n                <a id="Porrectus" class="dropdown-item grouping">Porrectus</a>\n                <a id="PorrectusFlexus" class="dropdown-item grouping">Porrectus Flexus</a>\n                <a id="PorrectusSubpunctis" class="dropdown-item grouping">Porrectus Subpunctis</a>\n                <a id="Pressus" class="dropdown-item grouping">Pressus</a>\n                <a id="Scandicus" class="dropdown-item grouping">Scandicus</a>\n                <a id="ScandicusFlexus" class="dropdown-item grouping">Scandicus Flexus</a>\n                <a id="ScandicusSubpunctis" class="dropdown-item grouping">Scandicus Subpunctis</a>\n                <a id="Torculus" class="dropdown-item grouping">Torculus</a>\n                <a id="TorculusResupinus" class="dropdown-item grouping">Torculus Resupinus</a>\n            </div>\n        </div>\n    </div>\n    <button class="side-panel-btn" id="ungroupNcs">Ungroup</button>',t.defaultActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.defaultSylActionContents='<button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>',t.custosActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementOutActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="insertToSyllable">Insert to nearest syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementInActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="moveOutsideSyllable">Move outside syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.accidActionContents='<label>Change Accidental:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger"overflow="auto">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Shapes</span>\n                <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="ChangeToFlat" class="dropdown-item">Flat</a>\n                <a id="ChangeToNatural" class="dropdown-item">Natural</a>\n            </div>\n        </div>\n    </div>',t.staffSplitActionContents='<div>Split System:</div>\n    <div id="split-system-btns-container" class="right-side-panel-btns-container">\n        <button id="split-system" class="side-panel-btn">Split</button>\n        <button id="reset-rotate" class="side-panel-btn">Reset Rotate</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.staffMergeActionContents='<label>Merge Systems:</label>\n    <div id="merge-system-btns-container" class="right-side-panel-btns-container">\n        <button id="merge-systems" class="side-panel-btn">Merge</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.columnActionContents='<div class="col-edit-container">\n        Edit Column Information: \n        <div id="col-stepper-btns-container" class="right-side-panel-btns-container">\n            <button id="col-decrement" class="side-panel-btn col-stepper-btn">–</button>\n            <input type="text" id="col-input" class="side-panel-stepper-input" value="0">\n            <button id="col-increment" class="side-panel-btn col-stepper-btn">+</button>\n            <button id="col-confirm" class="side-panel-btn side-panel-confirm-btn" style="display:none">Confirm</button>\n            <div id="col-warning" class="side-panel-warning"></div> \n        </div>\n    </div>',t.clefActionContents='\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Displace Octave</span>\n                    <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="increment-octave" class="dropdown-item">+1 Octave</a>\n                    <a id="decrement-octave" class="dropdown-item">-1 Octave</a>\n                </div>\n            </div>\n        </div>\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Change Clef Shape</span>\n                    <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="CClef" class="dropdown-item">C Clef</a>\n                    <a id="FClef" class="dropdown-item">F Clef</a>\n                </div>\n            </div>\n        </div>\n    </div>\n    ',t.divLineActionContents='<label>Change DivLine:</label>\n<div class="drop_select dropdown">\n    <div class="dropdown-trigger"overflow="auto">\n        <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n            <span>Shapes</span>\n            <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n        </button>\n    </div>\n    <div class="dropdown-menu" id="dropdown-menu" role="menu">\n        <div class="dropdown-content">\n            <a id="ChangeToCaesura" class="dropdown-item">Caesura</a>\n            <a id="ChangeToFinalis" class="dropdown-item">Finalis</a>\n            <a id="ChangeToMinima" class="dropdown-item">Minima</a>\n            <a id="ChangeToMaior" class="dropdown-item">Maior</a>\n            <a id="ChangeToMaxima" class="dropdown-item">Maxima</a>\n            <a id="ChangeToVirgula" class="dropdown-item">Virgula</a>\n        </div>\n    </div>\n</div>',t.bboxActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="matchHeight">Match Height for Entire Row</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.groupingMenu={nc:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn more-edit-btn" id="groupNcs">Group Neume Components</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',neume:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="groupNeumes">Group Neumes</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',syl:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n                <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n            </div>\n\t\t</div>',ligatureNc:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="groupNcs">Group Neume Components</button>\n                        <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>',ligature:'<div class="more-edit-btn panel-btn">\n                <div class="right-side-panel-btns-container">\n                    <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                    <button class="side-panel-btn" id="delete">Delete</button>\n                </div>\n            </div>',splitSyllable:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>'},t.editTextModal='<div class="neon-modal-window-content" id="neon-modal-window-content-edit-text">\n        <label for="neon-modal-window-edit-text-input" id="neon-modal-window-edit-text-label">Enter Syllable Text:</label>\n        <input id="neon-modal-window-edit-text-input" type="text">\n        <div id="neon-modal-window-edit-text-btns">\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-cancel">Cancel</div>\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-save">Save</div>        \n        </div>\n    </div>',t.hotkeysModal='\n    <div class="neon-modal-window-content" id="neon-modal-window-content-hotkeys">\n        \x3c!-- "Display" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Display</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">+</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom In</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">-</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Out</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">0</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Reset</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">h</div>\n                </div>\n                <div class="hotkey-entry-description">Hide Glyph</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">T</div>\n                </div>\n                <div class="hotkey-entry-description">Scroll To Syllable Text</div>\n            </div>\n        </div>\n\n        \x3c!-- "Edit" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Edit</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Undo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Redo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">q/w/e/r/t/y</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Highlight by Staff/Syllable/Neume/LayerElement/Selection/Off\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">1/2/3/4/5/6</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Select by Syllable/Neume/Neume Component/Staff/Layer Element/BBox\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Number</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Begin Insert for the <i>nth</i> option in the selected tab\n                </div>\n            </div>\n        </div>\n\n        \x3c!-- "Other" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Other</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">s</div>\n                </div>\n                <div class="hotkey-entry-description">Save File</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Esc</div>\n                </div>\n                <div class="hotkey-entry-description">Return to Edit Mode</div>\n            </div>\n        </div>\n    </div>',t.syllableActionsContent='\n  <div class="right-side-panel-btns-container">\n    <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n    <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>\n    <button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n  </div>\n',t.errorLogsPanelContents='<div class="panel-heading" id="errorLogHeading">\n        <div class="panel-heading-title">Error Log</div>\n        <svg class="icon">\n            <use id="toggleErrorLog" xlink:href="/Neon/Neon-gh//assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div class="panel-contents" id="errorLogContents" style="overflow: scroll; padding: 0.5em 0.75em; max-height: 300px;"><div>'},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";for(var i=n(11),r=[],o=0;o<256;++o)r.push((o+256).toString(16).substr(1));t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase();if(!Object(i.a)(n))throw TypeError("Stringified UUID is invalid");return n}},function(e,t,n){"use strict";var i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;t.a=function(e){return"string"==typeof e&&i.test(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initDisplayControls=t.loadHighlightSettings=t.updateDisplayAllBtn=t.updateHighlight=t.setHighlightSelectionControls=t.setHighlightControls=t.setHighlightOption=t.getHighlightType=t.setCircleSizeControls=t.setBgOpacityFromSlider=t.setGlyphOpacityFromSlider=t.setZoomControls=void 0;const i=n(18),r=n(4),o=n(7);let s,a,c;function l(e){const t=document.getElementById("opacityOutput");document.getElementById("opacitySlider").value=t.value,(0,r.setSettings)({glyphOpacity:Number(t.value)});const n=document.querySelector("#toggle-glyph-opacity > img");0===Number(t.value)?(n.setAttribute("src","/Neon/Neon-gh/assets/img/show-icon.svg"),n.parentElement.setAttribute("title","Show glyph")):(n.setAttribute("src","/Neon/Neon-gh/assets/img/hide-icon.svg"),n.parentElement.setAttribute("title","Hide glyph"));try{document.querySelectorAll("."+e).forEach(e=>{e.style.opacity=(Number(t.value)/100).toString()})}catch(e){console.warn("Unable to properly set opacity to pages")}}function d(e){const t=document.querySelector("#bgOpacityOutput");(0,r.setSettings)({imageOpacity:Number(t.value)});const n=document.querySelector("#toggle-bg-opacity > img");0===Number(t.value)?(n.setAttribute("src","/Neon/Neon-gh/assets/img/show-icon.svg"),n.parentElement.setAttribute("title","Show background image")):(n.setAttribute("src","/Neon/Neon-gh/assets/img/hide-icon.svg"),n.parentElement.setAttribute("title","Hide background image"));const i=document.querySelector("."+e);i&&(i.style.opacity=String(Number(t.value)/100))}function u(e){const t=document.getElementById("highlight-"+e),n=document.getElementById("highlight-dropdown"),o=document.getElementById("highlight-type");if((0,r.setSettings)({highlightMode:e}),n.classList.remove("is-active"),document.querySelectorAll(".highlight-selected").forEach(e=>{e.classList.remove("highlight-selected")}),"none"===e)return o.textContent=" - Off",void i.unsetGroupingHighlight();t.classList.add("highlight-selected"),o.textContent=" - "+(e[0].toUpperCase()+e.slice(1)),i.setGroupingHighlight(e)}function f(e){document.getElementById("highlight-"+e).addEventListener("click",()=>{u(e)})}function p(){document.body.removeEventListener("click",p),document.getElementById("highlight-dropdown").classList.remove("is-active")}function m(){const e=document.getElementById("highlight-dropdown");document.getElementById("highlight-button").addEventListener("click",t=>{t.stopPropagation(),e.classList.toggle("is-active"),e.classList.contains("is-active")?(document.body.addEventListener("click",p),f("column"),f("staff"),f("syllable"),f("neume"),f("layerElement"),f("none")):document.body.removeEventListener("click",p)})}function h(){const{highlightMode:e}=(0,r.getSettings)();u(e)}t.setZoomControls=function(e){if(void 0===e)return;const t=document.getElementById("zoomSlider"),n=document.getElementById("zoomOutput"),{zoom:i}=(0,r.getSettings)();t.value=String(i),n.value=String(i),e.zoomTo(i/100),document.getElementById("reset-zoom").addEventListener("click",()=>{n.value="100",t.value="100",e.resetZoomAndPan()}),document.querySelector("#set-zoom-easy-edit").addEventListener("click",()=>{n.value="180",t.value="180",e.zoomTo(1.8)}),t.addEventListener("mouseup",(function(){n.value=t.value,e.zoomTo(Number(n.value)/100)})),t.disabled=!1,document.body.addEventListener("keydown",i=>{const r=parseInt(n.value);if("ArrowUp"===i.key||"ArrowDown"===i.key||"ArrowRight"===i.key||"ArrowLeft"===i.key)i.preventDefault();else if("+"===i.key){const i=Math.min(r+20,parseInt(t.getAttribute("max")));e.zoomTo(i/100),n.value=String(i),t.value=String(i)}else if("_"===i.key){const i=Math.max(r-20,parseInt(t.getAttribute("min")));e.zoomTo(i/100),n.value=String(i),t.value=String(i)}else"0"===i.key&&(n.value="100",t.value="100",e.resetZoomAndPan())})},t.setGlyphOpacityFromSlider=l,t.setBgOpacityFromSlider=d,t.setCircleSizeControls=function(){const e=document.getElementById("circleSlider"),t=document.getElementById("circleOutput"),{circleSize:n}=(0,r.getSettings)();function i(){t.value=e.value,c=Number(e.value),(0,r.setSettings)({circleSize:Number(c)});const n=o.selectAll(".resizePoint");n.empty()||n.attr("r",c)}c=n,e.value=String(n),t.value=String(n),document.getElementById("reset-circle-size").addEventListener("click",()=>{const n=o.selectAll(".resizePoint");n.empty()||n.attr("r",25),c=Number(25),e.value=String(25),t.value=String(25),(0,r.setSettings)({circleSize:Number(25)}),i()}),e.addEventListener("input",i),e.addEventListener("change",i),e.disabled=!1},t.getHighlightType=function(){return document.getElementById("highlight-type").textContent.slice(3).toLowerCase()},t.setHighlightOption=f,t.setHighlightControls=m,t.setHighlightSelectionControls=function(){const e=document.getElementById("highlight-selection");e.addEventListener("click",()=>{document.getElementById("highlight-dropdown").classList.remove("is-active"),document.querySelectorAll(".highlight-selected").forEach(e=>{e.classList.remove("highlight-selected")}),e.classList.add("highlight-selected"),document.getElementById("highlight-type").textContent=" - Selection",i.setGroupingHighlight("selection")})},t.updateHighlight=function(){let e;try{e=document.querySelector(".highlight-selected").id}catch(t){e=""}switch(e){case"highlight-column":i.setGroupingHighlight("column");break;case"highlight-staff":i.setGroupingHighlight("staff");break;case"highlight-syllable":i.setGroupingHighlight("syllable");break;case"highlight-neume":i.setGroupingHighlight("neume");break;case"highlight-layerElement":i.setGroupingHighlight("layerElement");break;case"highlight-selection":i.setGroupingHighlight("selection");break;default:i.unsetGroupingHighlight()}},t.updateDisplayAllBtn=function(){const e=document.getElementById("display-all-btn"),t=document.getElementById("displayInfo"),n=document.getElementById("displayBBox"),i=document.getElementById("displayText"),r=document.getElementById("display-errors");(null==t?void 0:t.checked)&&(null==n?void 0:n.checked)&&(null==i?void 0:i.checked)&&(null==r?void 0:r.checked)?(e.classList.add("selected"),e.innerHTML="Hide All"):e.classList.contains("selected")&&(e.classList.remove("selected"),e.innerHTML="Display All")},t.loadHighlightSettings=h,t.initDisplayControls=function(e,t){!function(e){const t=document.getElementById("opacitySlider"),n=document.getElementById("opacityOutput"),{glyphOpacity:i}=(0,r.getSettings)();function o(){n.value=t.value,s=Number(t.value),l(e)}s=i,t.value=String(i),n.value=String(i);const a=document.getElementById("toggle-glyph-opacity");100==i&&a.classList.add("hide-icon"),null==a||a.addEventListener("click",()=>{let i;a.classList.contains("hide-icon")?(a.classList.remove("hide-icon"),i=0):(a.classList.add("hide-icon"),i=1),document.querySelectorAll("."+e).forEach(e=>{e.style.opacity=i.toString()}),s=Number(t.value),t.value=String(100*i),n.value=String(Math.round(100*i)),(0,r.setSettings)({glyphOpacity:100*i}),o()}),t.addEventListener("input",o),t.addEventListener("change",o),t.disabled=!1}(e),function(e){const t=document.getElementById("bgOpacitySlider"),n=document.getElementById("bgOpacityOutput"),{imageOpacity:i}=(0,r.getSettings)();function o(){n.value=t.value,a=Number(t.value),d(e)}a=i,t.value=String(i),n.value=String(i);const s=document.getElementById("toggle-bg-opacity");100==i&&s.classList.add("hide-icon"),s.addEventListener("click",()=>{let i;s.classList.contains("hide-icon")?(s.classList.remove("hide-icon"),i=0):(s.classList.add("hide-icon"),i=1),document.getElementsByClassName(e)[0].style.opacity=i.toString(),a=Number(t.value),t.value=String(100*i),n.value=String(Math.round(100*i)),(0,r.setSettings)({imageOpacity:100*i}),o()}),t.addEventListener("input",o),t.addEventListener("change",o),t.disabled=!1}(t),m(),document.getElementById("burgerMenu").addEventListener("click",()=>{document.getElementById("burgerMenu").classList.toggle("is-active"),document.getElementById("navMenu").classList.toggle("is-active")}),document.body.addEventListener("keydown",e=>{if(!e.metaKey)switch(e.key){case"q":u("staff");break;case"w":u("syllable");break;case"e":u("neume");break;case"r":u("layerElement");break;case"t":u("selection");break;case"y":u("none")}}),function(){const e=document.querySelector("#display-all-btn");e.addEventListener("click",()=>{if(e.classList.contains("selected")){e.classList.remove("selected"),e.innerHTML="Display All";const t=document.querySelectorAll(".checkbox-container > .checkbox");Array.from(t).forEach(e=>{e.checked&&e.click()})}else{e.classList.add("selected"),e.innerHTML="Hide All";const t=document.querySelectorAll(".checkbox-container > .checkbox");Array.from(t).forEach(e=>{e.checked||e.click()})}})}(),h();const n=document.getElementById("displayContents"),i=document.getElementById("toggleDisplay");document.getElementById("displayHeader").addEventListener("click",e=>{e.stopPropagation(),n.classList.contains("closed")?(n.classList.remove("closed"),n.style.padding="0.5em 0.75em",setTimeout(()=>{n.style.overflow="visible"},200),i.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(n.classList.add("closed"),n.style.overflow="hidden",setTimeout(()=>{n.style.padding="0px"},200),i.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.triggerDefaultActions=t.triggerDefaultSylActions=t.triggerBBoxActions=t.triggerSingleStaffActions=t.triggerStaffSplitMode=t.triggerMultiStaffActions=t.triggerLayerElementActions=t.triggerSyllableActions=t.triggerNeumeActions=t.triggerNcActions=t.addChangeStaffListener=t.matchHeightHandler=t.moveOutsideSyllableHandler=t.insertToSyllableHandler=t.changeStaffHandler=t.removeHandler=t.endOptionsSelection=t.deleteButtonHandler=t.unsetLiquescentAnticlockwiseAction=t.unsetLiquescentClockwiseAction=t.unsetVirgaReversedAction=t.unsetVirgaAction=t.unsetInclinatumAction=t.initNeonView=void 0;const i=n(8),r=n(24),o=n(5),s=n(35),a=n(36),c=n(3);let l;function d(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function u(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function f(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function p(e){return{action:"set",param:{elementId:e,attrType:"curve",attrValue:""}}}function m(e){return{action:"set",param:{elementId:e,attrType:"curve",attrValue:""}}}function h(e){"d"!==e.key&&"Backspace"!==e.key||(v(),e.preventDefault())}function g(){const e=document.getElementById("moreEdit"),t=document.getElementById("extraEdit");e&&(e.innerHTML="",e.parentElement.classList.add("hidden")),t&&(t.innerHTML="",t.parentElement.classList.add("hidden")),document.body.removeEventListener("keydown",h)}function v(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{t.classList.contains("syl")&&(t=t.closest(".syllable")),t.classList.contains("accid")&&(t=t.closest(".accid")),t.classList.contains("divLine")&&(t=t.closest(".divLine")),e.push({action:"remove",param:{elementId:t.id}})});const t={action:"chain",param:e};g(),l.edit(t,l.view.getCurrentPageURI()).then(()=>{l.updateForCurrentPage()})}function y(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"changeStaff",param:{elementId:t.id}})});const t={action:"chain",param:e};g(),l.edit(t,l.view.getCurrentPageURI()).then(()=>{l.updateForCurrentPage()})}function b(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"insertToSyllable",param:{elementId:t.id}})});const t={action:"chain",param:e};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Insert Success","success"):o.default.queueNotification("Insert Failed XoX","error"),g(),l.updateForCurrentPage()})}function _(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"moveOutsideSyllable",param:{elementId:t.id}})});const t={action:"chain",param:e};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Move Success","success"):o.default.queueNotification("Move Failed XoX","error"),g(),l.updateForCurrentPage()})}function w(){const e=Array.from(document.getElementsByClassName("selected"));e.length>1&&o.default.queueNotification("Cannot match height to multiple bbox","error");const t={action:"matchHeight",param:{elementId:e[0].id}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Height Match Success","success"):o.default.queueNotification("Height Match Failed XoX","error"),g(),l.updateForCurrentPage()})}function E(){const e=document.getElementById("delete");e&&(e.removeEventListener("click",v),e.addEventListener("click",v),document.body.addEventListener("keydown",h))}function S(){const e=document.getElementById("changeStaff");null==e||e.removeEventListener("click",y),null==e||e.addEventListener("click",y)}function k(){const e=document.getElementById("col-input"),t=document.querySelectorAll(".staff.selected");let n;for(const e of t){const t=Array.from(e.classList).join(" ").match(/\bcolumn(\d+)\b/);if(t){const e=parseInt(t[1],10);if(n&&n!=e){document.getElementById("col-warning").innerText="The selected staves are not of the same column!",n=0;break}n=e}}n&&(e.value=n.toString())}function L(){const e=document.getElementById("col-decrement"),t=document.getElementById("col-increment"),n=document.getElementById("col-confirm"),i=document.getElementById("col-input");function r(e){let t=parseInt(i.value,10)||0;t+=e,t=Math.min(Math.max(t,1),5),t.toString()!=i.value&&(n.style.display=""),i.value=t.toString()}e.addEventListener("click",(function(){r(-1)})),t.addEventListener("click",(function(){r(1)})),n.addEventListener("click",(function(){const e=[];document.querySelectorAll(".staff.selected").forEach(t=>{e.push({action:"set",param:{elementId:t.id,attrType:"type",attrValue:"column"+i.value}})});const t={action:"chain",param:e};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Column Value Update Success","success"):o.default.queueNotification("Column Value Update Failed XoX","error"),g(),l.updateForCurrentPage()})}))}function A(e,t,n=!0){const i=document.getElementById(e);i&&(i.parentElement.classList.remove("hidden"),n?i.innerHTML=t:i.innerHTML+=t)}function x(e){l.edit(e,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}function C(){const e=document.querySelector(".staff.selected");if(null!==e){new s.SplitStaffHandler(l,e).startSplit(),g()}else console.error("No staff was selected!"),g()}function T(){document.querySelectorAll(".drop_select").forEach(e=>{const t=()=>{document.body.removeEventListener("click",t),e.classList.remove("is-active")};e.addEventListener("click",n=>{e.classList.toggle("is-active"),Array.from(document.querySelectorAll(".drop_select")).filter(t=>t!==e).forEach(e=>e.classList.remove("is-active")),n.stopPropagation(),e.classList.contains("is-active")?document.body.addEventListener("click",t):document.body.removeEventListener("click",t)})})}t.initNeonView=function(e){l=e,r.initNeonView(e)},t.unsetInclinatumAction=d,t.unsetVirgaAction=u,t.unsetVirgaReversedAction=f,t.unsetLiquescentClockwiseAction=p,t.unsetLiquescentAnticlockwiseAction=m,t.deleteButtonHandler=h,t.endOptionsSelection=g,t.removeHandler=v,t.changeStaffHandler=y,t.insertToSyllableHandler=b,t.moveOutsideSyllableHandler=_,t.matchHeightHandler=w,t.addChangeStaffListener=S,t.triggerNcActions=function(e){g(),A("moreEdit",i.defaultActionContents),A("extraEdit",i.ncActionContents),E(),document.querySelector("#Punctum.dropdown-item").addEventListener("click",()=>{const t=d(e.id),n=u(e.id),i=f(e.id),r=p(e.id),s=m(e.id);l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#Inclinatum.dropdown-item").addEventListener("click",()=>{const t=u(e.id),n=f(e.id),i=p(e.id),r=m(e.id),s={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"se"}};l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#Virga.dropdown-item").addEventListener("click",()=>{const t=f(e.id),n=d(e.id),i=p(e.id),r=m(e.id),s={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"s"}};l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#VirgaReversed.dropdown-item").addEventListener("click",()=>{const t=d(e.id),n=u(e.id),i=p(e.id),r=m(e.id),s={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"n"}};l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#LiquescentClockwise.dropdown-item").addEventListener("click",()=>{const t=d(e.id),n=u(e.id),i=f(e.id),r=m(e.id),s={action:"set",param:{elementId:e.id,attrType:"curve",attrValue:"c"}};l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#LiquescentAnticlockwise.dropdown-item").addEventListener("click",()=>{const t=d(e.id),n=u(e.id),i=f(e.id),r=p(e.id),s={action:"set",param:{elementId:e.id,attrType:"curve",attrValue:"a"}};l.edit({action:"chain",param:[t,n,i,r,s]},l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Shape Changed","success"):o.default.queueNotification("Shape Change Failed","error"),g(),l.updateForCurrentPage()})}),T()},t.triggerNeumeActions=function(){g(),A("moreEdit",i.defaultNeumeActionContents),A("extraEdit",i.neumeActionContents),E();const e=document.querySelectorAll(".selected");function t(t){const n={action:"changeGroup",param:{elementId:e[0].id,contour:t}};l.edit(n,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Grouping Changed","success"):o.default.queueNotification("Grouping Failed","error"),g(),l.updateForCurrentPage()})}1===e.length?(document.getElementById("split-neume").addEventListener("click",()=>{const e=document.querySelector(".neume.selected");if(null!==e){new a.SplitNeumeHandler(l,e).startSplit(),g()}else console.error("No staff was selected!"),g()}),document.querySelector("#Pes.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PesSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Clivis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Scandicus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ScandicusFlexus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ScandicusSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Climacus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ClimacusResupinus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Torculus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#TorculusResupinus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Porrectus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PorrectusFlexus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PorrectusSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Pressus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),T()):console.warn("More than one neume selected! Cannot trigger Neume ClickSelect actions.")},t.triggerSyllableActions=function(e){g(),A("moreEdit",i.syllableActionsContent);let t="";switch(e){case"singleSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"linkableSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"multiSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"default":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>'}A("moreEdit",t,!0),S(),E(),r.initGroupingListeners()},t.triggerLayerElementActions=function(e){var t,n,r,s;if(g(),e.classList.contains("custos"))return A("moreEdit",i.custosActionContents),S(),void E();A("moreEdit",e.parentElement.classList.contains("syllable")?i.layerElementInActionContents:i.layerElementOutActionContents,!1),e.classList.contains("accid")?(A("extraEdit",i.accidActionContents),function(e){document.querySelector("#ChangeToFlat.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"accid",attrValue:"f"}})}),document.querySelector("#ChangeToNatural.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"accid",attrValue:"n"}})}),T()}(e)):e.classList.contains("clef")?(A("extraEdit",i.clefActionContents),function(e){document.querySelector("#increment-octave").addEventListener("click",()=>{const t={action:"displaceClefOctave",param:{elementId:e.id,direction:"above"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Clef octave incremented.","success"):o.default.queueNotification("Maximum octave displacement reached. Clef can only be displaced up to 3 octaves.","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#decrement-octave").addEventListener("click",()=>{const t={action:"displaceClefOctave",param:{elementId:e.id,direction:"below"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.default.queueNotification("Clef octave decremented.","success"):o.default.queueNotification("Maximum octave displacement reached. Clef can only be displaced up to 3 octaves.","error"),g(),l.updateForCurrentPage()})}),document.querySelector("#CClef.dropdown-item").addEventListener("click",()=>{x({action:"setClef",param:{elementId:e.id,shape:"C"}})}),document.querySelector("#FClef.dropdown-item").addEventListener("click",()=>{x({action:"setClef",param:{elementId:e.id,shape:"F"}})}),T()}(e)):e.classList.contains("divLine")&&(A("extraEdit",i.divLineActionContents),function(e){document.querySelector("#ChangeToMinima.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"minima"}})}),document.querySelector("#ChangeToMaior.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"maior"}})}),document.querySelector("#ChangeToMaxima.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"maxima"}})}),document.querySelector("#ChangeToFinalis.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"finalis"}})}),document.querySelector("#ChangeToCaesura.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"caesura"}})}),document.querySelector("#ChangeToVirgula.dropdown-item").addEventListener("click",()=>{x({action:"set",param:{elementId:e.id,attrType:"form",attrValue:"virgula"}})}),T()}(e)),S(),null===(t=document.getElementById("insertToSyllable"))||void 0===t||t.addEventListener("click",b),null===(n=document.getElementById("moveOutsideSyllable"))||void 0===n||n.addEventListener("click",_),E(),S(),null===(r=document.getElementById("insertToSyllable"))||void 0===r||r.addEventListener("click",b),null===(s=document.getElementById("moveOutsideSyllable"))||void 0===s||s.addEventListener("click",_)},t.triggerMultiStaffActions=function(){g(),A("moreEdit",i.staffMergeActionContents),A("extraEdit",i.columnActionContents),E(),k(),L(),document.getElementById("merge-systems").addEventListener("click",()=>{r.mergeStaves()})},t.triggerStaffSplitMode=C,t.triggerSingleStaffActions=function(){g(),A("moreEdit",i.staffSplitActionContents),A("extraEdit",i.columnActionContents),E(),k(),L(),document.getElementById("split-system").addEventListener("click",()=>{C()}),document.getElementById("reset-rotate").addEventListener("click",()=>{const e=document.querySelector(".staff.selected"),t=(0,c.getStaffBBox)(e),n=Math.tan(t.rotate)*(t.lrx-t.ulx);if(null!==e){const i={action:"resizeRotate",param:{elementId:e.id,ulx:t.ulx,uly:t.rotate>0?t.uly+n/2:t.uly-n/2,lrx:t.lrx,lry:t.rotate>0?t.lry-n/2:t.lry+n/2,rotate:0}};l.edit(i,l.view.getCurrentPageURI()).then(async e=>{e&&await l.updateForCurrentPage()}),g()}else console.error("No staff was selected"),g()})},t.triggerBBoxActions=function(){g(),A("moreEdit",i.bboxActionContents),E(),document.getElementById("matchHeight").addEventListener("click",()=>{w()})},t.triggerDefaultSylActions=function(){g(),A("moreEdit",i.defaultSylActionContents),E(),S()},t.triggerDefaultActions=function(){g(),A("moreEdit",i.defaultActionContents),E()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getGlyphBBox=t.isOutOfSVGBounds=t.getStaffByCoords=t.getStaffIdByCoords=t.getSVGRelCoords=void 0;const i=n(3);function r(e,t){const n=new DOMPoint(e,t),i=document.querySelector(".active-page > .definition-scale").querySelector(".system"),{x:r,y:o}=n.matrixTransform(i.getScreenCTM().inverse());return{x:r,y:o}}function o(e,t){const n=Array.from(document.querySelectorAll(".staff")).map(e=>(0,i.getStaffBBox)(e)),{x:o,y:s}=r(e,t),a=n.find(e=>o<=e.lrx&&o>=e.ulx&&s<=e.lry&&s>=e.uly);return a?a.id:null}t.getSVGRelCoords=r,t.getStaffIdByCoords=o,t.getStaffByCoords=function(e,t){const n=o(e,t);return document.querySelector("#"+n)},t.isOutOfSVGBounds=function(e,t){const n=document.querySelector("#bgimg");return e<=0||e>=Number(n.getAttribute("width"))||t<=0||t>=Number(n.getAttribute("height"))},t.getGlyphBBox=function(e){const t="rect"==e.tagName?e.getBBox():e.parentNode.getBBox();return{ulx:t.x,uly:t.y,lrx:t.x+t.width,lry:t.y+t.height}}},function(e,t,n){e.exports=function(e){"use strict";var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e,t){var n=e[0],i=e[1],r=e[2],o=e[3];i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[0]-680876936|0)<<7|n>>>25)+i|0)&i|~n&r)+t[1]-389564586|0)<<12|o>>>20)+n|0)&n|~o&i)+t[2]+606105819|0)<<17|r>>>15)+o|0)&o|~r&n)+t[3]-1044525330|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[4]-176418897|0)<<7|n>>>25)+i|0)&i|~n&r)+t[5]+1200080426|0)<<12|o>>>20)+n|0)&n|~o&i)+t[6]-1473231341|0)<<17|r>>>15)+o|0)&o|~r&n)+t[7]-45705983|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[8]+1770035416|0)<<7|n>>>25)+i|0)&i|~n&r)+t[9]-1958414417|0)<<12|o>>>20)+n|0)&n|~o&i)+t[10]-42063|0)<<17|r>>>15)+o|0)&o|~r&n)+t[11]-1990404162|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[12]+1804603682|0)<<7|n>>>25)+i|0)&i|~n&r)+t[13]-40341101|0)<<12|o>>>20)+n|0)&n|~o&i)+t[14]-1502002290|0)<<17|r>>>15)+o|0)&o|~r&n)+t[15]+1236535329|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[1]-165796510|0)<<5|n>>>27)+i|0)&r|i&~r)+t[6]-1069501632|0)<<9|o>>>23)+n|0)&i|n&~i)+t[11]+643717713|0)<<14|r>>>18)+o|0)&n|o&~n)+t[0]-373897302|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[5]-701558691|0)<<5|n>>>27)+i|0)&r|i&~r)+t[10]+38016083|0)<<9|o>>>23)+n|0)&i|n&~i)+t[15]-660478335|0)<<14|r>>>18)+o|0)&n|o&~n)+t[4]-405537848|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[9]+568446438|0)<<5|n>>>27)+i|0)&r|i&~r)+t[14]-1019803690|0)<<9|o>>>23)+n|0)&i|n&~i)+t[3]-187363961|0)<<14|r>>>18)+o|0)&n|o&~n)+t[8]+1163531501|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[13]-1444681467|0)<<5|n>>>27)+i|0)&r|i&~r)+t[2]-51403784|0)<<9|o>>>23)+n|0)&i|n&~i)+t[7]+1735328473|0)<<14|r>>>18)+o|0)&n|o&~n)+t[12]-1926607734|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[5]-378558|0)<<4|n>>>28)+i|0)^i^r)+t[8]-2022574463|0)<<11|o>>>21)+n|0)^n^i)+t[11]+1839030562|0)<<16|r>>>16)+o|0)^o^n)+t[14]-35309556|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[1]-1530992060|0)<<4|n>>>28)+i|0)^i^r)+t[4]+1272893353|0)<<11|o>>>21)+n|0)^n^i)+t[7]-155497632|0)<<16|r>>>16)+o|0)^o^n)+t[10]-1094730640|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[13]+681279174|0)<<4|n>>>28)+i|0)^i^r)+t[0]-358537222|0)<<11|o>>>21)+n|0)^n^i)+t[3]-722521979|0)<<16|r>>>16)+o|0)^o^n)+t[6]+76029189|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[9]-640364487|0)<<4|n>>>28)+i|0)^i^r)+t[12]-421815835|0)<<11|o>>>21)+n|0)^n^i)+t[15]+530742520|0)<<16|r>>>16)+o|0)^o^n)+t[2]-995338651|0)<<23|i>>>9)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[0]-198630844|0)<<6|n>>>26)+i|0)|~r))+t[7]+1126891415|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[14]-1416354905|0)<<15|r>>>17)+o|0)|~n))+t[5]-57434055|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[12]+1700485571|0)<<6|n>>>26)+i|0)|~r))+t[3]-1894986606|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[10]-1051523|0)<<15|r>>>17)+o|0)|~n))+t[1]-2054922799|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[8]+1873313359|0)<<6|n>>>26)+i|0)|~r))+t[15]-30611744|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[6]-1560198380|0)<<15|r>>>17)+o|0)|~n))+t[13]+1309151649|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[4]-145523070|0)<<6|n>>>26)+i|0)|~r))+t[11]-1120210379|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[2]+718787259|0)<<15|r>>>17)+o|0)|~n))+t[9]-343485551|0)<<21|i>>>11)+r|0,e[0]=n+e[0]|0,e[1]=i+e[1]|0,e[2]=r+e[2]|0,e[3]=o+e[3]|0}function i(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return n}function r(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24);return n}function o(e){var t,r,o,s,a,c,l=e.length,d=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(d,i(e.substring(t-64,t)));for(r=(e=e.substring(t-64)).length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<r;t+=1)o[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(o[t>>2]|=128<<(t%4<<3),t>55)for(n(d,o),t=0;t<16;t+=1)o[t]=0;return s=(s=8*l).toString(16).match(/(.*?)(.{0,8})$/),a=parseInt(s[2],16),c=parseInt(s[1],16)||0,o[14]=a,o[15]=c,n(d,o),d}function s(e){var n,i="";for(n=0;n<4;n+=1)i+=t[e>>8*n+4&15]+t[e>>8*n&15];return i}function a(e){var t;for(t=0;t<e.length;t+=1)e[t]=s(e[t]);return e.join("")}function c(e){return/[\u0080-\uFFFF]/.test(e)&&(e=unescape(encodeURIComponent(e))),e}function l(e){var t,n=[],i=e.length;for(t=0;t<i-1;t+=2)n.push(parseInt(e.substr(t,2),16));return String.fromCharCode.apply(String,n)}function d(){this.reset()}return a(o("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function t(e,t){return(e=0|e||0)<0?Math.max(e+t,0):Math.min(e,t)}ArrayBuffer.prototype.slice=function(n,i){var r,o,s,a,c=this.byteLength,l=t(n,c),d=c;return i!==e&&(d=t(i,c)),l>d?new ArrayBuffer(0):(r=d-l,o=new ArrayBuffer(r),s=new Uint8Array(o),a=new Uint8Array(this,l,r),s.set(a),o)}}(),d.prototype.append=function(e){return this.appendBinary(c(e)),this},d.prototype.appendBinary=function(e){this._buff+=e,this._length+=e.length;var t,r=this._buff.length;for(t=64;t<=r;t+=64)n(this._hash,i(this._buff.substring(t-64,t)));return this._buff=this._buff.substring(t-64),this},d.prototype.end=function(e){var t,n,i=this._buff,r=i.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<r;t+=1)o[t>>2]|=i.charCodeAt(t)<<(t%4<<3);return this._finish(o,r),n=a(this._hash),e&&(n=l(n)),this.reset(),n},d.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},d.prototype.setState=function(e){return this._buff=e.buff,this._length=e.length,this._hash=e.hash,this},d.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},d.prototype._finish=function(e,t){var i,r,o,s=t;if(e[s>>2]|=128<<(s%4<<3),s>55)for(n(this._hash,e),s=0;s<16;s+=1)e[s]=0;i=(i=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),r=parseInt(i[2],16),o=parseInt(i[1],16)||0,e[14]=r,e[15]=o,n(this._hash,e)},d.hash=function(e,t){return d.hashBinary(c(e),t)},d.hashBinary=function(e,t){var n=a(o(e));return t?l(n):n},d.ArrayBuffer=function(){this.reset()},d.ArrayBuffer.prototype.append=function(e){var t,i,o,s,a,c=(i=this._buff.buffer,o=e,s=!0,(a=new Uint8Array(i.byteLength+o.byteLength)).set(new Uint8Array(i)),a.set(new Uint8Array(o),i.byteLength),s?a:a.buffer),l=c.length;for(this._length+=e.byteLength,t=64;t<=l;t+=64)n(this._hash,r(c.subarray(t-64,t)));return this._buff=t-64<l?new Uint8Array(c.buffer.slice(t-64)):new Uint8Array(0),this},d.ArrayBuffer.prototype.end=function(e){var t,n,i=this._buff,r=i.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<r;t+=1)o[t>>2]|=i[t]<<(t%4<<3);return this._finish(o,r),n=a(this._hash),e&&(n=l(n)),this.reset(),n},d.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.ArrayBuffer.prototype.getState=function(){var e,t=d.prototype.getState.call(this);return t.buff=(e=t.buff,String.fromCharCode.apply(null,new Uint8Array(e))),t},d.ArrayBuffer.prototype.setState=function(e){return e.buff=function(e,t){var n,i=e.length,r=new ArrayBuffer(i),o=new Uint8Array(r);for(n=0;n<i;n+=1)o[n]=e.charCodeAt(n);return t?o:r}(e.buff,!0),d.prototype.setState.call(this,e)},d.ArrayBuffer.prototype.destroy=d.prototype.destroy,d.ArrayBuffer.prototype._finish=d.prototype._finish,d.ArrayBuffer.hash=function(e,t){var i=a(function(e){var t,i,o,s,a,c,l=e.length,d=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(d,r(e.subarray(t-64,t)));for(e=t-64<l?e.subarray(t-64):new Uint8Array(0),i=e.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<i;t+=1)o[t>>2]|=e[t]<<(t%4<<3);if(o[t>>2]|=128<<(t%4<<3),t>55)for(n(d,o),t=0;t<16;t+=1)o[t]=0;return s=(s=8*l).toString(16).match(/(.*?)(.{0,8})$/),a=parseInt(s[2],16),c=parseInt(s[1],16)||0,o[14]=a,o[15]=c,n(d,o),d}(new Uint8Array(e)));return t?l(i):i},d}()},function(e,t,n){"use strict";function i(e){if(16!==e.length)return"";function t(e,t){return e+t.toString(16).padStart(2,"0")}return e.slice(0,4).reduce(t,"")+"-"+e.slice(4,6).reduce(t,"")+"-"+e.slice(6,8).reduce(t,"")+"-"+e.slice(8,10).reduce(t,"")+"-"+e.slice(10).reduce(t,"")}Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0,t.uuidv4=function(){if(void 0===window.crypto)return i(new Uint8Array(16));const e=new Uint8Array(16),t=Uint8Array.from([parseInt("01000000",2),parseInt("10000000",2),parseInt("00001111",2),parseInt("00111111",2)]);return window.crypto.getRandomValues(e),e[6]=e[6]&t[2]|t[0],e[8]=e[8]&t[3]|t[1],i(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModalWindow=t.ModalWindowView=void 0;const i=n(8),r=n(33),o=n(3);var s,a;!function(e){e[e.EDIT_TEXT=0]="EDIT_TEXT",e[e.HOTKEYS=1]="HOTKEYS",e[e.VALIDATION_STATUS=2]="VALIDATION_STATUS",e[e.DOCUMENT_UPLOAD=3]="DOCUMENT_UPLOAD",e[e.MOVE_TO=4]="MOVE_TO",e[e.NEW_FOLDER=5]="NEW_FOLDER",e[e.RENAME=6]="RENAME"}(s=t.ModalWindowView||(t.ModalWindowView={})),function(e){e[e.OPEN=0]="OPEN",e[e.CLOSED=1]="CLOSED"}(a||(a={}));t.ModalWindow=class{constructor(e){this.openEditSylTextModalWindow=function(){Array.from(document.getElementsByClassName("neon-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),document.getElementById("neon-modal-window-content-edit-text").classList.add("visible"),document.getElementById("neon-modal-window-edit-text-cancel").removeEventListener("click",this.hideModalWindow),document.getElementById("neon-modal-window-edit-text-cancel").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("neon-modal-window-edit-text-save").removeEventListener("click",this.updateSylText.bind(this)),document.getElementById("neon-modal-window-edit-text-save").addEventListener("click",this.updateSylText.bind(this)),document.getElementById("neon-modal-window-container").style.display="flex",this.focusModalWindow()},this.updateSylText=function(){const e=document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0],t=e.textContent.replace(/\u{25CA}/u,"").trim(),n=document.getElementById("neon-modal-window-edit-text-input").value;if(null!==n&&n!==t){const t={action:"setText",param:{elementId:[...e.classList.entries()].filter(e=>"text-select"!==e[1]&&"selected-to-edit"!==e[1])[0][1],text:n}};this.neonView.edit(t,this.neonView.view.getCurrentPageURI()).then(t=>{t&&this.neonView.updateForCurrentPage().then(()=>{this.updateSelectedBBox(e,this.dragHandler,this.neonView)})})}else this.updateSelectedBBox(e,this.dragHandler,this.neonView);this.hideModalWindow()},this.keydownListener=function(e){switch(e.stopImmediatePropagation(),this.modalWindowView){case s.EDIT_TEXT:"Enter"===e.key&&this.updateSylText();default:"Escape"===e.key&&this.hideModalWindow()}},this.focusModalWindow=function(){switch(this.modalWindowView){case s.EDIT_TEXT:document.getElementById("neon-modal-window-edit-text-input").select();break;case s.DOCUMENT_UPLOAD:case s.NEW_FOLDER:case s.RENAME:break;default:document.getElementById("neon-modal-window").focus()}},this.neonView=e,this.modalWindowState=a.CLOSED,this.setupEventListeners()}setupEventListeners(){document.getElementById("neon-modal-window-header-close").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("neon-modal-window").addEventListener("keydown",this.keydownListener.bind(this)),document.getElementById("neon-modal-window-container").addEventListener("click",this.focusModalWindow.bind(this))}removeEventListeners(){document.getElementById("neon-modal-window-header-close").removeEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("neon-modal-window").removeEventListener("keydown",this.keydownListener.bind(this)),document.getElementById("neon-modal-window-container").removeEventListener("click",this.focusModalWindow.bind(this))}setModalWindowView(e,t){this.modalWindowView=e,this.setModalWindowContent(t)}getModalWindowView(){return this.modalWindowView.toString()}openModalWindow(){switch(Array.from(document.getElementsByClassName("neon-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),this.modalWindowView){case s.EDIT_TEXT:this.openEditSylTextModalWindow();break;case s.HOTKEYS:document.getElementById("neon-modal-window-content-hotkeys").classList.add("visible");case s.DOCUMENT_UPLOAD:case s.MOVE_TO:case s.NEW_FOLDER:case s.RENAME:default:document.getElementById("neon-modal-window-container").style.display="flex",this.focusModalWindow()}document.body.style.overflowX="hidden",document.body.style.overflowY="hidden",this.modalWindowState=a.OPEN}hideModalWindow(){switch(this.modalWindowView){case s.EDIT_TEXT:document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].classList.remove("selected-to-edit");break;case s.DOCUMENT_UPLOAD:case s.MOVE_TO:case s.NEW_FOLDER:case s.RENAME:document.getElementById("neon-modal-window-content-container").innerHTML=""}document.getElementById("neon-modal-window-container").style.display="none",document.body.style.overflowX="hidden",document.body.style.overflowY="scroll",this.modalWindowState=a.CLOSED,this.removeEventListeners()}setModalWindowContent(e){const t=document.getElementById("neon-modal-window-content-container"),n=document.getElementById("neon-modal-window-header-title");switch(this.modalWindowView){case s.EDIT_TEXT:t.innerHTML=i.editTextModal,n.innerText="EDIT SYLLABLE TEXT";const o=/\u{25CA}/u,a=document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].textContent.replace(o,"").trim();document.getElementById("neon-modal-window-edit-text-input").value=a;break;case s.HOTKEYS:t.innerHTML=i.hotkeysModal,n.innerText="HOTKEYS";break;case s.VALIDATION_STATUS:t.innerHTML=`<div style="margin-bottom: 30px;white-space: pre-line;">${e}</div>\n          <div class="neon-modal-window-btn">\n            <a href="data:text/plain;charset=utf-8,${encodeURIComponent(e)}" download="validation.log">\n              Export\n            </a>\n            </div>`,n.innerText="ERROR LOG";break;case s.DOCUMENT_UPLOAD:n.innerText="DOCUMENT UPLOAD",t.innerHTML=r.uploadAreaHTML;break;case s.MOVE_TO:n.innerText="MOVE TO";break;case s.NEW_FOLDER:n.innerText="NEW FOLDER",t.innerHTML=r.newFolderHTML;break;case s.RENAME:n.innerText="RENAME",t.innerHTML=r.renameHTML;break;default:console.error("Unknown selection type. This should not have occurred.")}}updateSelectedBBox(e,t,n){(0,o.unselect)();const i=Array.from(e.classList).find(e=>"text-select"!==e&&"selected-to-edit"!==e);if(document.getElementById("displayBBox").checked&&document.getElementById(i)){const e=document.getElementById(i).querySelector(".sylTextRect-display");(0,o.selectBBox)(e,t,n)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGroupingHighlight=t.setStaffHighlight=t.highlight=t.unsetGroupingHighlight=t.unsetStaffHighlight=t.unhighlight=void 0;const i=["rgb(230, 159, 0)","rgb(86, 180, 233)","rgb(0, 158, 115)","rgb(240, 228, 66)","rgb(0, 114, 178)","rgb(213, 94, 0)","rgb(204, 121, 167)"];function r(e){let t;t=e?e.querySelectorAll(":not(.selected) .highlighted"):document.querySelectorAll(":not(.selected) .highlighted"),t.forEach(e=>{if("path"!==e.tagName||e.closest(".staff").classList.contains("selected"))if(e.classList.contains("divLine")&&!e.closest(".staff").classList.contains("selected"))e.setAttribute("stroke","#000000");else{e.removeAttribute("fill");let t=e.querySelectorAll(".sylTextRect-display");if(!t.length)try{t=e.closest(".syllable").querySelectorAll(".sylTextRect-display")}catch(e){t=[]}t.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||e.closest(".syl").classList.contains("selected")?e.style.fill="#d00":e.style.fill="blue",e.classList.remove("highlighted")}))}else e.setAttribute("stroke","#000000");e.classList.remove("highlighted")})}function o(){r()}function s(){o();Array.from(document.getElementsByClassName("highlighted")).filter(e=>!e.parentElement.classList.contains("selected")).forEach(e=>{e.setAttribute("#d00",null);let t=e.querySelectorAll(".sylTextRect-display");t.length||null!==e.closest(".syllable")&&(t=e.closest(".syllable").querySelectorAll("sylTextRect-display")),t.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".syl").classList.contains("selected")?e.style.fill="#d00":e.style.fill="blue",e.classList.remove("highlighted")})),e.classList.remove("highlighted"),e.querySelectorAll("sylTextRect-display").forEach(e=>{e.classList.remove("highlighted")})}),Array.from(document.getElementsByClassName("selected")).forEach(e=>{e.setAttribute("fill","")})}function a(e,t){const n=Array.from(e.children);for(let e=0;e<n.length;e++){const i=n[e];if("path"===i.tagName)i.setAttribute("stroke",t);else if(i.classList.contains("divLine"))i.setAttribute("stroke",t),i.setAttribute("stroke-width","30px");else if(i.querySelectorAll(".divLine").length&&i.classList.contains("syllable"))Array.from(i.children).filter(e=>e.querySelectorAll(".divLine")).forEach(e=>{n.push(e)});else{if(i.classList.contains("resizePoint")||"resizeRect"===i.id||i.classList.contains("rotatePoint"))return;if(i.classList.contains("layer"))Array.from(i.children).forEach(e=>{n.push(e)});else if(document.getElementsByClassName("highlight-selected").length&&"highlight-neume"===document.getElementsByClassName("highlight-selected")[0].id&&i.classList.contains("syllable"))Array.from(i.children).filter(e=>e.classList.contains("neume")).forEach(e=>{n.push(e)});else{i.setAttribute("fill",t);let e=i.querySelectorAll(".sylTextRect-display");if(!e.length)try{e=i.closest(".syllable").querySelectorAll(".sylTextRect-display")}catch(t){e=[]}e.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".syl").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||(e.style.fill=t,e.classList.add("highlighted"))}))}}i.classList.add("highlighted")}let i;i="30px",e.querySelectorAll(".nc, .custos, .clef, .accid").forEach(e=>{e.setAttribute("stroke","black"),e.setAttribute("stroke-width",i)})}function c(){const e=Array.from(document.getElementsByClassName("staff"));for(let t=0;t<e.length;t++){const n=i[t%i.length];a(e[t],n)}}t.unhighlight=r,t.unsetStaffHighlight=o,t.unsetGroupingHighlight=s,t.highlight=a,t.setStaffHighlight=c,t.setGroupingHighlight=function e(t){if(s(),"staff"===t)return void c();if("column"===t)return void function(){const e={};document.querySelectorAll(".staff").forEach(t=>{const n=Array.from(t.classList).join(" ").match(/\bcolumn(\d+)\b/);let i=0;n&&(i=parseInt(n[1],10)-1),e[i]||(e[i]=[]),e[i].push(t)});for(const[t,n]of Object.entries(e)){const e=i[Number(t)%i.length];for(const t of n)a(t,e)}}();if("selection"===t){switch(document.querySelector(".sel-by.is-active").id){case"selBySyllable":case"selByBBox":t="syllable";break;case"selByColumn":t="column";break;case"selByStaff":t="staff";break;case"selByLayerElement":t="layerElement";break;case"selByNeume":default:t="neume"}return void e(t)}let n;n="layerElement"==t?document.querySelectorAll(".accid, .clef, .custos, .divLine"):document.getElementsByClassName(t),document.querySelectorAll(".nc, .custos, .clef, .accid, .divLine").forEach(e=>{e.setAttribute("stroke","black"),e.setAttribute("stroke-width","30px")});for(let e=0;e<n.length;e++){const t=i[e%i.length];if(null!==n[e].closest(".selected")||n[e].classList.contains("selected"))n[e].classList.contains("selected")?n[e].setAttribute("fill","#d00"):n[e].setAttribute("fill",null),n[e].classList.remove("highlighted");else{n[e].setAttribute("fill",t);n[e].querySelectorAll(".sylTextRect-display").forEach((function(e){e.closest(".syl").classList.contains("selected")||e.closest(".syllable").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||(e.style.fill=t)})),n[e].classList.add("highlighted"),n[e].querySelectorAll(".sylTextRect-display").forEach(e=>{e.classList.add("highlighted")})}const r=n[e].querySelectorAll(".divLine");if(r)for(let e=0;e<r.length;e++)r[e].setAttribute("stroke",t),r[e].setAttribute("stroke-width","30px")}}},,function(e,t,n){"use strict";var i;n.d(t,"a",(function(){return o}));var r=new Uint8Array(16);function o(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}},function(e,t,n){"use strict";function i(e,t,n){var i=n[n.length-1];e===i.element&&(n.pop(),i=n[n.length-1]);var r=i.element,o=i.index;if(Array.isArray(r))r.push(e);else if(o===t.length-2){r[t.pop()]=e}else t.push(e)}t.stringify=function(e){var t=[];t.push({obj:e});for(var n,i,r,o,s,a,c,l,d,u,f="";n=t.pop();)if(i=n.obj,f+=n.prefix||"",r=n.val||"")f+=r;else if("object"!=typeof i)f+=void 0===i?null:JSON.stringify(i);else if(null===i)f+="null";else if(Array.isArray(i)){for(t.push({val:"]"}),o=i.length-1;o>=0;o--)s=0===o?"":",",t.push({obj:i[o],prefix:s});t.push({val:"["})}else{for(c in a=[],i)i.hasOwnProperty(c)&&a.push(c);for(t.push({val:"}"}),o=a.length-1;o>=0;o--)d=i[l=a[o]],u=o>0?",":"",u+=JSON.stringify(l)+":",t.push({obj:d,prefix:u});t.push({val:"{"})}return f},t.parse=function(e){for(var t,n,r,o,s,a,c,l,d,u=[],f=[],p=0;;)if("}"!==(t=e[p++])&&"]"!==t&&void 0!==t)switch(t){case" ":case"\t":case"\n":case":":case",":break;case"n":p+=3,i(null,u,f);break;case"t":p+=3,i(!0,u,f);break;case"f":p+=4,i(!1,u,f);break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"-":for(n="",p--;;){if(r=e[p++],!/[\d\.\-e\+]/.test(r)){p--;break}n+=r}i(parseFloat(n),u,f);break;case'"':for(o="",s=void 0,a=0;'"'!==(c=e[p++])||"\\"===s&&a%2==1;)o+=c,"\\"===(s=c)?a++:a=0;i(JSON.parse('"'+o+'"'),u,f);break;case"[":l={element:[],index:u.length},u.push(l.element),f.push(l);break;case"{":d={element:{},index:u.length},u.push(d.element),f.push(d);break;default:throw new Error("unexpectedly reached end of input: "+t)}else{if(1===u.length)return u.pop();i(u.pop(),u,f)}}},function(e,t,n){"use strict";var i=n(20),r=n(10);t.a=function(e,t,n){var o=(e=e||{}).random||(e.rng||i.a)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){n=n||0;for(var s=0;s<16;++s)t[n+s]=o[s];return t}return Object(r.a)(o)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(7),r=n(14),o=n(5),s=n(3);t.default=class{constructor(e,t){this.dragStartCoords=[-1,-1],this.neonView=e,this.selector=t}dragInit(){const e=i.drag().on("start",function(){this.dragStartCoords=[i.event.x,i.event.y],this.dx=0,this.dy=0,i.event.sourceEvent.target.classList.contains("staff")&&i.select(this.selector).call(e)}.bind(this)).on("drag",this.dragging.bind(this)).on("end",this.dragEnded.bind(this));i.selectAll(".selected").call(e);let t=Array.from(document.querySelectorAll(".selected"));this.noMovePrecedes=t.filter(e=>e.classList.contains("no-moving")&&e.hasAttribute("mei:precedes")),t=t.filter(e=>!e.classList.contains("no-moving")),this.selection=t.concat(Array.from(document.querySelectorAll(".resizePoint")))}dragging(){this.dx=i.event.x-this.dragStartCoords[0],this.dy=i.event.y-this.dragStartCoords[1],this.moveElements(this.selection,this.dx,this.dy);if(0===this.selection.filter(e=>e.classList.contains("syl")).length&&0===this.noMovePrecedes.length){const e=Array.from(document.querySelectorAll(".syllable.selected")).map(e=>e.querySelector(".sylTextRect-display"));this.moveElements(e,-this.dx,-this.dy)}}dragEnded(){const e=Math.abs(this.dx),t=Math.abs(this.dy);if(e<=5&&t<=5)return this.reset(),void this.dragInit();const n=this.selection.filter(e=>!e.classList.contains("resizePoint"));if(this.isCursorOutOfBounds()||this.isDragOutOfBounds(n)){this.returnElements(this.selection);const e=Array.from(document.querySelectorAll(".syllable.selected")).map(e=>e.querySelector(".sylTextRect-display"));return this.returnElements(e),this.reset(),this.dragInit(),(0,o.queueNotification)("[FAIL] Glyphs were placed out of bounds! Drag action failed.","error")}const i=[];n.forEach(e=>{const t={action:"drag",param:{elementId:"rect"===e.tagName?e.closest(".syl").id:e.id,x:this.dx,y:-this.dy}};i.push(t)});const r={action:"chain",param:i};this.neonView.edit(r,this.neonView.view.getCurrentPageURI()).then(async()=>{const e=Array.from(document.querySelectorAll(".selected")).filter(e=>!e.classList.contains("no-moving")).map(e=>e.id);await this.neonView.updateForCurrentPage(),this.endOptionsSelection(),this.reset(),await this.reselect(e),this.dragInit()})}async reselect(e){const t=e.map(e=>document.querySelector("#"+e));t.filter(e=>!e.classList.contains("syl")).forEach(async()=>await(0,s.selectAll)(t,this.neonView,this)),t.filter(e=>e.classList.contains("syl")).forEach(e=>(0,s.selectBBox)(e.querySelector(".sylTextRect-display"),this,this.neonView)),t.filter(e=>e.classList.contains("staff")).forEach(e=>(0,s.selectStaff)(e,this))}resetTo(e){this.resetToAction=e}reset(){void 0!==this.resetToAction&&i.select(this.selector).call(this.resetToAction)}endOptionsSelection(){const e=document.getElementById("moreEdit"),t=document.getElementById("extraEdit");e&&(e.innerHTML="",e.parentElement.classList.add("hidden")),t&&(t.innerHTML="",t.parentElement.classList.add("hidden"))}moveElements(e,t,n){e.filter(e=>null!==e).forEach(e=>{e.setAttribute("transform",`translate(${t},${n})`)})}returnElements(e){e.filter(e=>null!==e).forEach(e=>{e.removeAttribute("transform")})}isCursorOutOfBounds(){const e=this.dragStartCoords[0]+this.dx,t=this.dragStartCoords[1]+this.dy;return(0,r.isOutOfSVGBounds)(e,t)}isDragOutOfBounds(e){let t=document.querySelector("#displayBBox").checked?"use, rect":"use";e[0].classList.contains("staff")&&(t="path");const n=e.reduce((e,n)=>e.concat(...n.querySelectorAll(t)),[]).map(r.getGlyphBBox).reduce((e,t)=>({ulx:Math.min(e.ulx,t.ulx),uly:Math.min(e.uly,t.uly),lrx:Math.max(e.lrx,t.lrx),lry:Math.max(e.lry,t.lry)}),{ulx:Number.MAX_VALUE,uly:Number.MAX_VALUE,lrx:Number.MIN_VALUE,lry:Number.MIN_VALUE}),{ulx:i,uly:o,lrx:s,lry:a}=n;return(0,r.isOutOfSVGBounds)(i+this.dx,o+this.dy)||(0,r.isOutOfSVGBounds)(s+this.dx,a+this.dy)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initGroupingListeners=t.endGroupingSelection=t.triggerGrouping=t.mergeStaves=t.isLinkable=t.isLinked=t.isGroupable=t.initNeonView=void 0;const i=n(8),r=n(34),o=n(5),s=n(3),a=n(13),c=n(13);let l;function d(e,t){if(Array.from(t.values()).length<2)return!1;switch(e){case"selByNeume":if(s.sharedLogicalParent(e,t))return!1;default:return!!s.areAdjacent(e,t)}}function u(e,t){switch(t||(t=Array.from(document.querySelectorAll(".selected"))),e){case"selBySyllable":for(const e of t)if(e.hasAttribute("mei:follows")||e.hasAttribute("mei:precedes"))return o.queueNotification("The action involves linked syllables, please untoggle them first","warning"),!0;return!1;case"selByNeume":for(const e of t)if(e.parentElement.hasAttribute("mei:follows")||e.parentElement.hasAttribute("mei:precedes"))return o.queueNotification("The action involves linked syllables, please untoggle them first","warning"),!0;return!1;case"selByNc":for(const e of t)if(e.parentElement.parentElement.hasAttribute("mei:follows")||e.parentElement.parentElement.hasAttribute("mei:precedes"))return o.queueNotification("The action involves linked syllables, please untoggle them first","warning"),!0;return!1}}function f(e){return 2===e.length&&(e[0].getAttribute("mei:follows")==="#"+e[1].id&&e[1].getAttribute("mei:precedes")==="#"+e[0].id||e[0].getAttribute("mei:precedes")==="#"+e[1].id&&e[1].getAttribute("mei:follows")==="#"+e[0].id)}function p(e,t){switch(t.length){case 2:if("selBySyllable"!==e)return!1;if(f([t[0],t[1]]))return!0;if(s.isMultiStaveSelection(t)){const e=t[0].closest(".staff"),n=t[1].closest(".staff"),i=Array.from(e.parentElement.children),r=i.indexOf(e)<i.indexOf(n)?e:n,o=r.id===e.id?n:e,s=r.querySelector(".layer"),a=o.querySelector(".layer"),c=Array.from(s.children).filter(e=>e.classList.contains("syllable")),l=Array.from(a.children).filter(e=>e.classList.contains("syllable")),d=c[c.length-1],u=l[0];if(d.id===t[0].id&&u.id===t[1].id)return!0;if(d.id===t[1].id&&u.id===t[0].id)return!0}default:return!1}return!1}function m(){const e=document.querySelectorAll(".staff.selected"),t=[];e.forEach(e=>{t.push(e.id)});const n={action:"merge",param:{elementIds:t}};l.edit(n,l.view.getCurrentPageURI()).then(e=>{e?(o.queueNotification("Staff Merged","success"),a.endOptionsSelection(),l.updateForCurrentPage()):o.queueNotification("Merge Failed","error")})}function h(){const e=document.getElementById("moreEdit");e.innerHTML="",e.parentElement.classList.add("hidden"),document.body.removeEventListener("keydown",c.deleteButtonHandler),document.body.removeEventListener("keydown",v)}function g(){const e=document.getElementById("delete");e.removeEventListener("click",c.removeHandler),e.addEventListener("click",c.removeHandler),document.body.addEventListener("keydown",c.deleteButtonHandler),document.body.addEventListener("keydown",v);try{document.getElementById("mergeSyls").addEventListener("click",()=>{if(u(s.getSelectionType()))return;y("group","neume",w().filter(e=>document.getElementById(e).classList.contains("neume")))})}catch(e){}try{document.getElementById("groupNeumes").addEventListener("click",()=>{if(u(s.getSelectionType()))return;y("group","neume",_())})}catch(e){}try{document.getElementById("groupNcs").addEventListener("click",()=>{y("group","nc",_())})}catch(e){}try{document.getElementById("ungroupNeumes").addEventListener("click",()=>{y("ungroup","neume",w())})}catch(e){}try{document.getElementById("ungroupNcs").addEventListener("click",()=>{y("ungroup","nc",w())})}catch(e){}try{document.getElementById("toggle-ligature").addEventListener("click",async()=>{const e={action:"toggleLigature",param:{elementIds:_()}};l.edit(e,l.view.getCurrentPageURI()).then(e=>{e?o.queueNotification("Ligature Toggled","success"):o.queueNotification("Ligature Toggle Failed","error"),h(),l.updateForCurrentPage()})})}catch(e){}try{document.getElementById("toggle-link").addEventListener("click",()=>{b()})}catch(e){}}t.initNeonView=function(e){l=e},t.isGroupable=d,t.isLinked=f,t.isLinkable=p,t.mergeStaves=m,t.triggerGrouping=function(e){const t=document.getElementById("moreEdit");t.parentElement.classList.remove("hidden"),t.innerHTML+=i.groupingMenu[e],g()},t.endGroupingSelection=h,t.initGroupingListeners=g;const v=function(e){if("g"===e.key){const e=Array.from(document.querySelectorAll(".selected"));if(0==e.length)return;const t=s.getSelectionType();if(u(t,e))return;switch(t){case"selBySyllable":if(p(t,e))b();else if(d(t,e)){y("group","neume",w().filter(e=>document.getElementById(e).classList.contains("neume")))}else if(1===e.length){y("ungroup","neume",w())}break;case"selByNeume":if(d(t,e)){y("group","neume",_())}else{y("ungroup","nc",w())}break;case"selByNc":if(d(t,e)){y("group","nc",_())}else{y("ungroup","nc",w())}break;case"selByStaff":d(t,e)?m():a.triggerStaffSplitMode();break;default:return void console.error(`Can't perform grouping/ungrouping action on selection type ${t}.`)}}};function y(e,t,n){const i={action:e,param:{groupType:t,elementIds:n}};l.edit(i,l.view.getCurrentPageURI()).then(i=>{if(i?"group"===e?o.queueNotification("Grouping Success","success"):o.queueNotification("Ungrouping Success","success"):"group"===e?o.queueNotification("Grouping Failed","error"):o.queueNotification("Ungrouping Failed","error"),l.updateForCurrentPage(),"nc"===t){const e=document.getElementById(n[0]).parentElement,t=Array.from(e.children);void 0===l.info.getContour(t)&&r.groupingNotRecognized()}h()})}function b(){const e=_(),t={action:"chain",param:[]},n=new Array;if(document.getElementById(e[0]).getAttribute("mei:precedes"))n.push({action:"set",param:{elementId:e[0],attrType:"precedes",attrValue:""}}),n.push({action:"set",param:{elementId:e[1],attrType:"follows",attrValue:""}}),n.push({action:"setText",param:{elementId:e[1],text:""}});else if(document.getElementById(e[0]).getAttribute("mei:follows"))n.push({action:"set",param:{elementId:e[0],attrType:"follows",attrValue:""}}),n.push({action:"set",param:{elementId:e[1],attrType:"precedes",attrValue:""}}),n.push({action:"setText",param:{elementId:e[0],text:""}});else{const t=document.getElementById(e[0]),i=document.getElementById(e[1]),r=t.closest(".staff"),o=i.closest(".staff"),s=Array.from(r.parentElement.children).filter(e=>e.classList.contains("staff"));let a,c;s.indexOf(r)<s.indexOf(o)?(a=t,c=i):(a=i,c=t),n.push({action:"set",param:{elementId:a.id,attrType:"precedes",attrValue:"#"+c.id}}),n.push({action:"set",param:{elementId:c.id,attrType:"follows",attrValue:"#"+a.id}});const l=c.querySelector(".syl");null!==l&&n.push({action:"remove",param:{elementId:l.id}})}t.param=n,l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?o.queueNotification("Toggled Syllable Link"):o.queueNotification("Failed to Toggle Syllable Link"),h(),l.updateForCurrentPage()})}function _(){const e=[];return Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push(t.id)}),e}function w(){const e=[];return Array.from(document.getElementsByClassName("selected")).forEach(t=>{if(t.classList.contains("divLine")||t.classList.contains("accid")||t.classList.contains("clef"))return;Array.from(t.children).forEach(t=>{e.push(t.id)})}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemManager=t.FileSystemTools=t.EntryType=void 0;var i=n(88);Object.defineProperty(t,"EntryType",{enumerable:!0,get:function(){return i.EntryType}});var r=n(89);Object.defineProperty(t,"FileSystemTools",{enumerable:!0,get:function(){return r.FileSystemTools}});var o=n(90);Object.defineProperty(t,"FileSystemManager",{enumerable:!0,get:function(){return o.FileSystemManager}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initDisplayListener=t.initErrorLogControls=t.initErrorLog=t.recordNotification=void 0;const i=n(8),r=n(4);function o(){const e=document.querySelector("#error_log"),t=document.querySelector("#errorLogHeading"),n=t.querySelector("svg > use"),i=document.querySelector("#errorLogContents"),{displayErrLog:o}=(0,r.getSettings)();o&&e.classList.add("visible"),t.addEventListener("click",e=>{e.stopPropagation(),i.classList.contains("closed")?(i.classList.remove("closed"),i.style.padding="0.5em 0.75em",setTimeout(()=>{i.style.overflow="visible"},200),n.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(i.classList.add("closed"),i.style.overflow="hidden",setTimeout(()=>{i.style.padding="0px"},200),n.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))}),s()}function s(){const e=document.querySelector("#error_log"),t=document.querySelector("#display-single-container"),n=document.createElement("label"),i=document.createElement("input");i.classList.add("checkbox"),n.classList.add("checkbox-container","side-panel-btn"),n.textContent="Errors",i.id="display-errors",i.type="checkbox",i.checked=!1,n.appendChild(i),t.append(n);const{displayErrLog:o}=(0,r.getSettings)();o&&(i.checked=!0),i.addEventListener("click",()=>{const t=document.getElementById("display-all-btn"),n=document.getElementById("displayInfo"),o=document.getElementById("displayBBox"),s=document.getElementById("displayText"),a=document.getElementById("display-errors");i.checked?(e.classList.add("visible"),(0,r.setSettings)({displayErrLog:!0}),(null==n?void 0:n.checked)&&(null==o?void 0:o.checked)&&(null==s?void 0:s.checked)&&(null==a?void 0:a.checked)&&(t.classList.add("selected"),t.innerHTML="Hide All")):(e.classList.remove("visible"),(0,r.setSettings)({displayErrLog:!1}),t.classList.contains("selected")&&(t.classList.remove("selected"),t.innerHTML="Display All"))})}t.recordNotification=function(e){document.querySelector("#errorLogContents").prepend(function(e){const t=document.createElement("div");t.classList.add("notification-container"),t.innerHTML=`\n    <div class="notification-wrapper">\n\n      <div>\n        <div class="log-main">${e.message}</div>\n        <div class="log-extra"></div>\n      </div>\n\n    </div>\n\n    <div class="remove-notif-icon-wrapper">\n      <img class="log-remove remove-notif-icon" src="/Neon/Neon-gh//assets/img/garbage-closed.svg">\n    </div>\n  `;const n=t.querySelector(".log-remove");return n.onclick=()=>t.remove(),n.addEventListener("mouseover",()=>{n.setAttribute("src","/Neon/Neon-gh//assets/img/garbage-open.svg")}),n.addEventListener("mouseout",()=>{n.setAttribute("src","/Neon/Neon-gh//assets/img/garbage-closed.svg")}),t}(e))},t.initErrorLog=function(){document.querySelector("#error_log").innerHTML=i.errorLogsPanelContents,o()},t.initErrorLogControls=o,t.initDisplayListener=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resize=void 0;const i=n(3),r=n(7),o=n(14),s=n(5),a=n(4),c={TopLeft:0,Top:1,TopRight:2,Right:3,BottomRight:4,Bottom:5,BottomLeft:6,Left:7};function l(e,t,n,i,r){let o;if(r>=0)o=[{x:e,y:t,name:c.TopLeft},{x:(e+n)/2,y:t+(n-e)/2*Math.sin(r),name:c.Top},{x:n,y:t+(n-e)*Math.sin(r),name:c.TopRight},{x:n,y:(t+i+(n-e)*Math.sin(r))/2,name:c.Right},{x:n,y:i,name:c.BottomRight},{x:(e+n)/2,y:i-(n-e)/2*Math.sin(r),name:c.Bottom},{x:e,y:i-(n-e)*Math.sin(r),name:c.BottomLeft},{x:e,y:(t+i-(n-e)*Math.sin(r))/2,name:c.Left}];else{const s=(n-e)*Math.tan(Math.abs(r)),a=i-t-s;o=[{x:e,y:t+s,name:c.TopLeft},{x:(e+n)/2,y:t+s/2,name:c.Top},{x:n,y:t,name:c.TopRight},{x:n,y:t+a/2,name:c.Right},{x:n,y:t+a,name:c.BottomRight},{x:(e+n)/2,y:i-s/2,name:c.Bottom},{x:e,y:i,name:c.BottomLeft},{x:e,y:i-a/2,name:c.Left}]}return o}t.resize=function(e,t,n){let d,u,f,p,m,h,g,v,y,b,_,w,E,S,k;function L(){const e=l(d,u,f,p,m),t=e.filter((e,t)=>t%2==0).map(e=>e.x+","+e.y).join(" ");document.querySelector("#resizeRect").setAttribute("points",t);const n=document.querySelector(".syl.selected > .sylTextRect-display");n&&(n.setAttribute("x",String(Math.min(d,f))),n.setAttribute("y",String(Math.min(u,p))),n.setAttribute("width",String(Math.abs(f-d))),n.setAttribute("height",String(Math.abs(p-u))));for(const t in c){const n=e[c[t]];r.select("#p-"+t).filter(".resizePoint").attr("cx",n.x).attr("cy",n.y)}let i=e[3].x,o=e[3].y;const s=i+100+","+(o+85)+" "+(i+70)+","+(o+50)+" "+(i+100)+","+(o+15)+" "+(i+130)+","+(o+50);i=e[7].x,o=e[7].y;const a=i-100+","+(o-15)+" "+(i-130)+","+(o-50)+" "+(i-100)+","+(o-85)+" "+(i-70)+","+(o-50);r.select("#rotateLeft").attr("points",a),r.select("#rotateRight").attr("points",s)}!function A(){if(null===e)return;if(r.selectAll(".resizePoint").remove(),r.selectAll("#resizeRect").remove(),r.selectAll(".rotatePoint").remove(),e.classList.contains("syl")){const t=e.querySelector(".sylTextRect-display");if(null===t)return void console.warn("Tried to draw resize rect for a sylTextRect that doesn't exist (or isn't displaying)");d=Number(t.getAttribute("x")),u=Number(t.getAttribute("y")),f=+d+ +t.getAttribute("width"),p=+u+ +t.getAttribute("height"),m=0}if(e.classList.contains("staff")){const t=(0,i.getStaffBBox)(e);d=t.ulx,u=t.uly,f=t.lrx,p=t.lry;const n=e.querySelector("path").getAttribute("d").match(/\d+/g).map(e=>Number(e));m=Math.atan((n[3]-n[1])/(n[2]-n[0]))}let x;h=d,y=u,g=f,b=p;const C=l(d,u,f,p,m);E=C[2].x-C[0].x;const T=C.filter((e,t)=>t%2==0).map(e=>e.x+","+e.y).join(" ");r.select("#"+e.id).append("polygon").attr("points",T).attr("id","resizeRect").attr("stroke","black").attr("stroke-width",10).attr("fill","none").style("cursor","move").style("stroke-dasharray","20 10");const{circleSize:N}=(0,a.getSettings)();for(const t in c){const n=C[c[t]];r.select(e.viewportElement).append("circle").attr("cx",n.x).attr("cy",n.y).attr("r",N).attr("stroke","black").attr("stroke-width",4).attr("fill","#0099ff").attr("class","resizePoint").attr("id","p-"+t)}for(const e in c)r.select("#p-"+e).filter(".resizePoint").call(r.drag().on("start",()=>{q(e)}).on("drag",O).on("end",I.bind(this)));if(e.classList.contains("staff")){let t=C[3].x,n=C[3].y;const i=t+100+","+(n+85)+" "+(t+70)+","+(n+50)+" "+(t+100)+","+(n+15)+" "+(t+130)+","+(n+50);t=C[7].x,n=C[7].y;const o=t-100+","+(n-15)+" "+(t-130)+","+(n-50)+" "+(t-100)+","+(n-85)+" "+(t-70)+","+(n-50);r.select("#"+e.id).append("polygon").attr("points",i).attr("id","rotateRight").attr("stroke","black").attr("stroke-width",7).attr("fill","#0099ff").attr("class","rotatePoint"),r.select("#"+e.id).append("polygon").attr("points",o).attr("id","rotateLeft").attr("stroke","black").attr("stroke-width",7).attr("fill","#0099ff").attr("class","rotatePoint"),r.select("#rotateLeft").call(r.drag().on("start",B).on("drag",(function(){const e=r.mouse(this)[1]-_,t=k-Math.atan(e/E);t>-.2&&t<.2&&(S=e,u=w+S,m=t,m>=0?(u=S+C.filter(e=>e.name===c.TopLeft)[0].y,p=C.filter(e=>e.name===c.BottomRight)[0].y):(u=C.filter(e=>e.name===c.TopRight)[0].y,p=S+C.filter(e=>e.name===c.BottomLeft)[0].y));L()})).on("end",M)),r.select("#rotateRight").call(r.drag().on("start",B).on("drag",(function(){const e=r.mouse(this)[1]-_,t=k+Math.atan(e/E);t>-.2&&t<.2&&(S=e,m=t,m>=0?(p=S+C.filter(e=>e.name===c.BottomRight)[0].y,u=C.filter(e=>e.name===c.TopLeft)[0].y):(u=S+C.filter(e=>e.name===c.TopRight)[0].y,p=C.filter(e=>e.name===c.BottomLeft)[0].y));L()})).on("end",M))}function q(e){x=e;const t=C.find(t=>t.name===c[e]);v=[t.x,t.y],y=u,b=p}function O(){const e=r.mouse(this);switch(c[x]){case c.TopLeft:d=e[0],u=e[1];break;case c.Top:u=e[1]-(f-d)*Math.tan(m)/2;break;case c.TopRight:f=e[0],u=e[1]-(f-d)*Math.tan(m);break;case c.Right:f=e[0],p=b+(e[0]-v[0])*Math.tan(m);break;case c.BottomRight:f=e[0],p=e[1];break;case c.Bottom:p=e[1]+(f-d)*Math.tan(m)/2;break;case c.BottomLeft:d=e[0],p=e[1]+(f-d)*Math.tan(m);break;case c.Left:d=e[0],u=y+(e[0]-v[0])*Math.tan(m);break;default:console.error("Something that wasn't a side of the rectangle was dragged. This shouldn't happen.")}L()}function I(){if((0,o.isOutOfSVGBounds)(d,u)||(0,o.isOutOfSVGBounds)(f,p))return d=h,u=y,f=g,p=b,L(),(0,s.queueNotification)("[FAIL] Glyphs were placed out of bounds! Resize action failed.","error");const r={action:"resize",param:{elementId:e.id,ulx:d,uly:u,lrx:f,lry:p}};t.edit(r,t.view.getCurrentPageURI()).then(async r=>{if(r&&await t.updateForCurrentPage(),e=document.querySelector("#"+e.id),d=void 0,u=void 0,f=void 0,p=void 0,A(),e.classList.contains("syl"))(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this);else{(0,i.selectAll)([document.querySelector("#"+e.id)],t,n);const r=document.querySelector("moreEdit");r&&(r.innerHTML="",r.parentElement.classList.add("hidden"))}})}function B(){const e=r.event.sourceEvent.target.id;_=r.mouse(this)[1],b=p,y=u,w="rotateRight"===e?p:u,k=m}function M(){if(void 0===S&&(S=0),(0,o.isOutOfSVGBounds)(d,u)||(0,o.isOutOfSVGBounds)(f,p))return document.querySelectorAll(".resizePoint").forEach(e=>e.remove()),document.querySelectorAll("#resizeRect").forEach(e=>e.remove()),document.querySelectorAll(".rotatePoint").forEach(e=>e.remove()),e=document.getElementById(e.id),d=void 0,u=void 0,f=void 0,p=void 0,S=void 0,A(),e.classList.contains("syl")?(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this):(0,i.selectStaff)(e,n),(0,s.queueNotification)("[FAIL] Glyphs were placed out of bounds! Rotate action failed.","error");const r={action:"resizeRotate",param:{elementId:e.id,ulx:d,uly:u,lrx:f,lry:p,rotate:180*m/Math.PI}};t.edit(r,t.view.getCurrentPageURI()).then(async r=>{r&&await t.updateForCurrentPage(),e=document.getElementById(e.id),d=void 0,u=void 0,f=void 0,p=void 0,S=void 0,A(),e.classList.contains("syl")?(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this):(0,i.selectStaff)(e,n)})}}()}},function(e,t,n){"use strict";n.r(t),function(e){var i,r,o=n(2),s=n.n(o),a=n(22),c=n(15),l=n.n(c),d=n(21),u=n.n(d),f=n(6),p=n.n(f),m=n(1),h=n.n(m),g=n(0),v=n.n(g);function y(e){return"$"+e}function b(e){return e.substring(1)}function _(){this._store={}}function w(e){if(this._store=new _,e&&Array.isArray(e))for(var t=0,n=e.length;t<n;t++)this.add(e[t])}function E(e){if(e instanceof ArrayBuffer)return function(e){if("function"==typeof e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t),i=new Uint8Array(e);return n.set(i),t}(e);var t=e.size,n=e.type;return"function"==typeof e.slice?e.slice(0,t,n):e.webkitSlice(0,t,n)}_.prototype.get=function(e){var t=y(e);return this._store[t]},_.prototype.set=function(e,t){var n=y(e);return this._store[n]=t,!0},_.prototype.has=function(e){return y(e)in this._store},_.prototype.keys=function(){return Object.keys(this._store).map(e=>b(e))},_.prototype.delete=function(e){var t=y(e),n=t in this._store;return delete this._store[t],n},_.prototype.forEach=function(e){for(var t=Object.keys(this._store),n=0,i=t.length;n<i;n++){var r=t[n];e(this._store[r],r=b(r))}},Object.defineProperty(_.prototype,"size",{get:function(){return Object.keys(this._store).length}}),w.prototype.add=function(e){return this._store.set(e,!0)},w.prototype.has=function(e){return this._store.has(e)},w.prototype.forEach=function(e){this._store.forEach((function(t,n){e(n)}))},Object.defineProperty(w.prototype,"size",{get:function(){return this._store.size}}),!function(){if("undefined"==typeof Symbol||"undefined"==typeof Map||"undefined"==typeof Set)return!1;var e=Object.getOwnPropertyDescriptor(Map,Symbol.species);return e&&"get"in e&&Map[Symbol.species]===Map}()?(i=w,r=_):(i=Set,r=Map);var S=Function.prototype.toString,k=S.call(Object);function L(e){var t,n,i;if(!e||"object"!=typeof e)return e;if(Array.isArray(e)){for(t=[],n=0,i=e.length;n<i;n++)t[n]=L(e[n]);return t}if(e instanceof Date&&isFinite(e))return e.toISOString();if(function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer||"undefined"!=typeof Blob&&e instanceof Blob}(e))return E(e);if(!function(e){var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&S.call(n)==k}(e))return e;for(n in t={},e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=L(e[n]);void 0!==r&&(t[n]=r)}return t}function A(e){var t=!1;return p()((function(n){if(t)throw new Error("once called more than once");t=!0,e.apply(this,n)}))}function x(e){return p()((function(t){t=L(t);var n=this,i="function"==typeof t[t.length-1]&&t.pop(),r=new Promise((function(i,r){var o;try{var s=A((function(e,t){e?r(e):i(t)}));t.push(s),(o=e.apply(n,t))&&"function"==typeof o.then&&i(o)}catch(e){r(e)}}));return i&&r.then((function(e){i(null,e)}),i),r}))}function C(e,t){return x(p()((function(n){if(this._closed)return Promise.reject(new Error("database is closed"));if(this._destroyed)return Promise.reject(new Error("database is destroyed"));var i=this;return function(e,t,n){if(e.constructor.listeners("debug").length){for(var i=["api",e.name,t],r=0;r<n.length-1;r++)i.push(n[r]);e.constructor.emit("debug",i);var o=n[n.length-1];n[n.length-1]=function(n,i){var r=["api",e.name,t];r=r.concat(n?["error",n]:["success",i]),e.constructor.emit("debug",r),o(n,i)}}}(i,e,n),this.taskqueue.isReady?t.apply(this,n):new Promise((function(t,r){i.taskqueue.addTask((function(o){o?r(o):t(i[e].apply(i,n))}))}))})))}function T(e,t){for(var n={},i=0,r=t.length;i<r;i++){var o=t[i];o in e&&(n[o]=e[o])}return n}var N;function q(e){return e}function O(e){return[{ok:e}]}function I(e,t,n){var i=t.docs,o=new r;i.forEach((function(e){o.has(e.id)?o.get(e.id).push(e):o.set(e.id,[e])}));var s=o.size,a=0,c=new Array(s);function l(){var e;++a===s&&(e=[],c.forEach((function(t){t.docs.forEach((function(n){e.push({id:t.id,docs:[n]})}))})),n(null,{results:e}))}var d=[];o.forEach((function(e,t){d.push(t)}));var u=0;function f(){if(!(u>=d.length)){var n=Math.min(u+6,d.length),i=d.slice(u,n);!function(n,i){n.forEach((function(n,r){var s=i+r,a=o.get(n),d=T(a[0],["atts_since","attachments"]);d.open_revs=a.map((function(e){return e.rev})),d.open_revs=d.open_revs.filter(q);var u=q;0===d.open_revs.length&&(delete d.open_revs,u=O),["revs","attachments","binary","ajax","latest"].forEach((function(e){e in t&&(d[e]=t[e])})),e.get(n,d,(function(e,t){var i,r,o;i=e?[{error:e}]:u(t),r=n,o=i,c[s]={id:r,docs:o},l(),f()}))}))}(i,u),u+=i.length}}f()}try{localStorage.setItem("_pouch_check_localstorage",1),N=!!localStorage.getItem("_pouch_check_localstorage")}catch(e){N=!1}function B(){return N}function M(){v.a.call(this),this._listeners={},function(e){B()&&addEventListener("storage",(function(t){e.emit(t.key)}))}(this)}function P(e){if("undefined"!=typeof console&&"function"==typeof console[e]){var t=Array.prototype.slice.call(arguments,1);console[e].apply(console,t)}}function j(e){var t=0;return e||(t=2e3),function(e,t){return e=parseInt(e,10)||0,(t=parseInt(t,10))!=t||t<=e?t=(e||1)<<1:t+=1,t>6e5&&(e=3e5,t=6e5),~~((t-e)*Math.random()+e)}(e,t)}function F(e,t){P("info","The above "+e+" is totally normal. "+t)}h()(M,v.a),M.prototype.addListener=function(e,t,n,i){if(!this._listeners[t]){var r=this,o=!1;this._listeners[t]=a,this.on(e,a)}function a(){if(r._listeners[t])if(o)o="waiting";else{o=!0;var e=T(i,["style","include_docs","attachments","conflicts","filter","doc_ids","view","since","query_params","binary","return_docs"]);n.changes(e).on("change",(function(e){e.seq>i.since&&!i.cancelled&&(i.since=e.seq,i.onChange(e))})).on("complete",(function(){"waiting"===o&&s()(a),o=!1})).on("error",(function(){o=!1}))}}},M.prototype.removeListener=function(e,t){t in this._listeners&&(v.a.prototype.removeListener.call(this,e,this._listeners[t]),delete this._listeners[t])},M.prototype.notifyLocalWindows=function(e){B()&&(localStorage[e]="a"===localStorage[e]?"b":"a")},M.prototype.notify=function(e){this.emit(e),this.notifyLocalWindows(e)};var D="function"==typeof Object.assign?Object.assign:function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};function R(e,t,n){Error.call(this,n),this.status=e,this.name=t,this.message=n,this.error=!0}h()(R,Error),R.prototype.toString=function(){return JSON.stringify({status:this.status,name:this.name,message:this.message,reason:this.reason})};new R(401,"unauthorized","Name or password is incorrect.");var $=new R(400,"bad_request","Missing JSON list of 'docs'"),H=new R(404,"not_found","missing"),V=new R(409,"conflict","Document update conflict"),U=new R(400,"bad_request","_id field must contain a string"),G=new R(412,"missing_id","_id is required for puts"),W=new R(400,"bad_request","Only reserved document ids may start with underscore."),z=(new R(412,"precondition_failed","Database not open"),new R(500,"unknown_error","Database encountered an unknown error")),J=new R(500,"badarg","Some query argument is invalid"),K=(new R(400,"invalid_request","Request was invalid"),new R(400,"query_parse_error","Some query parameter is invalid")),X=new R(500,"doc_validation","Bad special document member"),Y=new R(400,"bad_request","Something wrong with the request"),Q=new R(400,"bad_request","Document must be a JSON object"),Z=(new R(404,"not_found","Database not found"),new R(500,"indexed_db_went_bad","unknown")),ee=(new R(500,"web_sql_went_bad","unknown"),new R(500,"levelDB_went_went_bad","unknown"),new R(403,"forbidden","Forbidden by design doc validate_doc_update function"),new R(400,"bad_request","Invalid rev format")),te=(new R(412,"file_exists","The database could not be created, the file already exists."),new R(412,"missing_stub","A pre-existing attachment stub wasn't found"));new R(413,"invalid_url","Provided URL is invalid");function ne(e,t){function n(t){for(var n=Object.getOwnPropertyNames(e),i=0,r=n.length;i<r;i++)"function"!=typeof e[n[i]]&&(this[n[i]]=e[n[i]]);void 0===this.stack&&(this.stack=(new Error).stack),void 0!==t&&(this.reason=t)}return n.prototype=R.prototype,new n(t)}function ie(e){if("object"!=typeof e){var t=e;(e=z).data=t}return"error"in e&&"conflict"===e.error&&(e.name="conflict",e.status=409),"name"in e||(e.name=e.error||"unknown"),"status"in e||(e.status=500),"message"in e||(e.message=e.message||e.reason),"stack"in e||(e.stack=(new Error).stack),e}function re(e){var t={},n=e.filter&&"function"==typeof e.filter;return t.query=e.query_params,function(i){i.doc||(i.doc={});var r=n&&function(e,t,n){try{return!e(t,n)}catch(e){var i="Filter function threw: "+e.toString();return ne(Y,i)}}(e.filter,i.doc,t);if("object"==typeof r)return r;if(r)return!1;if(e.include_docs){if(!e.attachments)for(var o in i.doc._attachments)Object.prototype.hasOwnProperty.call(i.doc._attachments,o)&&(i.doc._attachments[o].stub=!0)}else delete i.doc;return!0}}function oe(e){for(var t=[],n=0,i=e.length;n<i;n++)t=t.concat(e[n]);return t}function se(e){var t;if(e?"string"!=typeof e?t=ne(U):/^_/.test(e)&&!/^_(design|local)/.test(e)&&(t=ne(W)):t=ne(G),t)throw t}function ae(e){return"boolean"==typeof e._remote?e._remote:"function"==typeof e.type&&(P("warn","db.type() is deprecated and will be removed in a future version of PouchDB"),"http"===e.type())}function ce(e){if(!e)return null;var t=e.split("/");return 2===t.length?t:1===t.length?[e,e]:null}function le(e){var t=ce(e);return t?t.join("/"):null}var de=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],ue=/(?:^|&)([^&=]*)=?([^&]*)/g,fe=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;function pe(e){for(var t=fe.exec(e),n={},i=14;i--;){var r=de[i],o=t[i]||"",s=-1!==["user","password"].indexOf(r);n[r]=s?decodeURIComponent(o):o}return n.queryKey={},n[de[12]].replace(ue,(function(e,t,i){t&&(n.queryKey[t]=i)})),n}function me(e,t){var n=[],i=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n.push(r),i.push(t[r]));return n.push(e),Function.apply(null,n).apply(null,i)}function he(e,t,n){return e.get(t).catch((function(e){if(404!==e.status)throw e;return{}})).then((function(i){var r=i._rev,o=n(i);return o?(o._id=t,o._rev=r,function(e,t,n){return e.put(t).then((function(e){return{updated:!0,rev:e.rev}}),(function(i){if(409!==i.status)throw i;return he(e,t._id,n)}))}(e,o,n)):{updated:!1,rev:r}}))}var ge=function(e){return atob(e)},ve=function(e){return btoa(e)};function ye(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(r){if("TypeError"!==r.name)throw r;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<e.length;i+=1)n.append(e[i]);return n.getBlob(t.type)}}function be(e){for(var t=e.length,n=new ArrayBuffer(t),i=new Uint8Array(n),r=0;r<t;r++)i[r]=e.charCodeAt(r);return n}function _e(e,t){return ye([be(e)],{type:t})}function we(e,t){return _e(ge(e),t)}function Ee(e,t){var n=new FileReader,i="function"==typeof n.readAsBinaryString;n.onloadend=function(e){var n=e.target.result||"";if(i)return t(n);t(function(e){for(var t="",n=new Uint8Array(e),i=n.byteLength,r=0;r<i;r++)t+=String.fromCharCode(n[r]);return t}(n))},i?n.readAsBinaryString(e):n.readAsArrayBuffer(e)}function Se(e,t){Ee(e,(function(e){t(e)}))}function ke(e,t){Se(e,(function(e){t(ve(e))}))}var Le=self.setImmediate||self.setTimeout;function Ae(e,t,n,i,r){(n>0||i<t.size)&&(t=function(e,t,n){return e.webkitSlice?e.webkitSlice(t,n):e.slice(t,n)}(t,n,i)),function(e,t){var n=new FileReader;n.onloadend=function(e){var n=e.target.result||new ArrayBuffer(0);t(n)},n.readAsArrayBuffer(e)}(t,(function(t){e.append(t),r()}))}function xe(e,t,n,i,r){(n>0||i<t.length)&&(t=t.substring(n,i)),e.appendBinary(t),r()}function Ce(e,t){var n="string"==typeof e,i=n?e.length:e.size,r=Math.min(32768,i),o=Math.ceil(i/r),s=0,a=n?new l.a:new l.a.ArrayBuffer,c=n?xe:Ae;function d(){Le(f)}function u(){var e=function(e){return ve(e)}(a.end(!0));t(e),a.destroy()}function f(){var t=s*r,n=t+r;s++,c(a,e,t,n,s<o?d:u)}f()}function Te(e){return l.a.hash(e)}function Ne(e,t){if(!t)return Object(a.a)().replace(/-/g,"").toLowerCase();var n=D({},e);return delete n._rev_tree,Te(JSON.stringify(n))}var qe=a.a;function Oe(e){for(var t,n,i,r,o=e.rev_tree.slice();r=o.pop();){var s=r.ids,a=s[2],c=r.pos;if(a.length)for(var l=0,d=a.length;l<d;l++)o.push({pos:c+1,ids:a[l]});else{var u=!!s[1].deleted,f=s[0];t&&!(i!==u?i:n!==c?n<c:t<f)||(t=f,n=c,i=u)}}return n+"-"+t}function Ie(e,t){for(var n,i=e.slice();n=i.pop();)for(var r=n.pos,o=n.ids,s=o[2],a=t(0===s.length,r,o[0],n.ctx,o[1]),c=0,l=s.length;c<l;c++)i.push({pos:r+1,ids:s[c],ctx:a})}function Be(e,t){return e.pos-t.pos}function Me(e){var t=[];Ie(e,(function(e,n,i,r,o){e&&t.push({rev:n+"-"+i,pos:n,opts:o})})),t.sort(Be).reverse();for(var n=0,i=t.length;n<i;n++)delete t[n].pos;return t}function Pe(e){for(var t=Oe(e),n=Me(e.rev_tree),i=[],r=0,o=n.length;r<o;r++){var s=n[r];s.rev===t||s.opts.deleted||i.push(s.rev)}return i}function je(e){for(var t,n=[],i=e.slice();t=i.pop();){var r=t.pos,o=t.ids,s=o[0],a=o[1],c=o[2],l=0===c.length,d=t.history?t.history.slice():[];d.push({id:s,opts:a}),l&&n.push({pos:r+1-d.length,ids:d});for(var u=0,f=c.length;u<f;u++)i.push({pos:r+1,ids:c[u],history:d})}return n.reverse()}function Fe(e,t){return e.pos-t.pos}function De(e,t,n){var i=function(e,t,n){for(var i,r=0,o=e.length;r<o;)n(e[i=r+o>>>1],t)<0?r=i+1:o=i;return r}(e,t,n);e.splice(i,0,t)}function Re(e,t){for(var n,i,r=t,o=e.length;r<o;r++){var s=e[r],a=[s.id,s.opts,[]];i?(i[2].push(a),i=a):n=i=a}return n}function $e(e,t){return e[0]<t[0]?-1:1}function He(e,t){for(var n=[{tree1:e,tree2:t}],i=!1;n.length>0;){var r=n.pop(),o=r.tree1,s=r.tree2;(o[1].status||s[1].status)&&(o[1].status="available"===o[1].status||"available"===s[1].status?"available":"missing");for(var a=0;a<s[2].length;a++)if(o[2][0]){for(var c=!1,l=0;l<o[2].length;l++)o[2][l][0]===s[2][a][0]&&(n.push({tree1:o[2][l],tree2:s[2][a]}),c=!0);c||(i="new_branch",De(o[2],s[2][a],$e))}else i="new_leaf",o[2][0]=s[2][a]}return{conflicts:i,tree:e}}function Ve(e,t,n){var i,r=[],o=!1,s=!1;if(!e.length)return{tree:[t],conflicts:"new_leaf"};for(var a=0,c=e.length;a<c;a++){var l=e[a];if(l.pos===t.pos&&l.ids[0]===t.ids[0])i=He(l.ids,t.ids),r.push({pos:l.pos,ids:i.tree}),o=o||i.conflicts,s=!0;else if(!0!==n){var d=l.pos<t.pos?l:t,u=l.pos<t.pos?t:l,f=u.pos-d.pos,p=[],m=[];for(m.push({ids:d.ids,diff:f,parent:null,parentIdx:null});m.length>0;){var h=m.pop();if(0!==h.diff)for(var g=h.ids[2],v=0,y=g.length;v<y;v++)m.push({ids:g[v],diff:h.diff-1,parent:h.ids,parentIdx:v});else h.ids[0]===u.ids[0]&&p.push(h)}var b=p[0];b?(i=He(b.ids,u.ids),b.parent[2][b.parentIdx]=i.tree,r.push({pos:d.pos,ids:d.ids}),o=o||i.conflicts,s=!0):r.push(l)}else r.push(l)}return s||r.push(t),r.sort(Fe),{tree:r,conflicts:o||"internal_node"}}function Ue(e,t,n){var i=Ve(e,t),r=function(e,t){for(var n,i,r=je(e),o=0,s=r.length;o<s;o++){var a,c=r[o],l=c.ids;if(l.length>t){n||(n={});var d=l.length-t;a={pos:c.pos+d,ids:Re(l,d)};for(var u=0;u<d;u++){var f=c.pos+u+"-"+l[u].id;n[f]=!0}}else a={pos:c.pos,ids:Re(l,0)};i=i?Ve(i,a,!0).tree:[a]}return n&&Ie(i,(function(e,t,i){delete n[t+"-"+i]})),{tree:i,revs:n?Object.keys(n):[]}}(i.tree,n);return{tree:r.tree,stemmedRevs:r.revs,conflicts:i.conflicts}}function Ge(e){return e.ids}function We(e,t){t||(t=Oe(e));for(var n,i=t.substring(t.indexOf("-")+1),r=e.rev_tree.map(Ge);n=r.pop();){if(n[0]===i)return!!n[1].deleted;r=r.concat(n[2])}}function ze(e){return/^_local/.test(e)}function Je(e,t,n){v.a.call(this);var i=this;this.db=e;var r=(t=t?L(t):{}).complete=A((function(t,n){var r,s;t?(s="error",("listenerCount"in(r=i)?r.listenerCount(s):v.a.listenerCount(r,s))>0&&i.emit("error",t)):i.emit("complete",n),i.removeAllListeners(),e.removeListener("destroyed",o)}));function o(){i.cancel()}n&&(i.on("complete",(function(e){n(null,e)})),i.on("error",n)),e.once("destroyed",o),t.onChange=function(e,t,n){i.isCancelled||function(e,t,n,i){try{e.emit("change",t,n,i)}catch(e){P("error",'Error in .on("change", function):',e)}}(i,e,t,n)};var s=new Promise((function(e,n){t.complete=function(t,i){t?n(t):e(i)}}));i.once("cancel",(function(){e.removeListener("destroyed",o),t.complete(null,{status:"cancelled"})})),this.then=s.then.bind(s),this.catch=s.catch.bind(s),this.then((function(e){r(null,e)}),r),e.taskqueue.isReady?i.validateChanges(t):e.taskqueue.addTask((function(e){e?t.complete(e):i.isCancelled?i.emit("cancel"):i.validateChanges(t)}))}function Ke(e,t,n){var i=[{rev:e._rev}];"all_docs"===n.style&&(i=Me(t.rev_tree).map((function(e){return{rev:e.rev}})));var r={id:t.id,changes:i,doc:e};return We(t,e._rev)&&(r.deleted=!0),n.conflicts&&(r.doc._conflicts=Pe(t),r.doc._conflicts.length||delete r.doc._conflicts),r}function Xe(e,t){return e<t?-1:e>t?1:0}function Ye(e,t){return function(n,i){n||i[0]&&i[0].error?((n=n||i[0]).docId=t,e(n)):e(null,i.length?i[0]:i)}}function Qe(e,t){var n=Xe(e._id,t._id);return 0!==n?n:Xe(e._revisions?e._revisions.start:0,t._revisions?t._revisions.start:0)}function Ze(){for(var e in v.a.call(this),Ze.prototype)"function"==typeof this[e]&&(this[e]=this[e].bind(this))}function et(){this.isReady=!1,this.failed=!1,this.queue=[]}function tt(e,t){if(!(this instanceof tt))return new tt(e,t);var n=this;if(t=t||{},e&&"object"==typeof e&&(e=(t=e).name,delete t.name),void 0===t.deterministic_revs&&(t.deterministic_revs=!0),this.__opts=t=L(t),n.auto_compaction=t.auto_compaction,n.prefix=tt.prefix,"string"!=typeof e)throw new Error("Missing/invalid DB name");var i=function(e,t){var n=e.match(/([a-z-]*):\/\/(.*)/);if(n)return{name:/https?/.test(n[1])?n[1]+"://"+n[2]:n[2],adapter:n[1]};var i=tt.adapters,r=tt.preferredAdapters,o=tt.prefix,s=t.adapter;if(!s)for(var a=0;a<r.length&&("idb"===(s=r[a])&&"websql"in i&&B()&&localStorage["_pouch__websqldb_"+o+e]);++a)P("log",'PouchDB is downgrading "'+e+'" to WebSQL to avoid data loss, because it was already opened with WebSQL.');var c=i[s];return{name:!c||!("use_prefix"in c)||c.use_prefix?o+e:e,adapter:s}}((t.prefix||"")+e,t);if(t.name=i.name,t.adapter=t.adapter||i.adapter,n.name=e,n._adapter=t.adapter,tt.emit("debug",["adapter","Picked adapter: ",t.adapter]),!tt.adapters[t.adapter]||!tt.adapters[t.adapter].valid())throw new Error("Invalid Adapter: "+t.adapter);if(t.view_adapter&&(!tt.adapters[t.view_adapter]||!tt.adapters[t.view_adapter].valid()))throw new Error("Invalid View Adapter: "+t.view_adapter);Ze.call(n),n.taskqueue=new et,n.adapter=t.adapter,tt.adapters[t.adapter].call(n,t,(function(e){if(e)return n.taskqueue.fail(e);!function(e){function t(t){e.removeListener("closed",n),t||e.constructor.emit("destroyed",e.name)}function n(){e.removeListener("destroyed",t),e.constructor.emit("unref",e)}e.once("destroyed",t),e.once("closed",n),e.constructor.emit("ref",e)}(n),n.emit("created",n),tt.emit("created",n.name),n.taskqueue.ready(n)}))}h()(Je,v.a),Je.prototype.cancel=function(){this.isCancelled=!0,this.db.taskqueue.isReady&&this.emit("cancel")},Je.prototype.validateChanges=function(e){var t=e.complete,n=this;tt._changesFilterPlugin?tt._changesFilterPlugin.validate(e,(function(i){if(i)return t(i);n.doChanges(e)})):n.doChanges(e)},Je.prototype.doChanges=function(e){var t=this,n=e.complete;if("live"in(e=L(e))&&!("continuous"in e)&&(e.continuous=e.live),e.processChange=Ke,"latest"===e.since&&(e.since="now"),e.since||(e.since=0),"now"!==e.since){if(tt._changesFilterPlugin){if(tt._changesFilterPlugin.normalize(e),tt._changesFilterPlugin.shouldFilter(this,e))return tt._changesFilterPlugin.filter(this,e)}else["doc_ids","filter","selector","view"].forEach((function(t){t in e&&P("warn",'The "'+t+'" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.')}));"descending"in e||(e.descending=!1),e.limit=0===e.limit?1:e.limit,e.complete=n;var i=this.db._changes(e);if(i&&"function"==typeof i.cancel){var r=t.cancel;t.cancel=p()((function(e){i.cancel(),r.apply(this,e)}))}}else this.db.info().then((function(i){t.isCancelled?n(null,{status:"cancelled"}):(e.since=i.update_seq,t.doChanges(e))}),n)},h()(Ze,v.a),Ze.prototype.post=C("post",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(ne(Q));this.bulkDocs({docs:[e]},t,Ye(n,e._id))})),Ze.prototype.put=C("put",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(ne(Q));if(se(e._id),ze(e._id)&&"function"==typeof this._putLocal)return e._deleted?this._removeLocal(e,n):this._putLocal(e,n);var i,r,o,s,a=this;function c(n){"function"==typeof a._put&&!1!==t.new_edits?a._put(e,t,n):a.bulkDocs({docs:[e]},t,Ye(n,e._id))}t.force&&e._rev?(i=e._rev.split("-"),r=i[1],o=parseInt(i[0],10)+1,s=Ne(),e._revisions={start:o,ids:[s,r]},e._rev=o+"-"+s,t.new_edits=!1,c((function(t){var i=t?null:{ok:!0,id:e._id,rev:e._rev};n(t,i)}))):c(n)})),Ze.prototype.putAttachment=C("putAttachment",(function(e,t,n,i,r){var o=this;function s(e){var n="_rev"in e?parseInt(e._rev,10):0;return e._attachments=e._attachments||{},e._attachments[t]={content_type:r,data:i,revpos:++n},o.put(e)}return"function"==typeof r&&(r=i,i=n,n=null),void 0===r&&(r=i,i=n,n=null),r||P("warn","Attachment",t,"on document",e,"is missing content_type"),o.get(e).then((function(e){if(e._rev!==n)throw ne(V);return s(e)}),(function(t){if(t.reason===H.message)return s({_id:e});throw t}))})),Ze.prototype.removeAttachment=C("removeAttachment",(function(e,t,n,i){var r=this;r.get(e,(function(e,o){if(e)i(e);else if(o._rev===n){if(!o._attachments)return i();delete o._attachments[t],0===Object.keys(o._attachments).length&&delete o._attachments,r.put(o,i)}else i(ne(V))}))})),Ze.prototype.remove=C("remove",(function(e,t,n,i){var r;"string"==typeof t?(r={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(r=e,"function"==typeof t?(i=t,n={}):(i=n,n=t)),(n=n||{}).was_delete=!0;var o={_id:r._id,_rev:r._rev||n.rev,_deleted:!0};if(ze(o._id)&&"function"==typeof this._removeLocal)return this._removeLocal(r,i);this.bulkDocs({docs:[o]},n,Ye(i,o._id))})),Ze.prototype.revsDiff=C("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={});var i=Object.keys(e);if(!i.length)return n(null,{});var o=0,s=new r;function a(e,t){s.has(e)||s.set(e,{missing:[]}),s.get(e).missing.push(t)}i.map((function(t){this._getRevisionTree(t,(function(r,c){if(r&&404===r.status&&"missing"===r.message)s.set(t,{missing:e[t]});else{if(r)return n(r);!function(t,n){var i=e[t].slice(0);Ie(n,(function(e,n,r,o,s){var c=n+"-"+r,l=i.indexOf(c);-1!==l&&(i.splice(l,1),"available"!==s.status&&a(t,c))})),i.forEach((function(e){a(t,e)}))}(t,c)}if(++o===i.length){var l={};return s.forEach((function(e,t){l[t]=e})),n(null,l)}}))}),this)})),Ze.prototype.bulkGet=C("bulkGet",(function(e,t){I(this,e,t)})),Ze.prototype.compactDocument=C("compactDocument",(function(e,t,n){var i=this;this._getRevisionTree(e,(function(r,o){if(r)return n(r);var s=function(e){var t={},n=[];return Ie(e,(function(e,i,r,o){var s=i+"-"+r;return e&&(t[s]=0),void 0!==o&&n.push({from:o,to:s}),s})),n.reverse(),n.forEach((function(e){void 0===t[e.from]?t[e.from]=1+t[e.to]:t[e.from]=Math.min(t[e.from],1+t[e.to])})),t}(o),a=[],c=[];Object.keys(s).forEach((function(e){s[e]>t&&a.push(e)})),Ie(o,(function(e,t,n,i,r){var o=t+"-"+n;"available"===r.status&&-1!==a.indexOf(o)&&c.push(o)})),i._doCompaction(e,c,n)}))})),Ze.prototype.compact=C("compact",(function(e,t){"function"==typeof e&&(t=e,e={});e=e||{},this._compactionQueue=this._compactionQueue||[],this._compactionQueue.push({opts:e,callback:t}),1===this._compactionQueue.length&&function e(t){var n=t._compactionQueue[0],i=n.opts,r=n.callback;t.get("_local/compaction").catch((function(){return!1})).then((function(n){n&&n.last_seq&&(i.last_seq=n.last_seq),t._compact(i,(function(n,i){n?r(n):r(null,i),s()((function(){t._compactionQueue.shift(),t._compactionQueue.length&&e(t)}))}))}))}(this)})),Ze.prototype._compact=function(e,t){var n=this,i={return_docs:!1,last_seq:e.last_seq||0},r=[];n.changes(i).on("change",(function(e){r.push(n.compactDocument(e.id,0))})).on("complete",(function(e){var i=e.last_seq;Promise.all(r).then((function(){return he(n,"_local/compaction",(function(e){return(!e.last_seq||e.last_seq<i)&&(e.last_seq=i,e)}))})).then((function(){t(null,{ok:!0})})).catch(t)})).on("error",t)},Ze.prototype.get=C("get",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"string"!=typeof e)return n(ne(U));if(ze(e)&&"function"==typeof this._getLocal)return this._getLocal(e,n);var i=[],r=this;function o(){var o=[],s=i.length;if(!s)return n(null,o);i.forEach((function(i){r.get(e,{rev:i,revs:t.revs,latest:t.latest,attachments:t.attachments,binary:t.binary},(function(e,t){if(e)o.push({missing:i});else{for(var r,a=0,c=o.length;a<c;a++)if(o[a].ok&&o[a].ok._rev===t._rev){r=!0;break}r||o.push({ok:t})}--s||n(null,o)}))}))}if(!t.open_revs)return this._get(e,t,(function(i,o){if(i)return i.docId=e,n(i);var s=o.doc,a=o.metadata,c=o.ctx;if(t.conflicts){var l=Pe(a);l.length&&(s._conflicts=l)}if(We(a,s._rev)&&(s._deleted=!0),t.revs||t.revs_info){for(var d=s._rev.split("-"),u=parseInt(d[0],10),f=d[1],p=je(a.rev_tree),m=null,h=0;h<p.length;h++){var g=p[h],v=g.ids.map((function(e){return e.id})).indexOf(f);(v===u-1||!m&&-1!==v)&&(m=g)}if(!m)return(i=new Error("invalid rev tree")).docId=e,n(i);var y=m.ids.map((function(e){return e.id})).indexOf(s._rev.split("-")[1])+1,b=m.ids.length-y;if(m.ids.splice(y,b),m.ids.reverse(),t.revs&&(s._revisions={start:m.pos+m.ids.length-1,ids:m.ids.map((function(e){return e.id}))}),t.revs_info){var _=m.pos+m.ids.length;s._revs_info=m.ids.map((function(e){return{rev:--_+"-"+e.id,status:e.opts.status}}))}}if(t.attachments&&s._attachments){var w=s._attachments,E=Object.keys(w).length;if(0===E)return n(null,s);Object.keys(w).forEach((function(e){this._getAttachment(s._id,e,w[e],{rev:s._rev,binary:t.binary,ctx:c},(function(t,i){var r=s._attachments[e];r.data=i,delete r.stub,delete r.length,--E||n(null,s)}))}),r)}else{if(s._attachments)for(var S in s._attachments)Object.prototype.hasOwnProperty.call(s._attachments,S)&&(s._attachments[S].stub=!0);n(null,s)}}));if("all"===t.open_revs)this._getRevisionTree(e,(function(e,t){if(e)return n(e);i=Me(t).map((function(e){return e.rev})),o()}));else{if(!Array.isArray(t.open_revs))return n(ne(z,"function_clause"));i=t.open_revs;for(var s=0;s<i.length;s++){var a=i[s];if("string"!=typeof a||!/^\d+-/.test(a))return n(ne(ee))}o()}})),Ze.prototype.getAttachment=C("getAttachment",(function(e,t,n,i){var r=this;n instanceof Function&&(i=n,n={}),this._get(e,n,(function(o,s){return o?i(o):s.doc._attachments&&s.doc._attachments[t]?(n.ctx=s.ctx,n.binary=!0,void r._getAttachment(e,t,s.doc._attachments[t],n,i)):i(ne(H))}))})),Ze.prototype.allDocs=C("allDocs",(function(e,t){if("function"==typeof e&&(t=e,e={}),e.skip=void 0!==e.skip?e.skip:0,e.start_key&&(e.startkey=e.start_key),e.end_key&&(e.endkey=e.end_key),"keys"in e){if(!Array.isArray(e.keys))return t(new TypeError("options.keys must be an array"));var n=["startkey","endkey","key"].filter((function(t){return t in e}))[0];if(n)return void t(ne(K,"Query parameter `"+n+"` is not compatible with multi-get"));if(!ae(this)&&(function(e){var t="limit"in e?e.keys.slice(e.skip,e.limit+e.skip):e.skip>0?e.keys.slice(e.skip):e.keys;e.keys=t,e.skip=0,delete e.limit,e.descending&&(t.reverse(),e.descending=!1)}(e),0===e.keys.length))return this._allDocs({limit:0},t)}return this._allDocs(e,t)})),Ze.prototype.changes=function(e,t){return"function"==typeof e&&(t=e,e={}),(e=e||{}).return_docs="return_docs"in e?e.return_docs:!e.live,new Je(this,e,t)},Ze.prototype.close=C("close",(function(e){return this._closed=!0,this.emit("closed"),this._close(e)})),Ze.prototype.info=C("info",(function(e){var t=this;this._info((function(n,i){if(n)return e(n);i.db_name=i.db_name||t.name,i.auto_compaction=!(!t.auto_compaction||ae(t)),i.adapter=t.adapter,e(null,i)}))})),Ze.prototype.id=C("id",(function(e){return this._id(e)})),Ze.prototype.type=function(){return"function"==typeof this._type?this._type():this.adapter},Ze.prototype.bulkDocs=C("bulkDocs",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),t=t||{},Array.isArray(e)&&(e={docs:e}),!e||!e.docs||!Array.isArray(e.docs))return n(ne($));for(var i=0;i<e.docs.length;++i)if("object"!=typeof e.docs[i]||Array.isArray(e.docs[i]))return n(ne(Q));var r;if(e.docs.forEach((function(e){e._attachments&&Object.keys(e._attachments).forEach((function(t){r=r||function(e){return"_"===e.charAt(0)&&e+" is not a valid attachment name, attachment names cannot start with '_'"}(t),e._attachments[t].content_type||P("warn","Attachment",t,"on document",e._id,"is missing content_type")}))})),r)return n(ne(Y,r));"new_edits"in t||(t.new_edits=!("new_edits"in e)||e.new_edits);var o=this;t.new_edits||ae(o)||e.docs.sort(Qe),function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n._deleted)delete n._attachments;else if(n._attachments)for(var i=Object.keys(n._attachments),r=0;r<i.length;r++){var o=i[r];n._attachments[o]=T(n._attachments[o],["data","digest","content_type","length","revpos","stub"])}}}(e.docs);var s=e.docs.map((function(e){return e._id}));return this._bulkDocs(e,t,(function(e,i){if(e)return n(e);if(t.new_edits||(i=i.filter((function(e){return e.error}))),!ae(o))for(var r=0,a=i.length;r<a;r++)i[r].id=i[r].id||s[r];n(null,i)}))})),Ze.prototype.registerDependentDatabase=C("registerDependentDatabase",(function(e,t){var n=L(this.__opts);this.__opts.view_adapter&&(n.adapter=this.__opts.view_adapter);var i=new this.constructor(e,n);he(this,"_local/_pouch_dependentDbs",(function(t){return t.dependentDbs=t.dependentDbs||{},!t.dependentDbs[e]&&(t.dependentDbs[e]=!0,t)})).then((function(){t(null,{db:i})})).catch(t)})),Ze.prototype.destroy=C("destroy",(function(e,t){"function"==typeof e&&(t=e,e={});var n=this,i=!("use_prefix"in n)||n.use_prefix;function r(){n._destroy(e,(function(e,i){if(e)return t(e);n._destroyed=!0,n.emit("destroyed"),t(null,i||{ok:!0})}))}if(ae(n))return r();n.get("_local/_pouch_dependentDbs",(function(e,o){if(e)return 404!==e.status?t(e):r();var s=o.dependentDbs,a=n.constructor,c=Object.keys(s).map((function(e){var t=i?e.replace(new RegExp("^"+a.prefix),""):e;return new a(t,n.__opts).destroy()}));Promise.all(c).then(r,t)}))})),et.prototype.execute=function(){var e;if(this.failed)for(;e=this.queue.shift();)e(this.failed);else for(;e=this.queue.shift();)e()},et.prototype.fail=function(e){this.failed=e,this.execute()},et.prototype.ready=function(e){this.isReady=!0,this.db=e,this.execute()},et.prototype.addTask=function(e){this.queue.push(e),this.failed&&this.execute()},h()(tt,Ze);var nt="undefined"!=typeof AbortController?AbortController:function(){return{abort:function(){}}},it=fetch,rt=Headers;tt.adapters={},tt.preferredAdapters=[],tt.prefix="_pouch_";var ot=new v.a;!function(e){Object.keys(v.a.prototype).forEach((function(t){"function"==typeof v.a.prototype[t]&&(e[t]=ot[t].bind(ot))}));var t=e._destructionListeners=new r;e.on("ref",(function(e){t.has(e.name)||t.set(e.name,[]),t.get(e.name).push(e)})),e.on("unref",(function(e){if(t.has(e.name)){var n=t.get(e.name),i=n.indexOf(e);i<0||(n.splice(i,1),n.length>1?t.set(e.name,n):t.delete(e.name))}})),e.on("destroyed",(function(e){if(t.has(e)){var n=t.get(e);t.delete(e),n.forEach((function(e){e.emit("destroyed",!0)}))}}))}(tt),tt.adapter=function(e,t,n){t.valid()&&(tt.adapters[e]=t,n&&tt.preferredAdapters.push(e))},tt.plugin=function(e){if("function"==typeof e)e(tt);else{if("object"!=typeof e||0===Object.keys(e).length)throw new Error('Invalid plugin: got "'+e+'", expected an object or a function');Object.keys(e).forEach((function(t){tt.prototype[t]=e[t]}))}return this.__defaults&&(tt.__defaults=D({},this.__defaults)),tt},tt.defaults=function(e){function t(e,n){if(!(this instanceof t))return new t(e,n);n=n||{},e&&"object"==typeof e&&(e=(n=e).name,delete n.name),n=D({},t.__defaults,n),tt.call(this,e,n)}return h()(t,tt),t.preferredAdapters=tt.preferredAdapters.slice(),Object.keys(tt).forEach((function(e){e in t||(t[e]=tt[e])})),t.__defaults=D({},this.__defaults,e),t},tt.fetch=function(e,t){return it(e,t)};function st(e,t){for(var n=e,i=0,r=t.length;i<r;i++){if(!(n=n[t[i]]))break}return n}function at(e){for(var t=[],n="",i=0,r=e.length;i<r;i++){var o=e[i];i>0&&"\\"===e[i-1]&&("$"===o||"."===o)?n=n.substring(0,n.length-1)+o:"."===o?(t.push(n),n=""):n+=o}return t.push(n),t}var ct=["$or","$nor","$not"];function lt(e){return ct.indexOf(e)>-1}function dt(e){return Object.keys(e)[0]}function ut(e){var t={},n={$or:!0,$nor:!0};return e.forEach((function(e){Object.keys(e).forEach((function(i){var r=e[i];if("object"!=typeof r&&(r={$eq:r}),lt(i))if(r instanceof Array){if(n[i])return n[i]=!1,void(t[i]=r);var o=[];t[i].forEach((function(e){Object.keys(r).forEach((function(t){var n=r[t],i=Math.max(Object.keys(e).length,Object.keys(n).length),s=ut([e,n]);Object.keys(s).length<=i||o.push(s)}))})),t[i]=o}else t[i]=ut([r]);else{var s=t[i]=t[i]||{};Object.keys(r).forEach((function(e){var t=r[e];return"$gt"===e||"$gte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$gte?"$gte"===e?t>n.$gte&&(n.$gte=t):t>=n.$gte&&(delete n.$gte,n.$gt=t):void 0!==n.$gt?"$gte"===e?t>n.$gt&&(delete n.$gt,n.$gte=t):t>n.$gt&&(n.$gt=t):n[e]=t}(e,t,s):"$lt"===e||"$lte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$lte?"$lte"===e?t<n.$lte&&(n.$lte=t):t<=n.$lte&&(delete n.$lte,n.$lt=t):void 0!==n.$lt?"$lte"===e?t<n.$lt&&(delete n.$lt,n.$lte=t):t<n.$lt&&(n.$lt=t):n[e]=t}(e,t,s):"$ne"===e?function(e,t){"$ne"in t?t.$ne.push(e):t.$ne=[e]}(t,s):"$eq"===e?function(e,t){delete t.$gt,delete t.$gte,delete t.$lt,delete t.$lte,delete t.$ne,t.$eq=e}(t,s):"$regex"===e?function(e,t){"$regex"in t?t.$regex.push(e):t.$regex=[e]}(t,s):void(s[e]=t)}))}}))})),t}function ft(e){var t=L(e),n=!1;(function e(t,n){for(var i in t){"$and"===i&&(n=!0);var r=t[i];"object"==typeof r&&(n=e(r,n))}return n})(t,!1)&&("$and"in(t=function e(t){for(var n in t){if(Array.isArray(t))for(var i in t)t[i].$and&&(t[i]=ut(t[i].$and));var r=t[n];"object"==typeof r&&e(r)}return t}(t))&&(t=ut(t.$and)),n=!0),["$or","$nor"].forEach((function(e){e in t&&t[e].forEach((function(e){for(var t=Object.keys(e),n=0;n<t.length;n++){var i=t[n],r=e[i];"object"==typeof r&&null!==r||(e[i]={$eq:r})}}))})),"$not"in t&&(t.$not=ut([t.$not]));for(var i=Object.keys(t),r=0;r<i.length;r++){var o=i[r],s=t[o];"object"!=typeof s||null===s?s={$eq:s}:n||("$ne"in s&&(s.$ne=[s.$ne]),"$regex"in s&&(s.$regex=[s.$regex])),t[o]=s}return t}function pt(e,t){if(e===t)return 0;e=mt(e),t=mt(t);var n=bt(e),i=bt(t);if(n-i!=0)return n-i;switch(typeof e){case"number":return e-t;case"boolean":return e<t?-1:1;case"string":return function(e,t){return e===t?0:e>t?1:-1}(e,t)}return Array.isArray(e)?function(e,t){for(var n=Math.min(e.length,t.length),i=0;i<n;i++){var r=pt(e[i],t[i]);if(0!==r)return r}return e.length===t.length?0:e.length>t.length?1:-1}(e,t):function(e,t){for(var n=Object.keys(e),i=Object.keys(t),r=Math.min(n.length,i.length),o=0;o<r;o++){var s=pt(n[o],i[o]);if(0!==s)return s;if(0!==(s=pt(e[n[o]],t[i[o]])))return s}return n.length===i.length?0:n.length>i.length?1:-1}(e,t)}function mt(e){switch(typeof e){case"undefined":return null;case"number":return e===1/0||e===-1/0||isNaN(e)?null:e;case"object":var t=e;if(Array.isArray(e)){var n=e.length;e=new Array(n);for(var i=0;i<n;i++)e[i]=mt(t[i])}else{if(e instanceof Date)return e.toJSON();if(null!==e)for(var r in e={},t)if(Object.prototype.hasOwnProperty.call(t,r)){var o=t[r];void 0!==o&&(e[r]=mt(o))}}}return e}function ht(e){if(null!==e)switch(typeof e){case"boolean":return e?1:0;case"number":return function(e){if(0===e)return"1";var t=e.toExponential().split(/e\+?/),n=parseInt(t[1],10),i=e<0,r=i?"0":"2",o=(s=((i?-n:n)- -324).toString(),a="0",c=3,function(e,t,n){for(var i="",r=n-e.length;i.length<r;)i+=t;return i}(s,a,c)+s);var s,a,c;r+=""+o;var l=Math.abs(parseFloat(t[0]));i&&(l=10-l);var d=l.toFixed(20);return d=d.replace(/\.?0+$/,""),r+=""+d}(e);case"string":return e.replace(/\u0002/g,"").replace(/\u0001/g,"").replace(/\u0000/g,"");case"object":var t=Array.isArray(e),n=t?e:Object.keys(e),i=-1,r=n.length,o="";if(t)for(;++i<r;)o+=gt(n[i]);else for(;++i<r;){var s=n[i];o+=gt(s)+gt(e[s])}return o}return""}function gt(e){return bt(e=mt(e))+""+ht(e)+"\0"}function vt(e,t){var n,i=t;if("1"===e[t])n=0,t++;else{var r="0"===e[t];t++;var o="",s=e.substring(t,t+3),a=parseInt(s,10)+-324;for(r&&(a=-a),t+=3;;){var c=e[t];if("\0"===c)break;o+=c,t++}n=1===(o=o.split(".")).length?parseInt(o,10):parseFloat(o[0]+"."+o[1]),r&&(n-=10),0!==a&&(n=parseFloat(n+"e"+a))}return{num:n,length:t-i}}function yt(e,t){var n=e.pop();if(t.length){var i=t[t.length-1];n===i.element&&(t.pop(),i=t[t.length-1]);var r=i.element,o=i.index;if(Array.isArray(r))r.push(n);else if(o===e.length-2){r[e.pop()]=n}else e.push(n)}}function bt(e){var t=["boolean","number","string","object"].indexOf(typeof e);return~t?null===e?1:Array.isArray(e)?5:t<3?t+2:t+3:Array.isArray(e)?5:void 0}function _t(e,t,n){if(e=e.filter((function(e){return wt(e.doc,t.selector,n)})),t.sort){var i=function(e){function t(t){return e.map((function(e){var n=at(dt(e));return st(t,n)}))}return function(e,n){var i,r,o=pt(t(e.doc),t(n.doc));return 0!==o?o:(i=e.doc._id,r=n.doc._id,i<r?-1:i>r?1:0)}}(t.sort);e=e.sort(i),"string"!=typeof t.sort[0]&&"desc"===(r=t.sort[0])[dt(r)]&&(e=e.reverse())}var r;if("limit"in t||"skip"in t){var o=t.skip||0,s=("limit"in t?t.limit:e.length)+o;e=e.slice(o,s)}return e}function wt(e,t,n){return n.every((function(n){var i=t[n],r=at(n),o=st(e,r);return lt(n)?function(e,t,n){if("$or"===e)return t.some((function(e){return wt(n,e,Object.keys(e))}));if("$not"===e)return!wt(n,t,Object.keys(t));return!t.find((function(e){return wt(n,e,Object.keys(e))}))}(n,i,e):Et(i,e,r,o)}))}function Et(e,t,n,i){return!e||("object"==typeof e?Object.keys(e).every((function(r){var o=e[r];if(0===r.indexOf("$"))return St(r,t,o,n,i);var s=at(r);if(void 0===i&&"object"!=typeof o&&s.length>0)return!1;var a=st(i,s);return"object"==typeof o?Et(o,t,n,a):St("$eq",t,o,s,a)})):e===i)}function St(e,t,n,i,r){if(!xt[e])throw new Error('unknown operator "'+e+'" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');return xt[e](t,n,i,r)}function kt(e){return null!=e}function Lt(e){return void 0!==e}function At(e,t){return t.some((function(t){return e instanceof Array?e.some((function(e){return 0===pt(t,e)})):0===pt(t,e)}))}var xt={$elemMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]?i.some((function(e){return wt(e,t,Object.keys(t))})):i.some((function(i){return Et(t,e,n,i)}))))},$allMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]?i.every((function(e){return wt(e,t,Object.keys(t))})):i.every((function(i){return Et(t,e,n,i)}))))},$eq:function(e,t,n,i){return Lt(i)&&0===pt(i,t)},$gte:function(e,t,n,i){return Lt(i)&&pt(i,t)>=0},$gt:function(e,t,n,i){return Lt(i)&&pt(i,t)>0},$lte:function(e,t,n,i){return Lt(i)&&pt(i,t)<=0},$lt:function(e,t,n,i){return Lt(i)&&pt(i,t)<0},$exists:function(e,t,n,i){return t?Lt(i):!Lt(i)},$mod:function(e,t,n,i){return kt(i)&&function(e,t){return"number"==typeof e&&parseInt(e,10)===e&&e%t[0]===t[1]}(i,t)},$ne:function(e,t,n,i){return t.every((function(e){return 0!==pt(i,e)}))},$in:function(e,t,n,i){return kt(i)&&At(i,t)},$nin:function(e,t,n,i){return kt(i)&&!At(i,t)},$size:function(e,t,n,i){return kt(i)&&Array.isArray(i)&&function(e,t){return e.length===t}(i,t)},$all:function(e,t,n,i){return Array.isArray(i)&&function(e,t){return t.every((function(t){return e.some((function(e){return 0===pt(t,e)}))}))}(i,t)},$regex:function(e,t,n,i){return kt(i)&&"string"==typeof i&&t.every((function(e){return function(e,t){return new RegExp(t).test(e)}(i,e)}))},$type:function(e,t,n,i){return function(e,t){switch(t){case"null":return null===e;case"boolean":return"boolean"==typeof e;case"number":return"number"==typeof e;case"string":return"string"==typeof e;case"array":return e instanceof Array;case"object":return"[object Object]"==={}.toString.call(e)}}(i,t)}};function Ct(e,t){if(e.selector&&e.filter&&"_selector"!==e.filter){var n="string"==typeof e.filter?e.filter:"function";return t(new Error('selector invalid for filter "'+n+'"'))}t()}function Tt(e){e.view&&!e.filter&&(e.filter="_view"),e.selector&&!e.filter&&(e.filter="_selector"),e.filter&&"string"==typeof e.filter&&("_view"===e.filter?e.view=le(e.view):e.filter=le(e.filter))}function Nt(e,t){return t.filter&&"string"==typeof t.filter&&!t.doc_ids&&!ae(e.db)}function qt(e,t){var n=t.complete;if("_view"===t.filter){if(!t.view||"string"!=typeof t.view){var i=ne(Y,"`view` filter parameter not found or invalid.");return n(i)}var r=ce(t.view);e.db.get("_design/"+r[0],(function(i,o){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(ie(i));var s=o&&o.views&&o.views[r[1]]&&o.views[r[1]].map;if(!s)return n(ne(H,o.views?"missing json key: "+r[1]:"missing json key: views"));t.filter=me(["return function(doc) {",'  "use strict";',"  var emitted = false;","  var emit = function (a, b) {","    emitted = true;","  };","  var view = "+s+";","  view(doc);","  if (emitted) {","    return true;","  }","};"].join("\n"),{}),e.doChanges(t)}))}else if(t.selector)t.filter=function(e){return function(e,t){if("object"!=typeof t)throw new Error("Selector error: expected a JSON object");var n=_t([{doc:e}],{selector:t=ft(t)},Object.keys(t));return n&&1===n.length}(e,t.selector)},e.doChanges(t);else{var o=ce(t.filter);e.db.get("_design/"+o[0],(function(i,r){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(ie(i));var s=r&&r.filters&&r.filters[o[1]];if(!s)return n(ne(H,r&&r.filters?"missing json key: "+o[1]:"missing json key: filters"));t.filter=me('"use strict";\nreturn '+s+";",{}),e.doChanges(t)}))}}function Ot(e){return e.reduce((function(e,t){return e[t]=!0,e}),{})}tt.plugin((function(e){e._changesFilterPlugin={validate:Ct,normalize:Tt,shouldFilter:Nt,filter:qt}})),tt.version="7.3.0";var It=Ot(["_id","_rev","_access","_attachments","_deleted","_revisions","_revs_info","_conflicts","_deleted_conflicts","_local_seq","_rev_tree","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats","_removed"]),Bt=Ot(["_access","_attachments","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats"]);function Mt(e){if(!/^\d+-/.test(e))return ne(ee);var t=e.indexOf("-"),n=e.substring(0,t),i=e.substring(t+1);return{prefix:parseInt(n,10),id:i}}function Pt(e,t,n){var i,r,o;n||(n={deterministic_revs:!0});var s={status:"available"};if(e._deleted&&(s.deleted=!0),t)if(e._id||(e._id=qe()),r=Ne(e,n.deterministic_revs),e._rev){if((o=Mt(e._rev)).error)return o;e._rev_tree=[{pos:o.prefix,ids:[o.id,{status:"missing"},[[r,s,[]]]]}],i=o.prefix+1}else e._rev_tree=[{pos:1,ids:[r,s,[]]}],i=1;else if(e._revisions&&(e._rev_tree=function(e,t){for(var n=e.start-e.ids.length+1,i=e.ids,r=[i[0],t,[]],o=1,s=i.length;o<s;o++)r=[i[o],{status:"missing"},[r]];return[{pos:n,ids:r}]}(e._revisions,s),i=e._revisions.start,r=e._revisions.ids[0]),!e._rev_tree){if((o=Mt(e._rev)).error)return o;i=o.prefix,r=o.id,e._rev_tree=[{pos:i,ids:[r,s,[]]}]}se(e._id),e._rev=i+"-"+r;var a={metadata:{},data:{}};for(var c in e)if(Object.prototype.hasOwnProperty.call(e,c)){var l="_"===c[0];if(l&&!It[c]){var d=ne(X,c);throw d.message=X.message+": "+c,d}l&&!Bt[c]?a.metadata[c.slice(1)]=e[c]:a.data[c]=e[c]}return a}function jt(e,t,n){var i=function(e){try{return ge(e)}catch(e){return{error:ne(J,"Attachment is not a valid base64 string")}}}(e.data);if(i.error)return n(i.error);e.length=i.length,e.data="blob"===t?_e(i,e.content_type):"base64"===t?ve(i):i,Ce(i,(function(t){e.digest="md5-"+t,n()}))}function Ft(e,t,n){if(e.stub)return n();"string"==typeof e.data?jt(e,t,n):function(e,t,n){Ce(e.data,(function(i){e.digest="md5-"+i,e.length=e.data.size||e.data.length||0,"binary"===t?Se(e.data,(function(t){e.data=t,n()})):"base64"===t?ke(e.data,(function(t){e.data=t,n()})):n()}))}(e,t,n)}function Dt(e,t,n,i,r,o,s,a){if(function(e,t){for(var n,i=e.slice(),r=t.split("-"),o=parseInt(r[0],10),s=r[1];n=i.pop();){if(n.pos===o&&n.ids[0]===s)return!0;for(var a=n.ids[2],c=0,l=a.length;c<l;c++)i.push({pos:n.pos+1,ids:a[c]})}return!1}(t.rev_tree,n.metadata.rev)&&!a)return i[r]=n,o();var c=t.winningRev||Oe(t),l="deleted"in t?t.deleted:We(t,c),d="deleted"in n.metadata?n.metadata.deleted:We(n.metadata),u=/^1-/.test(n.metadata.rev);if(l&&!d&&a&&u){var f=n.data;f._rev=c,f._id=n.metadata.id,n=Pt(f,a)}var p=Ue(t.rev_tree,n.metadata.rev_tree[0],e);if(a&&(l&&d&&"new_leaf"!==p.conflicts||!l&&"new_leaf"!==p.conflicts||l&&!d&&"new_branch"===p.conflicts)){var m=ne(V);return i[r]=m,o()}var h=n.metadata.rev;n.metadata.rev_tree=p.tree,n.stemmedRevs=p.stemmedRevs||[],t.rev_map&&(n.metadata.rev_map=t.rev_map);var g=Oe(n.metadata),v=We(n.metadata,g),y=l===v?0:l<v?-1:1;s(n,g,v,h===g?v:We(n.metadata,h),!0,y,r,o)}function Rt(e,t,n,i,o,s,a,c,l){e=e||1e3;var d=c.new_edits,u=new r,f=0,p=t.length;function m(){++f===p&&l&&l()}t.forEach((function(e,t){if(e._id&&ze(e._id)){var i=e._deleted?"_removeLocal":"_putLocal";n[i](e,{ctx:o},(function(e,n){s[t]=e||n,m()}))}else{var r=e.metadata.id;u.has(r)?(p--,u.get(r).push([e,t])):u.set(r,[[e,t]])}})),u.forEach((function(t,n){var r=0;function o(){++r<t.length?l():m()}function l(){var l=t[r],u=l[0],f=l[1];if(i.has(n))Dt(e,i.get(n),u,s,f,o,a,d);else{var p=Ue([],u.metadata.rev_tree[0],e);u.metadata.rev_tree=p.tree,u.stemmedRevs=p.stemmedRevs||[],function(e,t,n){var i=Oe(e.metadata),r=We(e.metadata,i);if("was_delete"in c&&r)return s[t]=ne(H,"deleted"),n();if(d&&function(e){return"missing"===e.metadata.rev_tree[0].ids[1].status}(e)){var o=ne(V);return s[t]=o,n()}a(e,i,r,r,!1,r?0:1,t,n)}(u,f,o)}}l()}))}var $t="document-store",Ht="meta-store";function Vt(e){try{return JSON.stringify(e)}catch(t){return u.a.stringify(e)}}function Ut(e){return function(t){var n="unknown_error";t.target&&t.target.error&&(n=t.target.error.name||t.target.error.message),e(ne(Z,n,t.type))}}function Gt(e,t,n){return{data:Vt(e),winningRev:t,deletedOrLocal:n?"1":"0",seq:e.seq,id:e.id}}function Wt(e){if(!e)return null;var t=function(e){try{return JSON.parse(e)}catch(t){return u.a.parse(e)}}(e.data);return t.winningRev=e.winningRev,t.deleted="1"===e.deletedOrLocal,t.seq=e.seq,t}function zt(e){if(!e)return e;var t=e._doc_id_rev.lastIndexOf(":");return e._id=e._doc_id_rev.substring(0,t-1),e._rev=e._doc_id_rev.substring(t+1),delete e._doc_id_rev,e}function Jt(e,t,n,i){n?i(e?"string"!=typeof e?e:we(e,t):ye([""],{type:t})):e?"string"!=typeof e?Ee(e,(function(e){i(ve(e))})):i(e):i("")}function Kt(e,t,n,i){var r=Object.keys(e._attachments||{});if(!r.length)return i&&i();var o=0;function s(){++o===r.length&&i&&i()}r.forEach((function(i){t.attachments&&t.include_docs?function(e,t){var i=e._attachments[t],r=i.digest;n.objectStore("attach-store").get(r).onsuccess=function(e){i.body=e.target.result.body,s()}}(e,i):(e._attachments[i].stub=!0,s())}))}function Xt(e,t){return Promise.all(e.map((function(e){if(e.doc&&e.doc._attachments){var n=Object.keys(e.doc._attachments);return Promise.all(n.map((function(n){var i=e.doc._attachments[n];if("body"in i){var r=i.body,o=i.content_type;return new Promise((function(s){Jt(r,o,t,(function(t){e.doc._attachments[n]=D(T(i,["digest","content_type"]),{data:t}),s()}))}))}})))}})))}function Yt(e,t,n){var i=[],r=n.objectStore("by-sequence"),o=n.objectStore("attach-store"),s=n.objectStore("attach-seq-store"),a=e.length;function c(){--a||function(){if(!i.length)return;i.forEach((function(e){s.index("digestSeq").count(IDBKeyRange.bound(e+"::",e+"::￿",!1,!1)).onsuccess=function(t){t.target.result||o.delete(e)}}))}()}e.forEach((function(e){var n=r.index("_doc_id_rev"),o=t+"::"+e;n.getKey(o).onsuccess=function(e){var t=e.target.result;if("number"!=typeof t)return c();r.delete(t),s.index("seq").openCursor(IDBKeyRange.only(t)).onsuccess=function(e){var t=e.target.result;if(t){var n=t.value.digestSeq.split("::")[0];i.push(n),s.delete(t.primaryKey),t.continue()}else c()}}}))}function Qt(e,t,n){try{return{txn:e.transaction(t,n)}}catch(e){return{error:e}}}var Zt=new M;function en(e,t,n,i,o,s){for(var a,c,l,d,u,f,p,m,h=t.docs,g=0,v=h.length;g<v;g++){var y=h[g];y._id&&ze(y._id)||(y=h[g]=Pt(y,n.new_edits,e)).error&&!p&&(p=y)}if(p)return s(p);var b=!1,_=0,w=new Array(h.length),E=new r,S=!1,k=i._meta.blobSupport?"blob":"base64";function L(){b=!0,A()}function A(){m&&b&&(m.docCount+=_,f.put(m))}function x(){S||(Zt.notify(i._meta.name),s(null,w))}function C(e,t,n,i,r,o,s,a){e.metadata.winningRev=t,e.metadata.deleted=n;var c=e.data;if(c._id=e.metadata.id,c._rev=e.metadata.rev,i&&(c._deleted=!0),c._attachments&&Object.keys(c._attachments).length)return function(e,t,n,i,r,o){var s=e.data,a=0,c=Object.keys(s._attachments);function l(){a===c.length&&T(e,t,n,i,r,o)}function u(){a++,l()}c.forEach((function(n){var i=e.data._attachments[n];if(i.stub)a++,l();else{var r=i.data;delete i.data,i.revpos=parseInt(t,10),function(e,t,n){d.count(e).onsuccess=function(i){if(i.target.result)return n();var r={digest:e,body:t};d.put(r).onsuccess=n}}(i.digest,r,u)}}))}(e,t,n,r,s,a);_+=o,A(),T(e,t,n,r,s,a)}function T(e,t,n,r,o,s){var d=e.data,f=e.metadata;function p(o){var s=e.stemmedRevs||[];r&&i.auto_compaction&&(s=s.concat(function(e){var t=[];return Ie(e.rev_tree,(function(e,n,i,r,o){"available"!==o.status||e||(t.push(n+"-"+i),o.status="missing")})),t}(e.metadata))),s&&s.length&&Yt(s,e.metadata.id,a),f.seq=o.target.result;var l=Gt(f,t,n);c.put(l).onsuccess=m}function m(){w[o]={ok:!0,id:f.id,rev:f.rev},E.set(e.metadata.id,e.metadata),function(e,t,n){var i=0,r=Object.keys(e.data._attachments||{});if(!r.length)return n();function o(){++i===r.length&&n()}function s(n){var i=e.data._attachments[n].digest,r=u.put({seq:t,digestSeq:i+"::"+t});r.onsuccess=o,r.onerror=function(e){e.preventDefault(),e.stopPropagation(),o()}}for(var a=0;a<r.length;a++)s(r[a])}(e,f.seq,s)}d._doc_id_rev=f.id+"::"+f.rev,delete d._id,delete d._rev;var h=l.put(d);h.onsuccess=p,h.onerror=function(e){e.preventDefault(),e.stopPropagation(),l.index("_doc_id_rev").getKey(d._doc_id_rev).onsuccess=function(e){l.put(d,e.target.result).onsuccess=p}}}!function(e,t,n){if(!e.length)return n();var i,r=0;function o(){r++,e.length===r&&(i?n(i):n())}e.forEach((function(e){var n=e.data&&e.data._attachments?Object.keys(e.data._attachments):[],r=0;if(!n.length)return o();function s(e){i=e,++r===n.length&&o()}for(var a in e.data._attachments)Object.prototype.hasOwnProperty.call(e.data._attachments,a)&&Ft(e.data._attachments[a],t,s)}))}(h,k,(function(t){if(t)return s(t);!function(){var t=Qt(o,[$t,"by-sequence","attach-store","local-store","attach-seq-store",Ht],"readwrite");if(t.error)return s(t.error);(a=t.txn).onabort=Ut(s),a.ontimeout=Ut(s),a.oncomplete=x,c=a.objectStore($t),l=a.objectStore("by-sequence"),d=a.objectStore("attach-store"),u=a.objectStore("attach-seq-store"),(f=a.objectStore(Ht)).get(Ht).onsuccess=function(e){m=e.target.result,A()},function(e){var t=[];if(h.forEach((function(e){e.data&&e.data._attachments&&Object.keys(e.data._attachments).forEach((function(n){var i=e.data._attachments[n];i.stub&&t.push(i.digest)}))})),!t.length)return e();var n,i=0;t.forEach((function(r){!function(e,t){d.get(e).onsuccess=function(n){if(n.target.result)t();else{var i=ne(te,"unknown stub attachment with digest "+e);i.status=412,t(i)}}}(r,(function(r){r&&!n&&(n=r),++i===t.length&&e(n)}))}))}((function(t){if(t)return S=!0,s(t);!function(){if(!h.length)return;var t=0;function r(){++t===h.length&&Rt(e.revs_limit,h,i,E,a,w,C,n,L)}function o(e){var t=Wt(e.target.result);t&&E.set(t.id,t),r()}for(var s=0,l=h.length;s<l;s++){var d=h[s];if(d._id&&ze(d._id))r();else c.get(d.metadata.id).onsuccess=o}}()}))}()}))}function tn(e,t,n,i,r){var o,s,a;function c(e){s=e.target.result,o&&r(o,s,a)}function l(e){o=e.target.result,s&&r(o,s,a)}function d(e){var t=e.target.result;if(!t)return r();r([t.key],[t.value],t)}-1===i&&(i=1e3),"function"==typeof e.getAll&&"function"==typeof e.getAllKeys&&i>1&&!n?(a={continue:function(){if(!o.length)return r();var n,a=o[o.length-1];if(t&&t.upper)try{n=IDBKeyRange.bound(a,t.upper,!0,t.upperOpen)}catch(e){if("DataError"===e.name&&0===e.code)return r()}else n=IDBKeyRange.lowerBound(a,!0);t=n,o=null,s=null,e.getAll(t,i).onsuccess=c,e.getAllKeys(t,i).onsuccess=l}},e.getAll(t,i).onsuccess=c,e.getAllKeys(t,i).onsuccess=l):n?e.openCursor(t,"prev").onsuccess=d:e.openCursor(t).onsuccess=d}function nn(e,t,n){var i,r,o="startkey"in e&&e.startkey,s="endkey"in e&&e.endkey,a="key"in e&&e.key,c="keys"in e&&e.keys,l=e.skip||0,d="number"==typeof e.limit?e.limit:-1,u=!1!==e.inclusive_end;if(!c&&(r=(i=function(e,t,n,i,r){try{if(e&&t)return r?IDBKeyRange.bound(t,e,!n,!1):IDBKeyRange.bound(e,t,!1,!n);if(e)return r?IDBKeyRange.upperBound(e):IDBKeyRange.lowerBound(e);if(t)return r?IDBKeyRange.lowerBound(t,!n):IDBKeyRange.upperBound(t,!n);if(i)return IDBKeyRange.only(i)}catch(e){return{error:e}}return null}(o,s,u,a,e.descending))&&i.error)&&("DataError"!==r.name||0!==r.code))return n(ne(Z,r.name,r.message));var f=[$t,"by-sequence",Ht];e.attachments&&f.push("attach-store");var p=Qt(t,f,"readonly");if(p.error)return n(p.error);var m=p.txn;m.oncomplete=function(){e.attachments?Xt(E,e.binary).then(A):A()},m.onabort=Ut(n);var h,g,v,y=m.objectStore($t),b=m.objectStore("by-sequence"),_=m.objectStore(Ht),w=b.index("_doc_id_rev"),E=[];function S(t,n){var i={id:n.id,key:n.id,value:{rev:t}};n.deleted?c&&(E.push(i),i.value.deleted=!0,i.doc=null):l--<=0&&(E.push(i),e.include_docs&&function(t,n,i){var r=t.id+"::"+i;w.get(r).onsuccess=function(i){if(n.doc=zt(i.target.result)||{},e.conflicts){var r=Pe(t);r.length&&(n.doc._conflicts=r)}Kt(n.doc,e,m)}}(n,i,t))}function k(e){for(var t=0,n=e.length;t<n&&E.length!==d;t++){var i=e[t];if(i.error&&c)E.push(i);else{var r=Wt(i);S(r.winningRev,r)}}}function L(e,t,n){n&&(k(t),E.length<d&&n.continue())}function A(){var t={total_rows:h,offset:e.skip,rows:E};e.update_seq&&void 0!==g&&(t.update_seq=g),n(null,t)}return _.get(Ht).onsuccess=function(e){h=e.target.result.docCount},e.update_seq&&(v=function(e){e.target.result&&e.target.result.length>0&&(g=e.target.result[0])},b.openCursor(null,"prev").onsuccess=function(e){var t=e.target.result,n=void 0;return t&&t.key&&(n=t.key),v({target:{result:[n]}})}),r||0===d?void 0:c?function(e,t,n){var i=new Array(e.length),r=0;e.forEach((function(o,s){t.get(o).onsuccess=function(t){t.target.result?i[s]=t.target.result:i[s]={key:o,error:"not_found"},++r===e.length&&n(e,i,{})}}))}(e.keys,y,L):-1===d?function(e,t,n){if("function"!=typeof e.getAll){var i=[];e.openCursor(t).onsuccess=function(e){var t=e.target.result;t?(i.push(t.value),t.continue()):n({target:{result:i}})}}else e.getAll(t).onsuccess=n}(y,i,(function(t){var n=t.target.result;e.descending&&(n=n.reverse()),k(n)})):void tn(y,i,e.descending,d+l,L)}var rn=!1,on=[];function sn(){!rn&&on.length&&(rn=!0,on.shift()())}function an(e,t,n,o){if((e=L(e)).continuous){var s=n+":"+qe();return Zt.addListener(n,s,t,e),Zt.notify(n),{cancel:function(){Zt.removeListener(n,s)}}}var a=e.doc_ids&&new i(e.doc_ids);e.since=e.since||0;var c=e.since,l="limit"in e?e.limit:-1;0===l&&(l=1);var d,u,f,p,m=[],h=0,g=re(e),v=new r;function y(e,t,n,i){if(n.seq!==t)return i();if(n.winningRev===e._rev)return i(n,e);var r=e._id+"::"+n.winningRev;p.get(r).onsuccess=function(e){i(n,zt(e.target.result))}}function b(){e.complete(null,{results:m,last_seq:c})}var _=[$t,"by-sequence"];e.attachments&&_.push("attach-store");var w=Qt(o,_,"readonly");if(w.error)return e.complete(w.error);(d=w.txn).onabort=Ut(e.complete),d.oncomplete=function(){!e.continuous&&e.attachments?Xt(m).then(b):b()},u=d.objectStore("by-sequence"),f=d.objectStore($t),p=u.index("_doc_id_rev"),tn(u,e.since&&!e.descending?IDBKeyRange.lowerBound(e.since,!0):null,e.descending,l,(function(t,n,i){if(i&&t.length){var r=new Array(t.length),o=new Array(t.length),s=0;n.forEach((function(n,c){!function(e,t,n){if(a&&!a.has(e._id))return n();var i=v.get(e._id);if(i)return y(e,t,i,n);f.get(e._id).onsuccess=function(r){i=Wt(r.target.result),v.set(e._id,i),y(e,t,i,n)}}(zt(n),t[c],(function(n,a){o[c]=n,r[c]=a,++s===t.length&&function(){for(var t=[],n=0,s=r.length;n<s&&h!==l;n++){var a=r[n];if(a){var c=o[n];t.push(u(c,a))}}Promise.all(t).then((function(t){for(var n=0,i=t.length;n<i;n++)t[n]&&e.onChange(t[n])})).catch(e.complete),h!==l&&i.continue()}()}))}))}function u(t,n){var i=e.processChange(n,t,e);c=i.seq=t.seq;var r=g(i);return"object"==typeof r?Promise.reject(r):r?(h++,e.return_docs&&m.push(i),e.attachments&&e.include_docs?new Promise((function(t){Kt(n,e,d,(function(){Xt([i],e.binary).then((function(){t(i)}))}))})):Promise.resolve(i)):Promise.resolve()}}))}var cn,ln=new r,dn=new r;function un(e,t){var n=this;!function(e,t,n){on.push((function(){e((function(e,i){!function(e,t,n,i){try{e(t,n)}catch(t){i.emit("error",t)}}(t,e,i,n),rn=!1,s()((function(){sn()}))}))})),sn()}((function(t){!function(e,t,n){var i=t.name,r=null,o=null;function a(e){return function(t,n){t&&t instanceof Error&&!t.reason&&o&&(t.reason=o),e(t,n)}}function c(e,t){var n=e.objectStore($t);n.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var r=i.value,o=We(r);r.deletedOrLocal=o?"1":"0",n.put(r),i.continue()}else t()}}function l(e,t){var n=e.objectStore("local-store"),i=e.objectStore($t),r=e.objectStore("by-sequence");i.openCursor().onsuccess=function(e){var o=e.target.result;if(o){var s=o.value,a=s.id,c=ze(a),l=Oe(s);if(c){var d=a+"::"+l,u=a+"::",f=a+"::~",p=r.index("_doc_id_rev"),m=IDBKeyRange.bound(u,f,!1,!1),h=p.openCursor(m);h.onsuccess=function(e){if(h=e.target.result){var t=h.value;t._doc_id_rev===d&&n.put(t),r.delete(h.primaryKey),h.continue()}else i.delete(o.primaryKey),o.continue()}}else o.continue()}else t&&t()}}function d(e,t){var n=e.objectStore("by-sequence"),i=e.objectStore("attach-store"),r=e.objectStore("attach-seq-store");i.count().onsuccess=function(e){if(!e.target.result)return t();n.openCursor().onsuccess=function(e){var n=e.target.result;if(!n)return t();for(var i=n.value,o=n.primaryKey,s=Object.keys(i._attachments||{}),a={},c=0;c<s.length;c++){a[i._attachments[s[c]].digest]=!0}var l=Object.keys(a);for(c=0;c<l.length;c++){var d=l[c];r.put({seq:o,digestSeq:d+"::"+o})}n.continue()}}}function u(e){var t=e.objectStore("by-sequence"),n=e.objectStore($t);n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var r,o=(r=i.value).data?Wt(r):(r.deleted="1"===r.deletedOrLocal,r);if(o.winningRev=o.winningRev||Oe(o),o.seq)return s();!function(){var e=o.id+"::",n=o.id+"::￿",i=t.index("_doc_id_rev").openCursor(IDBKeyRange.bound(e,n)),r=0;i.onsuccess=function(e){var t=e.target.result;if(!t)return o.seq=r,s();var n=t.primaryKey;n>r&&(r=n),t.continue()}}()}function s(){var e=Gt(o,o.winningRev,o.deleted);n.put(e).onsuccess=function(){i.continue()}}}}e._meta=null,e._remote=!1,e.type=function(){return"idb"},e._id=x((function(t){t(null,e._meta.instanceId)})),e._bulkDocs=function(n,i,o){en(t,n,i,e,r,a(o))},e._get=function(e,t,n){var i,o,s,a=t.ctx;if(!a){var c=Qt(r,[$t,"by-sequence","attach-store"],"readonly");if(c.error)return n(c.error);a=c.txn}function l(){n(s,{doc:i,metadata:o,ctx:a})}a.objectStore($t).get(e).onsuccess=function(e){if(!(o=Wt(e.target.result)))return s=ne(H,"missing"),l();var n;if(t.rev)n=t.latest?function(e,t){for(var n,i=t.rev_tree.slice();n=i.pop();){var r=n.pos,o=n.ids,s=o[0],a=o[1],c=o[2],l=0===c.length,d=n.history?n.history.slice():[];if(d.push({id:s,pos:r,opts:a}),l)for(var u=0,f=d.length;u<f;u++){var p=d[u];if(p.pos+"-"+p.id===e)return r+"-"+s}for(var m=0,h=c.length;m<h;m++)i.push({pos:r+1,ids:c[m],history:d})}throw new Error("Unable to resolve latest revision for id "+t.id+", rev "+e)}(t.rev,o):t.rev;else if(n=o.winningRev,We(o))return s=ne(H,"deleted"),l();var r=a.objectStore("by-sequence"),c=o.id+"::"+n;r.index("_doc_id_rev").get(c).onsuccess=function(e){if((i=e.target.result)&&(i=zt(i)),!i)return s=ne(H,"missing"),l();l()}}},e._getAttachment=function(e,t,n,i,o){var s;if(i.ctx)s=i.ctx;else{var a=Qt(r,[$t,"by-sequence","attach-store"],"readonly");if(a.error)return o(a.error);s=a.txn}var c=n.digest,l=n.content_type;s.objectStore("attach-store").get(c).onsuccess=function(e){Jt(e.target.result.body,l,i.binary,(function(e){o(null,e)}))}},e._info=function(t){var n,i,o=Qt(r,[Ht,"by-sequence"],"readonly");if(o.error)return t(o.error);var s=o.txn;s.objectStore(Ht).get(Ht).onsuccess=function(e){i=e.target.result.docCount},s.objectStore("by-sequence").openCursor(null,"prev").onsuccess=function(e){var t=e.target.result;n=t?t.key:0},s.oncomplete=function(){t(null,{doc_count:i,update_seq:n,idb_attachment_format:e._meta.blobSupport?"binary":"base64"})}},e._allDocs=function(e,t){nn(e,r,a(t))},e._changes=function(t){return an(t,e,i,r)},e._close=function(e){r.close(),ln.delete(i),e()},e._getRevisionTree=function(e,t){var n=Qt(r,[$t],"readonly");if(n.error)return t(n.error);n.txn.objectStore($t).get(e).onsuccess=function(e){var n=Wt(e.target.result);n?t(null,n.rev_tree):t(ne(H))}},e._doCompaction=function(e,t,n){var i=Qt(r,[$t,"by-sequence","attach-store","attach-seq-store"],"readwrite");if(i.error)return n(i.error);var o=i.txn;o.objectStore($t).get(e).onsuccess=function(n){var i=Wt(n.target.result);Ie(i.rev_tree,(function(e,n,i,r,o){var s=n+"-"+i;-1!==t.indexOf(s)&&(o.status="missing")})),Yt(t,e,o);var r=i.winningRev,s=i.deleted;o.objectStore($t).put(Gt(i,r,s))},o.onabort=Ut(n),o.oncomplete=function(){n()}},e._getLocal=function(e,t){var n=Qt(r,["local-store"],"readonly");if(n.error)return t(n.error);var i=n.txn.objectStore("local-store").get(e);i.onerror=Ut(t),i.onsuccess=function(e){var n=e.target.result;n?(delete n._doc_id_rev,t(null,n)):t(ne(H))}},e._putLocal=function(e,t,n){"function"==typeof t&&(n=t,t={}),delete e._revisions;var i=e._rev,o=e._id;e._rev=i?"0-"+(parseInt(i.split("-")[1],10)+1):"0-1";var s,a=t.ctx;if(!a){var c=Qt(r,["local-store"],"readwrite");if(c.error)return n(c.error);(a=c.txn).onerror=Ut(n),a.oncomplete=function(){s&&n(null,s)}}var l,d=a.objectStore("local-store");i?(l=d.get(o)).onsuccess=function(r){var o=r.target.result;o&&o._rev===i?d.put(e).onsuccess=function(){s={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,s)}:n(ne(V))}:((l=d.add(e)).onerror=function(e){n(ne(V)),e.preventDefault(),e.stopPropagation()},l.onsuccess=function(){s={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,s)})},e._removeLocal=function(e,t,n){"function"==typeof t&&(n=t,t={});var i,o=t.ctx;if(!o){var s=Qt(r,["local-store"],"readwrite");if(s.error)return n(s.error);(o=s.txn).oncomplete=function(){i&&n(null,i)}}var a=e._id,c=o.objectStore("local-store"),l=c.get(a);l.onerror=Ut(n),l.onsuccess=function(r){var o=r.target.result;o&&o._rev===e._rev?(c.delete(a),i={ok:!0,id:a,rev:"0-0"},t.ctx&&n(null,i)):n(ne(H))}},e._destroy=function(e,t){Zt.removeAllListeners(i);var n=dn.get(i);n&&n.result&&(n.result.close(),ln.delete(i));var r=indexedDB.deleteDatabase(i);r.onsuccess=function(){dn.delete(i),B()&&i in localStorage&&delete localStorage[i],t(null,{ok:!0})},r.onerror=Ut(t)};var f=ln.get(i);if(f)return r=f.idb,e._meta=f.global,s()((function(){n(null,e)}));var p=indexedDB.open(i,5);dn.set(i,p),p.onupgradeneeded=function(e){var t=e.target.result;if(e.oldVersion<1)return function(e){var t=e.createObjectStore($t,{keyPath:"id"});e.createObjectStore("by-sequence",{autoIncrement:!0}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0}),e.createObjectStore("attach-store",{keyPath:"digest"}),e.createObjectStore(Ht,{keyPath:"id",autoIncrement:!1}),e.createObjectStore("detect-blob-support"),t.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),e.createObjectStore("local-store",{keyPath:"_id"});var n=e.createObjectStore("attach-seq-store",{autoIncrement:!0});n.createIndex("seq","seq"),n.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var n=e.currentTarget.transaction;e.oldVersion<3&&function(e){e.createObjectStore("local-store",{keyPath:"_id"}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0})}(t),e.oldVersion<4&&function(e){var t=e.createObjectStore("attach-seq-store",{autoIncrement:!0});t.createIndex("seq","seq"),t.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var i=[c,l,d,u],r=e.oldVersion;!function e(){var t=i[r-1];r++,t&&t(n,e)}()},p.onsuccess=function(t){(r=t.target.result).onversionchange=function(){r.close(),ln.delete(i)},r.onabort=function(e){P("error","Database has a global failure",e.target.error),o=e.target.error,r.close(),ln.delete(i)};var s,a,c,l,d=r.transaction([Ht,"detect-blob-support",$t],"readwrite"),u=!1;function f(){void 0!==c&&u&&(e._meta={name:i,instanceId:l,blobSupport:c},ln.set(i,{idb:r,global:e._meta}),n(null,e))}function p(){if(void 0!==a&&void 0!==s){var e=i+"_id";e in s?l=s[e]:s[e]=l=qe(),s.docCount=a,d.objectStore(Ht).put(s)}}d.objectStore(Ht).get(Ht).onsuccess=function(e){s=e.target.result||{id:Ht},p()},function(e,t){e.objectStore($t).index("deletedOrLocal").count(IDBKeyRange.only("0")).onsuccess=function(e){t(e.target.result)}}(d,(function(e){a=e,p()})),cn||(cn=function(e){return new Promise((function(t){var n=ye([""]),i=e.objectStore("detect-blob-support").put(n,"key");i.onsuccess=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)},i.onerror=e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)}})).catch((function(){return!1}))}(d)),cn.then((function(e){c=e,f()})),d.oncomplete=function(){u=!0,f()},d.onabort=Ut(n)},p.onerror=function(e){var t=e.target.error&&e.target.error.message;t?-1!==t.indexOf("stored database is a higher version")&&(t=new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')):t="Failed to open indexedDB, are you in private browsing mode?",P("error",t),n(ne(Z,t))}}(n,e,t)}),t,n.constructor)}un.valid=function(){try{return"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}};var fn={};function pn(e){var t=e.doc||e.ok,n=t&&t._attachments;n&&Object.keys(n).forEach((function(e){var t=n[e];t.data=we(t.data,t.content_type)}))}function mn(e){return/^_design/.test(e)?"_design/"+encodeURIComponent(e.slice(8)):/^_local/.test(e)?"_local/"+encodeURIComponent(e.slice(7)):encodeURIComponent(e)}function hn(e){return e._attachments&&Object.keys(e._attachments)?Promise.all(Object.keys(e._attachments).map((function(t){var n=e._attachments[t];if(n.data&&"string"!=typeof n.data)return new Promise((function(e){ke(n.data,e)})).then((function(e){n.data=e}))}))):Promise.resolve()}function gn(e,t){if(function(e){if(!e.prefix)return!1;var t=pe(e.prefix).protocol;return"http"===t||"https"===t}(t)){var n=t.name.substr(t.prefix.length);e=t.prefix.replace(/\/?$/,"/")+encodeURIComponent(n)}var i=pe(e);(i.user||i.password)&&(i.auth={username:i.user,password:i.password});var r=i.path.replace(/(^\/|\/$)/g,"").split("/");return i.db=r.pop(),-1===i.db.indexOf("%")&&(i.db=encodeURIComponent(i.db)),i.path=r.join("/"),i}function vn(e,t){return yn(e,e.db+"/"+t)}function yn(e,t){var n=e.path?"/":"";return e.protocol+"://"+e.host+(e.port?":"+e.port:"")+"/"+e.path+n+t}function bn(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}function _n(t,n){var i=this,r=gn(t.name,t),o=vn(r,"");t=L(t);var a,c=function(e,n){if((n=n||{}).headers=n.headers||new rt,n.credentials="include",t.auth||r.auth){var i=t.auth||r.auth,o=i.username+":"+i.password,s=ve(unescape(encodeURIComponent(o)));n.headers.set("Authorization","Basic "+s)}var a=t.headers||{};return Object.keys(a).forEach((function(e){n.headers.append(e,a[e])})),function(e){var t="undefined"!=typeof navigator&&navigator.userAgent?navigator.userAgent.toLowerCase():"",n=-1!==t.indexOf("msie"),i=-1!==t.indexOf("trident"),r=-1!==t.indexOf("edge"),o=!("method"in e)||"GET"===e.method;return(n||i||r)&&o}(n)&&(e+=(-1===e.indexOf("?")?"?":"&")+"_nonce="+Date.now()),(t.fetch||it)(e,n)};function l(e,t){return C(e,p()((function(e){u().then((function(){return t.apply(this,e)})).catch((function(t){e.pop()(t)}))}))).bind(i)}function d(e,t,n){var i={};return(t=t||{}).headers=t.headers||new rt,t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json"),t.headers.get("Accept")||t.headers.set("Accept","application/json"),c(e,t).then((function(e){return i.ok=e.ok,i.status=e.status,e.json()})).then((function(e){if(i.data=e,!i.ok){i.data.status=i.status;var t=ie(i.data);if(n)return n(t);throw t}if(Array.isArray(i.data)&&(i.data=i.data.map((function(e){return e.error||e.missing?ie(e):e}))),!n)return i;n(null,i.data)}))}function u(){return t.skip_setup?Promise.resolve():a||((a=d(o).catch((function(e){return e&&e.status&&404===e.status?(F(404,"PouchDB is just detecting if the remote exists."),d(o,{method:"PUT"})):Promise.reject(e)})).catch((function(e){return!(!e||!e.status||412!==e.status)||Promise.reject(e)}))).catch((function(){a=null})),a)}function f(e){return e.split("/").map(encodeURIComponent).join("/")}s()((function(){n(null,i)})),i._remote=!0,i.type=function(){return"http"},i.id=l("id",(function(e){c(yn(r,"")).then((function(e){return e.json()})).catch((function(){return{}})).then((function(t){var n=t&&t.uuid?t.uuid+r.db:vn(r,"");e(null,n)}))})),i.compact=l("compact",(function(e,t){"function"==typeof e&&(t=e,e={}),e=L(e),d(vn(r,"_compact"),{method:"POST"}).then((function(){!function n(){i.info((function(i,r){r&&!r.compact_running?t(null,{ok:!0}):setTimeout(n,e.interval||200)}))}()}))})),i.bulkGet=C("bulkGet",(function(e,t){var n=this;function i(t){var n={};e.revs&&(n.revs=!0),e.attachments&&(n.attachments=!0),e.latest&&(n.latest=!0),d(vn(r,"_bulk_get"+bn(n)),{method:"POST",body:JSON.stringify({docs:e.docs})}).then((function(n){e.attachments&&e.binary&&n.data.results.forEach((function(e){e.docs.forEach(pn)})),t(null,n.data)})).catch(t)}function o(){var i=Math.ceil(e.docs.length/50),r=0,o=new Array(i);function s(e){return function(n,s){o[e]=s.results,++r===i&&t(null,{results:oe(o)})}}for(var a=0;a<i;a++){var c=T(e,["revs","attachments","binary","latest"]);c.docs=e.docs.slice(50*a,Math.min(e.docs.length,50*(a+1))),I(n,c,s(a))}}var s=yn(r,""),a=fn[s];"boolean"!=typeof a?i((function(e,n){e?(fn[s]=!1,F(e.status,"PouchDB is just detecting if the remote supports the _bulk_get API."),o()):(fn[s]=!0,t(null,n))})):a?i(t):o()})),i._info=function(e){u().then((function(){return c(vn(r,""))})).then((function(e){return e.json()})).then((function(t){t.host=vn(r,""),e(null,t)})).catch(e)},i.fetch=function(e,t){return u().then((function(){var n="/"===e.substring(0,1)?yn(r,e.substring(1)):vn(r,e);return c(n,t)}))},i.get=l("get",(function(e,t,n){"function"==typeof t&&(n=t,t={});var i={};function o(e){var n=e._attachments,i=n&&Object.keys(n);if(n&&i.length)return function(e,t){return new Promise((function(n,i){var r,o=0,s=0,a=0,c=e.length;function l(){++a===c?r?i(r):n():f()}function d(){o--,l()}function u(e){o--,r=r||e,l()}function f(){for(;o<t&&s<c;)o++,e[s++]().then(d,u)}f()}))}(i.map((function(i){return function(){return function(i){var o=n[i],s=mn(e._id)+"/"+f(i)+"?rev="+e._rev;return c(vn(r,s)).then((function(e){return"buffer"in e?e.buffer():e.blob()})).then((function(e){if(t.binary){var n=Object.getOwnPropertyDescriptor(e.__proto__,"type");return n&&!n.set||(e.type=o.content_type),e}return new Promise((function(t){ke(e,t)}))})).then((function(e){delete o.stub,delete o.length,o.data=e}))}(i)}})),5)}(t=L(t)).revs&&(i.revs=!0),t.revs_info&&(i.revs_info=!0),t.latest&&(i.latest=!0),t.open_revs&&("all"!==t.open_revs&&(t.open_revs=JSON.stringify(t.open_revs)),i.open_revs=t.open_revs),t.rev&&(i.rev=t.rev),t.conflicts&&(i.conflicts=t.conflicts),t.update_seq&&(i.update_seq=t.update_seq),e=mn(e),d(vn(r,e+bn(i))).then((function(e){return Promise.resolve().then((function(){if(t.attachments)return n=e.data,Array.isArray(n)?Promise.all(n.map((function(e){if(e.ok)return o(e.ok)}))):o(n);var n})).then((function(){n(null,e.data)}))})).catch((function(t){t.docId=e,n(t)}))})),i.remove=l("remove",(function(e,t,n,i){var o;"string"==typeof t?(o={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(o=e,"function"==typeof t?(i=t,n={}):(i=n,n=t));var s=o._rev||n.rev;d(vn(r,mn(o._id))+"?rev="+s,{method:"DELETE"},i).catch(i)})),i.getAttachment=l("getAttachment",(function(t,n,i,o){"function"==typeof i&&(o=i,i={});var s,a=i.rev?"?rev="+i.rev:"",l=vn(r,mn(t))+"/"+f(n)+a;c(l,{method:"GET"}).then((function(t){if(s=t.headers.get("content-type"),t.ok)return void 0===e||e.browser||"function"!=typeof t.buffer?t.blob():t.buffer();throw t})).then((function(t){void 0===e||e.browser||(t.type=s),o(null,t)})).catch((function(e){o(e)}))})),i.removeAttachment=l("removeAttachment",(function(e,t,n,i){d(vn(r,mn(e)+"/"+f(t))+"?rev="+n,{method:"DELETE"},i).catch(i)})),i.putAttachment=l("putAttachment",(function(e,t,n,i,o,s){"function"==typeof o&&(s=o,o=i,i=n,n=null);var a=mn(e)+"/"+f(t),c=vn(r,a);if(n&&(c+="?rev="+n),"string"==typeof i){var l;try{l=ge(i)}catch(e){return s(ne(J,"Attachment is not a valid base64 string"))}i=l?_e(l,o):""}d(c,{headers:new rt({"Content-Type":o}),method:"PUT",body:i},s).catch(s)})),i._bulkDocs=function(e,t,n){e.new_edits=t.new_edits,u().then((function(){return Promise.all(e.docs.map(hn))})).then((function(){return d(vn(r,"_bulk_docs"),{method:"POST",body:JSON.stringify(e)},n)})).catch(n)},i._put=function(e,t,n){u().then((function(){return hn(e)})).then((function(){return d(vn(r,mn(e._id)),{method:"PUT",body:JSON.stringify(e)})})).then((function(e){n(null,e.data)})).catch((function(t){t.docId=e&&e._id,n(t)}))},i.allDocs=l("allDocs",(function(e,t){"function"==typeof e&&(t=e,e={});var n,i={},o="GET";(e=L(e)).conflicts&&(i.conflicts=!0),e.update_seq&&(i.update_seq=!0),e.descending&&(i.descending=!0),e.include_docs&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.key&&(i.key=JSON.stringify(e.key)),e.start_key&&(e.startkey=e.start_key),e.startkey&&(i.startkey=JSON.stringify(e.startkey)),e.end_key&&(e.endkey=e.end_key),e.endkey&&(i.endkey=JSON.stringify(e.endkey)),void 0!==e.inclusive_end&&(i.inclusive_end=!!e.inclusive_end),void 0!==e.limit&&(i.limit=e.limit),void 0!==e.skip&&(i.skip=e.skip);var s=bn(i);void 0!==e.keys&&(o="POST",n={keys:e.keys}),d(vn(r,"_all_docs"+s),{method:o,body:JSON.stringify(n)}).then((function(n){e.include_docs&&e.attachments&&e.binary&&n.data.rows.forEach(pn),t(null,n.data)})).catch(t)})),i._changes=function(e){var t="batch_size"in e?e.batch_size:25;(e=L(e)).continuous&&!("heartbeat"in e)&&(e.heartbeat=1e4);var n="timeout"in e?e.timeout:3e4;"timeout"in e&&e.timeout&&n-e.timeout<5e3&&(n=e.timeout+5e3),"heartbeat"in e&&e.heartbeat&&n-e.heartbeat<5e3&&(n=e.heartbeat+5e3);var i={};"timeout"in e&&e.timeout&&(i.timeout=e.timeout);var o=void 0!==e.limit&&e.limit,a=o;if(e.style&&(i.style=e.style),(e.include_docs||e.filter&&"function"==typeof e.filter)&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.continuous&&(i.feed="longpoll"),e.seq_interval&&(i.seq_interval=e.seq_interval),e.conflicts&&(i.conflicts=!0),e.descending&&(i.descending=!0),e.update_seq&&(i.update_seq=!0),"heartbeat"in e&&e.heartbeat&&(i.heartbeat=e.heartbeat),e.filter&&"string"==typeof e.filter&&(i.filter=e.filter),e.view&&"string"==typeof e.view&&(i.filter="_view",i.view=e.view),e.query_params&&"object"==typeof e.query_params)for(var c in e.query_params)Object.prototype.hasOwnProperty.call(e.query_params,c)&&(i[c]=e.query_params[c]);var l,f="GET";e.doc_ids?(i.filter="_doc_ids",f="POST",l={doc_ids:e.doc_ids}):e.selector&&(i.filter="_selector",f="POST",l={selector:e.selector});var p,m=new nt,h=function(n,s){if(!e.aborted){i.since=n,"object"==typeof i.since&&(i.since=JSON.stringify(i.since)),e.descending?o&&(i.limit=a):i.limit=!o||a>t?t:a;var c=vn(r,"_changes"+bn(i)),h={signal:m.signal,method:f,body:JSON.stringify(l)};p=n,e.aborted||u().then((function(){return d(c,h,s)})).catch(s)}},g={results:[]},v=function(n,i){if(!e.aborted){var r=0;if(i&&i.results){r=i.results.length,g.last_seq=i.last_seq;var c=null,l=null;"number"==typeof i.pending&&(c=i.pending),"string"!=typeof g.last_seq&&"number"!=typeof g.last_seq||(l=g.last_seq);e.query_params,i.results=i.results.filter((function(t){a--;var n=re(e)(t);return n&&(e.include_docs&&e.attachments&&e.binary&&pn(t),e.return_docs&&g.results.push(t),e.onChange(t,c,l)),n}))}else if(n)return e.aborted=!0,void e.complete(n);i&&i.last_seq&&(p=i.last_seq);var d=o&&a<=0||i&&r<t||e.descending;(!e.continuous||o&&a<=0)&&d?e.complete(null,g):s()((function(){h(p,v)}))}};return h(e.since||0,v),{cancel:function(){e.aborted=!0,m.abort()}}},i.revsDiff=l("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={}),d(vn(r,"_revs_diff"),{method:"POST",body:JSON.stringify(e)},n).catch(n)})),i._close=function(e){e()},i._destroy=function(e,t){d(vn(r,""),{method:"DELETE"}).then((function(e){t(null,e)})).catch((function(e){404===e.status?t(null,{ok:!0}):t(e)}))}}function wn(e){this.status=400,this.name="query_parse_error",this.message=e,this.error=!0;try{Error.captureStackTrace(this,wn)}catch(e){}}function En(e){this.status=404,this.name="not_found",this.message=e,this.error=!0;try{Error.captureStackTrace(this,En)}catch(e){}}function Sn(e){this.status=500,this.name="invalid_value",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Sn)}catch(e){}}function kn(e,t){return t&&e.then((function(e){s()((function(){t(null,e)}))}),(function(e){s()((function(){t(e)}))})),e}function Ln(e,t){return function(){var n=arguments,i=this;return e.add((function(){return t.apply(i,n)}))}}function An(e){var t=new i(e),n=new Array(t.size),r=-1;return t.forEach((function(e){n[++r]=e})),n}function xn(e){var t=new Array(e.size),n=-1;return e.forEach((function(e,i){t[++n]=i})),t}function Cn(e){return new Sn("builtin "+e+" function requires map values to be numbers or number arrays")}function Tn(e){for(var t=0,n=0,i=e.length;n<i;n++){var r=e[n];if("number"!=typeof r){if(!Array.isArray(r))throw Cn("_sum");t="number"==typeof t?[t]:t;for(var o=0,s=r.length;o<s;o++){var a=r[o];if("number"!=typeof a)throw Cn("_sum");void 0===t[o]?t.push(a):t[o]+=a}}else"number"==typeof t?t+=r:t[0]+=r}return t}_n.valid=function(){return!0},h()(wn,Error),h()(En,Error),h()(Sn,Error);var Nn=P.bind(null,"log"),qn=Array.isArray,On=JSON.parse;function In(e,t){return me("return ("+e.replace(/;\s*$/,"")+");",{emit:t,sum:Tn,log:Nn,isArray:qn,toJSON:On})}function Bn(){this.promise=new Promise((function(e){e()}))}function Mn(e){if(!e)return"undefined";switch(typeof e){case"function":case"string":return e.toString();default:return JSON.stringify(e)}}function Pn(e,t,n,i,r,o){var s,a=function(e,t){return Mn(e)+Mn(t)+"undefined"}(n,i);if(!r&&(s=e._cachedViews=e._cachedViews||{})[a])return s[a];var c=e.info().then((function(c){var l=c.db_name+"-mrview-"+(r?"temp":Te(a));return he(e,"_local/"+o,(function(e){e.views=e.views||{};var n=t;-1===n.indexOf("/")&&(n=t+"/"+t);var i=e.views[n]=e.views[n]||{};if(!i[l])return i[l]=!0,e})).then((function(){return e.registerDependentDatabase(l).then((function(t){var r=t.db;r.auto_compaction=!0;var o={name:l,db:r,sourceDB:e,adapter:e.adapter,mapFun:n,reduceFun:i};return o.db.get("_local/lastSeq").catch((function(e){if(404!==e.status)throw e})).then((function(e){return o.seq=e?e.seq:0,s&&o.db.once("destroyed",(function(){delete s[a]})),o}))}))}))}));return s&&(s[a]=c),c}Bn.prototype.add=function(e){return this.promise=this.promise.catch((function(){})).then((function(){return e()})),this.promise},Bn.prototype.finish=function(){return this.promise};var jn={},Fn=new Bn;function Dn(e){return-1===e.indexOf("/")?[e,e]:e.split("/")}function Rn(e,t){try{e.emit("error",t)}catch(e){P("error","The user's map/reduce function threw an uncaught error.\nYou can debug this error by doing:\nmyDatabase.on('error', function (err) { debugger; });\nPlease double-check your map/reduce function."),P("error",t)}}var $n=function(e,t){return Tn(t)},Hn=function(e,t){return t.length},Vn=function(e,t){return{sum:Tn(t),min:Math.min.apply(null,t),max:Math.max.apply(null,t),count:t.length,sumsqr:function(e){for(var t=0,n=0,i=e.length;n<i;n++){var r=e[n];t+=r*r}return t}(t)}};var Un=function(e,t,n,o){function a(e,t,n){try{t(n)}catch(t){Rn(e,t)}}function c(e,t,n,i,r){try{return{output:t(n,i,r)}}catch(t){return Rn(e,t),{error:t}}}function l(e,t){var n=pt(e.key,t.key);return 0!==n?n:pt(e.value,t.value)}function d(e,t,n){return n=n||0,"number"==typeof t?e.slice(n,t+n):n>0?e.slice(n):e}function u(e){var t=e.value;return t&&"object"==typeof t&&t._id||e.id}function f(e){return function(t){return e.include_docs&&e.attachments&&e.binary&&function(e){e.rows.forEach((function(e){var t=e.doc&&e.doc._attachments;t&&Object.keys(t).forEach((function(e){var n=t[e];t[e].data=we(n.data,n.content_type)}))}))}(t),t}}function m(e,t,n,i){var r=t[e];void 0!==r&&(i&&(r=encodeURIComponent(JSON.stringify(r))),n.push(e+"="+r))}function h(e){if(void 0!==e){var t=Number(e);return isNaN(t)||t!==parseInt(e,10)?e:t}}function g(e,t){var n=e.descending?"endkey":"startkey",i=e.descending?"startkey":"endkey";if(void 0!==e[n]&&void 0!==e[i]&&pt(e[n],e[i])>0)throw new wn("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");if(t.reduce&&!1!==e.reduce){if(e.include_docs)throw new wn("{include_docs:true} is invalid for reduce");if(e.keys&&e.keys.length>1&&!e.group&&!e.group_level)throw new wn("Multi-key fetches for reduce views must use {group: true}")}["group_level","limit","skip"].forEach((function(t){var n=function(e){if(e){if("number"!=typeof e)return new wn('Invalid value for integer: "'+e+'"');if(e<0)return new wn('Invalid value for positive integer: "'+e+'"')}}(e[t]);if(n)throw n}))}function v(e){return function(t){if(404===t.status)return e;throw t}}function y(e,t,n){var r="_local/doc_"+e,o={_id:r,keys:[]},s=n.get(e),a=s[0];return(function(e){return 1===e.length&&/^1-/.test(e[0].rev)}(s[1])?Promise.resolve(o):t.db.get(r).catch(v(o))).then((function(e){return function(e){return e.keys.length?t.db.allDocs({keys:e.keys,include_docs:!0}):Promise.resolve({rows:[]})}(e).then((function(t){return function(e,t){for(var n=[],r=new i,o=0,s=t.rows.length;o<s;o++){var c=t.rows[o].doc;if(c&&(n.push(c),r.add(c._id),c._deleted=!a.has(c._id),!c._deleted)){var l=a.get(c._id);"value"in l&&(c.value=l.value)}}var d=xn(a);return d.forEach((function(e){if(!r.has(e)){var t={_id:e},i=a.get(e);"value"in i&&(t.value=i.value),n.push(t)}})),e.keys=An(d.concat(e.keys)),n.push(e),n}(e,t)}))}))}function b(e){var t="string"==typeof e?e:e.name,n=jn[t];return n||(n=jn[t]=new Bn),n}function _(e,n){return Ln(b(e),(function(){return function(e,n){var i,o;var s=t(e.mapFun,(function(e,t){var n={id:o._id,key:mt(e)};null!=t&&(n.value=mt(t)),i.push(n)})),c=e.seq||0;function d(t,n){return function(){return function(e,t,n){return e.db.get("_local/lastSeq").catch(v({_id:"_local/lastSeq",seq:0})).then((function(i){var r=xn(t);return Promise.all(r.map((function(n){return y(n,e,t)}))).then((function(t){var r=oe(t);return i.seq=n,r.push(i),e.db.bulkDocs({docs:r})}))}))}(e,t,n)}}let u=0,f={view:e.name,indexed_docs:u};e.sourceDB.emit("indexing",f);var p=new Bn;function m(){return e.sourceDB.changes({return_docs:!0,conflicts:!0,include_docs:!0,style:"all_docs",since:c,limit:n.changes_batch_size}).then(h)}function h(t){var f=t.results;if(!f.length)return;var h=function(t){for(var n=new r,d=0,u=t.length;d<u;d++){var f=t[d];if("_"!==f.doc._id[0]){i=[],(o=f.doc)._deleted||a(e.sourceDB,s,o),i.sort(l);var p=g(i);n.set(f.doc._id,[p,f.changes])}c=f.seq}return n}(f);p.add(d(h,c)),u+=f.length;let v={view:e.name,last_seq:t.last_seq,results_count:f.length,indexed_docs:u};return e.sourceDB.emit("indexing",v),f.length<n.changes_batch_size?void 0:m()}function g(e){for(var t,n=new r,i=0,o=e.length;i<o;i++){var s=e[i],a=[s.key,s.id];i>0&&0===pt(s.key,t)&&a.push(i),n.set(gt(a),s),t=s.key}return n}return m().then((function(){return p.finish()})).then((function(){e.seq=c}))}(e,n)}))()}function w(e,t){return Ln(b(e),(function(){return function(e,t){var i,o=e.reduceFun&&!1!==t.reduce,s=t.skip||0;void 0===t.keys||t.keys.length||(t.limit=0,delete t.keys);function a(t){return t.include_docs=!0,e.db.allDocs(t).then((function(e){return i=e.total_rows,e.rows.map((function(e){if("value"in e.doc&&"object"==typeof e.doc.value&&null!==e.doc.value){var t=Object.keys(e.doc.value).sort(),n=["id","key","value"];if(!(t<n||t>n))return e.doc.value}var i=function(e){for(var t=[],n=[],i=0;;){var r=e[i++];if("\0"!==r)switch(r){case"1":t.push(null);break;case"2":t.push("1"===e[i]),i++;break;case"3":var o=vt(e,i);t.push(o.num),i+=o.length;break;case"4":for(var s="";;){var a=e[i];if("\0"===a)break;s+=a,i++}s=s.replace(/\u0001\u0001/g,"\0").replace(/\u0001\u0002/g,"").replace(/\u0002\u0002/g,""),t.push(s);break;case"5":var c={element:[],index:t.length};t.push(c.element),n.push(c);break;case"6":var l={element:{},index:t.length};t.push(l.element),n.push(l);break;default:throw new Error("bad collationIndex or unexpectedly reached end of input: "+r)}else{if(1===t.length)return t.pop();yt(t,n)}}}(e.doc._id);return{key:i[0],id:i[1],value:"value"in e.doc?e.doc.value:null}}))}))}function l(a){var l;if(l=o?function(e,t,i){0===i.group_level&&delete i.group_level;var r=i.group||i.group_level,o=n(e.reduceFun),s=[],a=isNaN(i.group_level)?Number.POSITIVE_INFINITY:i.group_level;t.forEach((function(e){var t=s[s.length-1],n=r?e.key:null;if(r&&Array.isArray(n)&&(n=n.slice(0,a)),t&&0===pt(t.groupKey,n))return t.keys.push([e.key,e.id]),void t.values.push(e.value);s.push({keys:[[e.key,e.id]],values:[e.value],groupKey:n})})),t=[];for(var l=0,u=s.length;l<u;l++){var f=s[l],p=c(e.sourceDB,o,f.keys,f.values,!1);if(p.error&&p.error instanceof Sn)throw p.error;t.push({value:p.error?null:p.output,key:f.groupKey})}return{rows:d(t,i.limit,i.skip)}}(e,a,t):void 0===t.keys?{total_rows:i,offset:s,rows:a}:{total_rows:i,offset:s,rows:d(a,t.limit,t.skip)},t.update_seq&&(l.update_seq=e.seq),t.include_docs){var f=An(a.map(u));return e.sourceDB.allDocs({keys:f,include_docs:!0,conflicts:t.conflicts,attachments:t.attachments,binary:t.binary}).then((function(e){var t=new r;return e.rows.forEach((function(e){t.set(e.id,e.doc)})),a.forEach((function(e){var n=u(e),i=t.get(n);i&&(e.doc=i)})),l}))}return l}if(void 0!==t.keys){var f=t.keys.map((function(e){var n={startkey:gt([e]),endkey:gt([e,{}])};return t.update_seq&&(n.update_seq=!0),a(n)}));return Promise.all(f).then(oe).then(l)}var p,m,h={descending:t.descending};if(t.update_seq&&(h.update_seq=!0),"start_key"in t&&(p=t.start_key),"startkey"in t&&(p=t.startkey),"end_key"in t&&(m=t.end_key),"endkey"in t&&(m=t.endkey),void 0!==p&&(h.startkey=t.descending?gt([p,{}]):gt([p])),void 0!==m){var g=!1!==t.inclusive_end;t.descending&&(g=!g),h.endkey=gt(g?[m,{}]:[m])}if(void 0!==t.key){var v=gt([t.key]),y=gt([t.key,{}]);h.descending?(h.endkey=v,h.startkey=y):(h.startkey=v,h.endkey=y)}return o||("number"==typeof t.limit&&(h.limit=t.limit),h.skip=s),a(h).then(l)}(e,t)}))()}function E(t,n,i){if("function"==typeof t._query)return function(e,t,n){return new Promise((function(i,r){e._query(t,n,(function(e,t){if(e)return r(e);i(t)}))}))}(t,n,i);if(ae(t))return function(e,t,n){var i,r,o,s=[],a="GET";if(m("reduce",n,s),m("include_docs",n,s),m("attachments",n,s),m("limit",n,s),m("descending",n,s),m("group",n,s),m("group_level",n,s),m("skip",n,s),m("stale",n,s),m("conflicts",n,s),m("startkey",n,s,!0),m("start_key",n,s,!0),m("endkey",n,s,!0),m("end_key",n,s,!0),m("inclusive_end",n,s),m("key",n,s,!0),m("update_seq",n,s),s=""===(s=s.join("&"))?"":"?"+s,void 0!==n.keys){var c="keys="+encodeURIComponent(JSON.stringify(n.keys));c.length+s.length+1<=2e3?s+=("?"===s[0]?"&":"?")+c:(a="POST","string"==typeof t?i={keys:n.keys}:t.keys=n.keys)}if("string"==typeof t){var l=Dn(t);return e.fetch("_design/"+l[0]+"/_view/"+l[1]+s,{headers:new rt({"Content-Type":"application/json"}),method:a,body:JSON.stringify(i)}).then((function(e){return r=e.ok,o=e.status,e.json()})).then((function(e){if(!r)throw e.status=o,ie(e);return e.rows.forEach((function(e){if(e.value&&e.value.error&&"builtin_reduce_error"===e.value.error)throw new Error(e.reason)})),e})).then(f(n))}return i=i||{},Object.keys(t).forEach((function(e){Array.isArray(t[e])?i[e]=t[e]:i[e]=t[e].toString()})),e.fetch("_temp_view"+s,{headers:new rt({"Content-Type":"application/json"}),method:"POST",body:JSON.stringify(i)}).then((function(e){return r=e.ok,o=e.status,e.json()})).then((function(e){if(!r)throw e.status=o,ie(e);return e})).then(f(n))}(t,n,i);var r={changes_batch_size:t.__opts.view_update_changes_batch_size||50};if("string"!=typeof n)return g(i,n),Fn.add((function(){return Pn(t,"temp_view/temp_view",n.map,n.reduce,!0,e).then((function(e){return t=_(e,r).then((function(){return w(e,i)})),n=function(){return e.db.destroy()},t.then((function(e){return n().then((function(){return e}))}),(function(e){return n().then((function(){throw e}))}));var t,n}))})),Fn.finish();var a=n,c=Dn(a),l=c[0],d=c[1];return t.get("_design/"+l).then((function(n){var c=n.views&&n.views[d];if(!c)throw new En("ddoc "+n._id+" has no view named "+d);return o(n,d),g(i,c),Pn(t,a,c.map,c.reduce,!1,e).then((function(e){return"ok"===i.stale||"update_after"===i.stale?("update_after"===i.stale&&s()((function(){_(e,r)})),w(e,i)):_(e,r).then((function(){return w(e,i)}))}))}))}var S;return{query:function(e,t,n){var i=this;"function"==typeof t&&(n=t,t={}),t=t?function(e){return e.group_level=h(e.group_level),e.limit=h(e.limit),e.skip=h(e.skip),e}(t):{},"function"==typeof e&&(e={map:e});var r=Promise.resolve().then((function(){return E(i,e,t)}));return kn(r,n),r},viewCleanup:(S=function(){var t=this;return"function"==typeof t._viewCleanup?function(e){return new Promise((function(t,n){e._viewCleanup((function(e,i){if(e)return n(e);t(i)}))}))}(t):ae(t)?function(e){return e.fetch("_view_cleanup",{headers:new rt({"Content-Type":"application/json"}),method:"POST"}).then((function(e){return e.json()}))}(t):function(t){return t.get("_local/"+e).then((function(e){var n=new r;Object.keys(e.views).forEach((function(e){var t=Dn(e),r="_design/"+t[0],o=t[1],s=n.get(r);s||(s=new i,n.set(r,s)),s.add(o)}));var o={keys:xn(n),include_docs:!0};return t.allDocs(o).then((function(i){var r={};i.rows.forEach((function(t){var i=t.key.substring(8);n.get(t.key).forEach((function(n){var o=i+"/"+n;e.views[o]||(o=n);var s=Object.keys(e.views[o]),a=t.doc&&t.doc.views&&t.doc.views[n];s.forEach((function(e){r[e]=r[e]||a}))}))}));var o=Object.keys(r).filter((function(e){return!r[e]})).map((function(e){return Ln(b(e),(function(){return new t.constructor(e,t.__opts).destroy()}))()}));return Promise.all(o).then((function(){return{ok:!0}}))}))}),v({ok:!0}))}(t)},p()((function(e){var t=e.pop(),n=S.apply(this,e);return"function"==typeof t&&kn(n,t),n})))}}("mrviews",(function(e,t){if("function"==typeof e&&2===e.length){var n=e;return function(e){return n(e,t)}}return In(e.toString(),t)}),(function(e){var t=e.toString(),n=function(e){if(/^_sum/.test(e))return $n;if(/^_count/.test(e))return Hn;if(/^_stats/.test(e))return Vn;if(/^_/.test(e))throw new Error(e+" is not a supported reduce function.")}(t);return n||In(t)}),(function(e,t){var n=e.views&&e.views[t];if("string"!=typeof n.map)throw new En("ddoc "+e._id+" has no string view named "+t+", instead found object of type: "+typeof n.map)}));var Gn={query:function(e,t,n){return Un.query.call(this,e,t,n)},viewCleanup:function(e){return Un.viewCleanup.call(this,e)}};function Wn(e){return/^1-/.test(e)}function zn(e,t){var n=Object.keys(t._attachments);return Promise.all(n.map((function(n){return e.getAttachment(t._id,n,{rev:t._rev})})))}function Jn(e,t,n,i){n=L(n);var r=[],o=!0;function s(t){return e.allDocs({keys:t,include_docs:!0,conflicts:!0}).then((function(e){if(i.cancelled)throw new Error("cancelled");e.rows.forEach((function(e){var t;e.deleted||!e.doc||!Wn(e.value.rev)||(t=e.doc,t._attachments&&Object.keys(t._attachments).length>0)||function(e){return e._conflicts&&e._conflicts.length>0}(e.doc)||(e.doc._conflicts&&delete e.doc._conflicts,r.push(e.doc),delete n[e.id])}))}))}return Promise.resolve().then((function(){var e=Object.keys(n).filter((function(e){var t=n[e].missing;return 1===t.length&&Wn(t[0])}));if(e.length>0)return s(e)})).then((function(){var s=function(e){var t=[];return Object.keys(e).forEach((function(n){e[n].missing.forEach((function(e){t.push({id:n,rev:e})}))})),{docs:t,revs:!0,latest:!0}}(n);if(s.docs.length)return e.bulkGet(s).then((function(n){if(i.cancelled)throw new Error("cancelled");return Promise.all(n.results.map((function(n){return Promise.all(n.docs.map((function(n){var i=n.ok;return n.error&&(o=!1),i&&i._attachments?function(e,t,n){var i=ae(t)&&!ae(e),r=Object.keys(n._attachments);return i?e.get(n._id).then((function(i){return Promise.all(r.map((function(r){return function(e,t,n){return!e._attachments||!e._attachments[n]||e._attachments[n].digest!==t._attachments[n].digest}(i,n,r)?t.getAttachment(n._id,r):e.getAttachment(i._id,r)})))})).catch((function(e){if(404!==e.status)throw e;return zn(t,n)})):zn(t,n)}(t,e,i).then((function(e){var t=Object.keys(i._attachments);return e.forEach((function(e,n){var r=i._attachments[t[n]];delete r.stub,delete r.length,r.data=e})),i})):i})))}))).then((function(e){r=r.concat(oe(e).filter(Boolean))}))}))})).then((function(){return{ok:o,docs:r}}))}function Kn(e,t,n,i,r){return e.get(t).catch((function(n){if(404===n.status)return"http"!==e.adapter&&"https"!==e.adapter||F(404,"PouchDB is just checking if a remote checkpoint exists."),{session_id:i,_id:t,history:[],replicator:"pouchdb",version:1};throw n})).then((function(o){if(!r.cancelled&&o.last_seq!==n)return o.history=(o.history||[]).filter((function(e){return e.session_id!==i})),o.history.unshift({last_seq:n,session_id:i}),o.history=o.history.slice(0,5),o.version=1,o.replicator="pouchdb",o.session_id=i,o.last_seq=n,e.put(o).catch((function(o){if(409===o.status)return Kn(e,t,n,i,r);throw o}))}))}function Xn(e,t,n,i,r){this.src=e,this.target=t,this.id=n,this.returnValue=i,this.opts=r||{}}Xn.prototype.writeCheckpoint=function(e,t){var n=this;return this.updateTarget(e,t).then((function(){return n.updateSource(e,t)}))},Xn.prototype.updateTarget=function(e,t){return this.opts.writeTargetCheckpoint?Kn(this.target,this.id,e,t,this.returnValue):Promise.resolve(!0)},Xn.prototype.updateSource=function(e,t){if(this.opts.writeSourceCheckpoint){var n=this;return Kn(this.src,this.id,e,t,this.returnValue).catch((function(e){if(Zn(e))return n.opts.writeSourceCheckpoint=!1,!0;throw e}))}return Promise.resolve(!0)};var Yn={undefined:function(e,t){return 0===pt(e.last_seq,t.last_seq)?t.last_seq:0},1:function(e,t){return function(e,t){if(e.session_id===t.session_id)return{last_seq:e.last_seq,history:e.history};return function e(t,n){var i=t[0],r=t.slice(1),o=n[0],s=n.slice(1);if(!i||0===n.length)return{last_seq:0,history:[]};if(Qn(i.session_id,n))return{last_seq:i.last_seq,history:t};if(Qn(o.session_id,r))return{last_seq:o.last_seq,history:s};return e(r,s)}(e.history,t.history)}(t,e).last_seq}};function Qn(e,t){var n=t[0],i=t.slice(1);return!(!e||0===t.length)&&(e===n.session_id||Qn(e,i))}function Zn(e){return"number"==typeof e.status&&4===Math.floor(e.status/100)}Xn.prototype.getCheckpoint=function(){var e=this;return e.opts&&e.opts.writeSourceCheckpoint&&!e.opts.writeTargetCheckpoint?e.src.get(e.id).then((function(e){return e.last_seq||0})).catch((function(e){if(404!==e.status)throw e;return 0})):e.target.get(e.id).then((function(t){return e.opts&&e.opts.writeTargetCheckpoint&&!e.opts.writeSourceCheckpoint?t.last_seq||0:e.src.get(e.id).then((function(e){return t.version!==e.version?0:(n=t.version?t.version.toString():"undefined")in Yn?Yn[n](t,e):0;var n}),(function(n){if(404===n.status&&t.last_seq)return e.src.put({_id:e.id,last_seq:0}).then((function(){return 0}),(function(n){return Zn(n)?(e.opts.writeSourceCheckpoint=!1,t.last_seq):0}));throw n}))})).catch((function(e){if(404!==e.status)throw e;return 0}))};function ei(e,t,n){var i=n.doc_ids?n.doc_ids.sort(pt):"",r=n.filter?n.filter.toString():"",o="",s="",a="";return n.selector&&(a=JSON.stringify(n.selector)),n.filter&&n.query_params&&(o=JSON.stringify(function(e){return Object.keys(e).sort(pt).reduce((function(t,n){return t[n]=e[n],t}),{})}(n.query_params))),n.filter&&"_view"===n.filter&&(s=n.view.toString()),Promise.all([e.id(),t.id()]).then((function(e){var t=e[0]+e[1]+r+s+o+i+a;return new Promise((function(e){Ce(t,e)}))})).then((function(e){return"_local/"+(e=e.replace(/\//g,".").replace(/\+/g,"_"))}))}function ti(e,t,n,i,r){var o,a,c,l=[],d={seq:0,changes:[],docs:[]},u=!1,f=!1,p=!1,m=0,h=n.continuous||n.live||!1,g=n.batch_size||100,v=n.batches_limit||10,y=n.style||"all_docs",b=!1,_=n.doc_ids,w=n.selector,E=[],S=qe();r=r||{ok:!0,start_time:(new Date).toISOString(),docs_read:0,docs_written:0,doc_write_failures:0,errors:[]};var k={};function A(){return c?Promise.resolve():ei(e,t,n).then((function(r){a=r;var o={};o=!1===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!1}:"source"===n.checkpoint?{writeSourceCheckpoint:!0,writeTargetCheckpoint:!1}:"target"===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!0}:{writeSourceCheckpoint:!0,writeTargetCheckpoint:!0},c=new Xn(e,t,a,i,o)}))}function x(){if(E=[],0!==o.docs.length){var e=o.docs,s={timeout:n.timeout};return t.bulkDocs({docs:e,new_edits:!1},s).then((function(t){if(i.cancelled)throw I(),new Error("cancelled");var n=Object.create(null);t.forEach((function(e){e.error&&(n[e.id]=e)}));var o=Object.keys(n).length;r.doc_write_failures+=o,r.docs_written+=e.length-o,e.forEach((function(e){var t=n[e._id];if(t){r.errors.push(t);var o=(t.name||"").toLowerCase();if("unauthorized"!==o&&"forbidden"!==o)throw t;i.emit("denied",L(t))}else E.push(e)}))}),(function(t){throw r.doc_write_failures+=e.length,t}))}}function C(){if(o.error)throw new Error("There was a problem getting docs.");r.last_seq=m=o.seq;var e=L(r);return E.length&&(e.docs=E,"number"==typeof o.pending&&(e.pending=o.pending,delete o.pending),i.emit("change",e)),u=!0,c.writeCheckpoint(o.seq,S).then((function(){if(i.emit("checkpoint",{checkpoint:o.seq}),u=!1,i.cancelled)throw I(),new Error("cancelled");o=void 0,F()})).catch((function(e){throw R(e),e}))}function T(){return Jn(e,t,o.diffs,i).then((function(e){o.error=!e.ok,e.docs.forEach((function(e){delete o.diffs[e._id],r.docs_read++,o.docs.push(e)}))}))}function N(){var e;i.cancelled||o||(0!==l.length?(o=l.shift(),i.emit("checkpoint",{start_next_batch:o.seq}),(e={},o.changes.forEach((function(t){i.emit("checkpoint",{revs_diff:t}),"_user/"!==t.id&&(e[t.id]=t.changes.map((function(e){return e.rev})))})),t.revsDiff(e).then((function(e){if(i.cancelled)throw I(),new Error("cancelled");o.diffs=e}))).then(T).then(x).then(C).then(N).catch((function(e){O("batch processing terminated with error",e)}))):q(!0))}function q(e){0!==d.changes.length?(e||f||d.changes.length>=g)&&(l.push(d),d={seq:0,changes:[],docs:[]},"pending"!==i.state&&"stopped"!==i.state||(i.state="active",i.emit("active")),N()):0!==l.length||o||((h&&k.live||f)&&(i.state="pending",i.emit("paused")),f&&I())}function O(e,t){p||(t.message||(t.message=e),r.ok=!1,r.status="aborting",l=[],d={seq:0,changes:[],docs:[]},I(t))}function I(o){if(!(p||i.cancelled&&(r.status="cancelled",u)))if(r.status=r.status||"complete",r.end_time=(new Date).toISOString(),r.last_seq=m,p=!0,o){(o=ne(o)).result=r;var s=(o.name||"").toLowerCase();"unauthorized"===s||"forbidden"===s?(i.emit("error",o),i.removeAllListeners()):function(e,t,n,i){if(!1===e.retry)return t.emit("error",n),void t.removeAllListeners();if("function"!=typeof e.back_off_function&&(e.back_off_function=j),t.emit("requestError",n),"active"===t.state||"pending"===t.state){t.emit("paused",n),t.state="stopped";var r=function(){e.current_back_off=0};t.once("paused",(function(){t.removeListener("active",r)})),t.once("active",r)}e.current_back_off=e.current_back_off||0,e.current_back_off=e.back_off_function(e.current_back_off),setTimeout(i,e.current_back_off)}(n,i,o,(function(){ti(e,t,n,i)}))}else i.emit("complete",r),i.removeAllListeners()}function B(e,t,r){if(i.cancelled)return I();"number"==typeof t&&(d.pending=t),re(n)(e)&&(d.seq=e.seq||r,d.changes.push(e),i.emit("checkpoint",{pending_batch:d.seq}),s()((function(){q(0===l.length&&k.live)})))}function M(e){if(b=!1,i.cancelled)return I();if(e.results.length>0)k.since=e.results[e.results.length-1].seq,F(),q(!0);else{var t=function(){h?(k.live=!0,F()):f=!0,q(!0)};o||0!==e.results.length?t():(u=!0,c.writeCheckpoint(e.last_seq,S).then((function(){u=!1,r.last_seq=m=e.last_seq,t()})).catch(R))}}function P(e){if(b=!1,i.cancelled)return I();O("changes rejected",e)}function F(){if(!b&&!f&&l.length<v){b=!0,i._changes&&(i.removeListener("cancel",i._abortChanges),i._changes.cancel()),i.once("cancel",r);var t=e.changes(k).on("change",B);t.then(o,o),t.then(M).catch(P),n.retry&&(i._changes=t,i._abortChanges=r)}function r(){t.cancel()}function o(){i.removeListener("cancel",r)}}function D(){A().then((function(){if(!i.cancelled)return c.getCheckpoint().then((function(e){k={since:m=e,limit:g,batch_size:g,style:y,doc_ids:_,selector:w,return_docs:!0},n.filter&&("string"!=typeof n.filter?k.include_docs=!0:k.filter=n.filter),"heartbeat"in n&&(k.heartbeat=n.heartbeat),"timeout"in n&&(k.timeout=n.timeout),n.query_params&&(k.query_params=n.query_params),n.view&&(k.view=n.view),F()}));I()})).catch((function(e){O("getCheckpoint rejected with ",e)}))}function R(e){u=!1,O("writeCheckpoint completed with error",e)}i.ready(e,t),i.cancelled?I():(i._addedListeners||(i.once("cancel",I),"function"==typeof n.complete&&(i.once("error",n.complete),i.once("complete",(function(e){n.complete(null,e)}))),i._addedListeners=!0),void 0===n.since?D():A().then((function(){return u=!0,c.writeCheckpoint(n.since,S)})).then((function(){u=!1,i.cancelled?I():(m=n.since,D())})).catch(R))}function ni(){v.a.call(this),this.cancelled=!1,this.state="pending";var e=this,t=new Promise((function(t,n){e.once("complete",t),e.once("error",n)}));e.then=function(e,n){return t.then(e,n)},e.catch=function(e){return t.catch(e)},e.catch((function(){}))}function ii(e,t){var n=t.PouchConstructor;return"string"==typeof e?new n(e,t):e}function ri(e,t,n,i){if("function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),n.doc_ids&&!Array.isArray(n.doc_ids))throw ne(Y,"`doc_ids` filter parameter is not a list.");n.complete=i,(n=L(n)).continuous=n.continuous||n.live,n.retry="retry"in n&&n.retry,n.PouchConstructor=n.PouchConstructor||this;var r=new ni(n);return ti(ii(e,n),ii(t,n),n,r),r}function oi(e,t,n,i){return"function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),(n=L(n)).PouchConstructor=n.PouchConstructor||this,new si(e=ii(e,n),t=ii(t,n),n,i)}function si(e,t,n,i){var r=this;this.canceled=!1;var o=n.push?D({},n,n.push):n,s=n.pull?D({},n,n.pull):n;function a(e){r.emit("change",{direction:"pull",change:e})}function c(e){r.emit("change",{direction:"push",change:e})}function l(e){r.emit("denied",{direction:"push",doc:e})}function d(e){r.emit("denied",{direction:"pull",doc:e})}function u(){r.pushPaused=!0,r.pullPaused&&r.emit("paused")}function f(){r.pullPaused=!0,r.pushPaused&&r.emit("paused")}function p(){r.pushPaused=!1,r.pullPaused&&r.emit("active",{direction:"push"})}function m(){r.pullPaused=!1,r.pushPaused&&r.emit("active",{direction:"pull"})}this.push=ri(e,t,o),this.pull=ri(t,e,s),this.pushPaused=!0,this.pullPaused=!0;var h={};function g(e){return function(t,n){("change"===t&&(n===a||n===c)||"denied"===t&&(n===d||n===l)||"paused"===t&&(n===f||n===u)||"active"===t&&(n===m||n===p))&&(t in h||(h[t]={}),h[t][e]=!0,2===Object.keys(h[t]).length&&r.removeAllListeners(t))}}function v(e,t,n){-1==e.listeners(t).indexOf(n)&&e.on(t,n)}n.live&&(this.push.on("complete",r.pull.cancel.bind(r.pull)),this.pull.on("complete",r.push.cancel.bind(r.push))),this.on("newListener",(function(e){"change"===e?(v(r.pull,"change",a),v(r.push,"change",c)):"denied"===e?(v(r.pull,"denied",d),v(r.push,"denied",l)):"active"===e?(v(r.pull,"active",m),v(r.push,"active",p)):"paused"===e&&(v(r.pull,"paused",f),v(r.push,"paused",u))})),this.on("removeListener",(function(e){"change"===e?(r.pull.removeListener("change",a),r.push.removeListener("change",c)):"denied"===e?(r.pull.removeListener("denied",d),r.push.removeListener("denied",l)):"active"===e?(r.pull.removeListener("active",m),r.push.removeListener("active",p)):"paused"===e&&(r.pull.removeListener("paused",f),r.push.removeListener("paused",u))})),this.pull.on("removeListener",g("pull")),this.push.on("removeListener",g("push"));var y=Promise.all([this.push,this.pull]).then((function(e){var t={push:e[0],pull:e[1]};return r.emit("complete",t),i&&i(null,t),r.removeAllListeners(),t}),(function(e){if(r.cancel(),i?i(e):r.emit("error",e),r.removeAllListeners(),i)throw e}));this.then=function(e,t){return y.then(e,t)},this.catch=function(e){return y.catch(e)}}h()(ni,v.a),ni.prototype.cancel=function(){this.cancelled=!0,this.state="cancelled",this.emit("cancel")},ni.prototype.ready=function(e,t){var n=this;function i(){n.cancel()}function r(){e.removeListener("destroyed",i),t.removeListener("destroyed",i)}n._readyCalled||(n._readyCalled=!0,e.once("destroyed",i),t.once("destroyed",i),n.once("complete",r),n.once("error",r))},h()(si,v.a),si.prototype.cancel=function(){this.canceled||(this.canceled=!0,this.push.cancel(),this.pull.cancel())},tt.plugin((function(e){e.adapter("idb",un,!0)})).plugin((function(e){e.adapter("http",_n,!1),e.adapter("https",_n,!1)})).plugin(Gn).plugin((function(e){e.replicate=ri,e.sync=oi,Object.defineProperty(e.prototype,"replicate",{get:function(){var e=this;return void 0===this.replicateMethods&&(this.replicateMethods={from:function(t,n,i){return e.constructor.replicate(t,e,n,i)},to:function(t,n,i){return e.constructor.replicate(e,t,n,i)}}),this.replicateMethods}}),e.prototype.sync=function(e,t,n){return this.constructor.sync(this,e,t,n)}})),t.default=tt}.call(this,n(29))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var c,l=[],d=!1,u=-1;function f(){d&&c&&(d=!1,c.length?l=c.concat(l):u=-1,l.length&&p())}function p(){if(!d){var e=a(f);d=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,d=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||d||a(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t),n.d(t,"v1",(function(){return l})),n.d(t,"v3",(function(){return _})),n.d(t,"v4",(function(){return w.a})),n.d(t,"v5",(function(){return k})),n.d(t,"NIL",(function(){return L})),n.d(t,"version",(function(){return A})),n.d(t,"validate",(function(){return d.a})),n.d(t,"stringify",(function(){return s.a})),n.d(t,"parse",(function(){return u}));var i,r,o=n(20),s=n(10),a=0,c=0;var l=function(e,t,n){var l=t&&n||0,d=t||new Array(16),u=(e=e||{}).node||i,f=void 0!==e.clockseq?e.clockseq:r;if(null==u||null==f){var p=e.random||(e.rng||o.a)();null==u&&(u=i=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==f&&(f=r=16383&(p[6]<<8|p[7]))}var m=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:c+1,g=m-a+(h-c)/1e4;if(g<0&&void 0===e.clockseq&&(f=f+1&16383),(g<0||m>a)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=m,c=h,r=f;var v=(1e4*(268435455&(m+=122192928e5))+h)%4294967296;d[l++]=v>>>24&255,d[l++]=v>>>16&255,d[l++]=v>>>8&255,d[l++]=255&v;var y=m/4294967296*1e4&268435455;d[l++]=y>>>8&255,d[l++]=255&y,d[l++]=y>>>24&15|16,d[l++]=y>>>16&255,d[l++]=f>>>8|128,d[l++]=255&f;for(var b=0;b<6;++b)d[l+b]=u[b];return t||Object(s.a)(d)},d=n(11);var u=function(e){if(!Object(d.a)(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};var f=function(e,t,n){function i(e,i,r,o){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof i&&(i=u(i)),16!==i.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+e.length);if(a.set(i),a.set(e,i.length),(a=n(a))[6]=15&a[6]|t,a[8]=63&a[8]|128,r){o=o||0;for(var c=0;c<16;++c)r[o+c]=a[c];return r}return Object(s.a)(a)}try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i};function p(e){return 14+(e+64>>>9<<4)+1}function m(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function h(e,t,n,i,r,o){return m((s=m(m(t,e),m(i,o)))<<(a=r)|s>>>32-a,n);var s,a}function g(e,t,n,i,r,o,s){return h(t&n|~t&i,e,t,r,o,s)}function v(e,t,n,i,r,o,s){return h(t&i|n&~i,e,t,r,o,s)}function y(e,t,n,i,r,o,s){return h(t^n^i,e,t,r,o,s)}function b(e,t,n,i,r,o,s){return h(n^(t|~i),e,t,r,o,s)}var _=f("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,i=0;i<n;i+=8){var r=e[i>>5]>>>i%32&255,o=parseInt("0123456789abcdef".charAt(r>>>4&15)+"0123456789abcdef".charAt(15&r),16);t.push(o)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[p(t)-1]=t;for(var n=1732584193,i=-271733879,r=-1732584194,o=271733878,s=0;s<e.length;s+=16){var a=n,c=i,l=r,d=o;n=g(n,i,r,o,e[s],7,-680876936),o=g(o,n,i,r,e[s+1],12,-389564586),r=g(r,o,n,i,e[s+2],17,606105819),i=g(i,r,o,n,e[s+3],22,-1044525330),n=g(n,i,r,o,e[s+4],7,-176418897),o=g(o,n,i,r,e[s+5],12,1200080426),r=g(r,o,n,i,e[s+6],17,-1473231341),i=g(i,r,o,n,e[s+7],22,-45705983),n=g(n,i,r,o,e[s+8],7,1770035416),o=g(o,n,i,r,e[s+9],12,-1958414417),r=g(r,o,n,i,e[s+10],17,-42063),i=g(i,r,o,n,e[s+11],22,-1990404162),n=g(n,i,r,o,e[s+12],7,1804603682),o=g(o,n,i,r,e[s+13],12,-40341101),r=g(r,o,n,i,e[s+14],17,-1502002290),i=g(i,r,o,n,e[s+15],22,1236535329),n=v(n,i,r,o,e[s+1],5,-165796510),o=v(o,n,i,r,e[s+6],9,-1069501632),r=v(r,o,n,i,e[s+11],14,643717713),i=v(i,r,o,n,e[s],20,-373897302),n=v(n,i,r,o,e[s+5],5,-701558691),o=v(o,n,i,r,e[s+10],9,38016083),r=v(r,o,n,i,e[s+15],14,-660478335),i=v(i,r,o,n,e[s+4],20,-405537848),n=v(n,i,r,o,e[s+9],5,568446438),o=v(o,n,i,r,e[s+14],9,-1019803690),r=v(r,o,n,i,e[s+3],14,-187363961),i=v(i,r,o,n,e[s+8],20,1163531501),n=v(n,i,r,o,e[s+13],5,-1444681467),o=v(o,n,i,r,e[s+2],9,-51403784),r=v(r,o,n,i,e[s+7],14,1735328473),i=v(i,r,o,n,e[s+12],20,-1926607734),n=y(n,i,r,o,e[s+5],4,-378558),o=y(o,n,i,r,e[s+8],11,-2022574463),r=y(r,o,n,i,e[s+11],16,1839030562),i=y(i,r,o,n,e[s+14],23,-35309556),n=y(n,i,r,o,e[s+1],4,-1530992060),o=y(o,n,i,r,e[s+4],11,1272893353),r=y(r,o,n,i,e[s+7],16,-155497632),i=y(i,r,o,n,e[s+10],23,-1094730640),n=y(n,i,r,o,e[s+13],4,681279174),o=y(o,n,i,r,e[s],11,-358537222),r=y(r,o,n,i,e[s+3],16,-722521979),i=y(i,r,o,n,e[s+6],23,76029189),n=y(n,i,r,o,e[s+9],4,-640364487),o=y(o,n,i,r,e[s+12],11,-421815835),r=y(r,o,n,i,e[s+15],16,530742520),i=y(i,r,o,n,e[s+2],23,-995338651),n=b(n,i,r,o,e[s],6,-198630844),o=b(o,n,i,r,e[s+7],10,1126891415),r=b(r,o,n,i,e[s+14],15,-1416354905),i=b(i,r,o,n,e[s+5],21,-57434055),n=b(n,i,r,o,e[s+12],6,1700485571),o=b(o,n,i,r,e[s+3],10,-1894986606),r=b(r,o,n,i,e[s+10],15,-1051523),i=b(i,r,o,n,e[s+1],21,-2054922799),n=b(n,i,r,o,e[s+8],6,1873313359),o=b(o,n,i,r,e[s+15],10,-30611744),r=b(r,o,n,i,e[s+6],15,-1560198380),i=b(i,r,o,n,e[s+13],21,1309151649),n=b(n,i,r,o,e[s+4],6,-145523070),o=b(o,n,i,r,e[s+11],10,-1120210379),r=b(r,o,n,i,e[s+2],15,718787259),i=b(i,r,o,n,e[s+9],21,-343485551),n=m(n,a),i=m(i,c),r=m(r,l),o=m(o,d)}return[n,i,r,o]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(p(t)),i=0;i<t;i+=8)n[i>>5]|=(255&e[i/8])<<i%32;return n}(e),8*e.length))})),w=n(22);function E(e,t,n,i){switch(e){case 0:return t&n^~t&i;case 1:return t^n^i;case 2:return t&n^t&i^n&i;case 3:return t^n^i}}function S(e,t){return e<<t|e>>>32-t}var k=f("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var i=unescape(encodeURIComponent(e));e=[];for(var r=0;r<i.length;++r)e.push(i.charCodeAt(r))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,s=Math.ceil(o/16),a=new Array(s),c=0;c<s;++c){for(var l=new Uint32Array(16),d=0;d<16;++d)l[d]=e[64*c+4*d]<<24|e[64*c+4*d+1]<<16|e[64*c+4*d+2]<<8|e[64*c+4*d+3];a[c]=l}a[s-1][14]=8*(e.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(e.length-1)&4294967295;for(var u=0;u<s;++u){for(var f=new Uint32Array(80),p=0;p<16;++p)f[p]=a[u][p];for(var m=16;m<80;++m)f[m]=S(f[m-3]^f[m-8]^f[m-14]^f[m-16],1);for(var h=n[0],g=n[1],v=n[2],y=n[3],b=n[4],_=0;_<80;++_){var w=Math.floor(_/20),k=S(h,5)+E(w,g,v,y)+b+t[w]+f[_]>>>0;b=y,y=v,v=S(g,30)>>>0,g=h,h=k}n[0]=n[0]+h>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+v>>>0,n[3]=n[3]+y>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),L="00000000-0000-0000-0000-000000000000";var A=function(e){if(!Object(d.a)(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},,function(e,t){
/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function n(e){var t="    ";if(isNaN(parseInt(e)))t=e;else switch(e){case 1:t=" ";break;case 2:t="  ";break;case 3:t="   ";break;case 4:t="    ";break;case 5:t="     ";break;case 6:t="      ";break;case 7:t="       ";break;case 8:t="        ";break;case 9:t="         ";break;case 10:t="          ";break;case 11:t="           ";break;case 12:t="            "}for(var n=["\n"],i=0;i<100;i++)n.push(n[i]+t);return n}function i(){this.step="    ",this.shift=n(this.step)}function r(e,t){return t-(e.replace(/\(/g,"").length-e.replace(/\)/g,"").length)}function o(e,t){return e.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+t+t+"AND ").replace(/ BETWEEN /gi,"~::~"+t+"BETWEEN ").replace(/ CASE /gi,"~::~"+t+"CASE ").replace(/ ELSE /gi,"~::~"+t+"ELSE ").replace(/ END /gi,"~::~"+t+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+t+"ON ").replace(/ OR /gi,"~::~"+t+t+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+t+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+t).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+t+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}i.prototype.xml=function(e,t){var i=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),r=i.length,o=!1,s=0,a="",c=0,l=t?n(t):this.shift;for(c=0;c<r;c++)i[c].search(/<!/)>-1?(a+=l[s]+i[c],o=!0,(i[c].search(/-->/)>-1||i[c].search(/\]>/)>-1||i[c].search(/!DOCTYPE/)>-1)&&(o=!1)):i[c].search(/-->/)>-1||i[c].search(/\]>/)>-1?(a+=i[c],o=!1):/^<\w/.exec(i[c-1])&&/^<\/\w/.exec(i[c])&&/^<[\w:\-\.\,]+/.exec(i[c-1])==/^<\/[\w:\-\.\,]+/.exec(i[c])[0].replace("/","")?(a+=i[c],o||s--):i[c].search(/<\w/)>-1&&-1==i[c].search(/<\//)&&-1==i[c].search(/\/>/)?a=a+=o?i[c]:l[s++]+i[c]:i[c].search(/<\w/)>-1&&i[c].search(/<\//)>-1?a=a+=o?i[c]:l[s]+i[c]:i[c].search(/<\//)>-1?a=a+=o?i[c]:l[--s]+i[c]:i[c].search(/\/>/)>-1?a=a+=o?i[c]:l[s]+i[c]:i[c].search(/<\?/)>-1||i[c].search(/xmlns\:/)>-1||i[c].search(/xmlns\=/)>-1?a+=l[s]+i[c]:a+=i[c];return"\n"==a[0]?a.slice(1):a},i.prototype.json=function(e,t){t=t||this.step;return"undefined"==typeof JSON?e:"string"==typeof e?JSON.stringify(JSON.parse(e),null,t):"object"==typeof e?JSON.stringify(e,null,t):e},i.prototype.css=function(e,t){var i=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),r=i.length,o=0,s="",a=0,c=t?n(t):this.shift;for(a=0;a<r;a++)/\{/.exec(i[a])?s+=c[o++]+i[a]:/\}/.exec(i[a])?s+=c[--o]+i[a]:(/\*\\/.exec(i[a]),s+=c[o]+i[a]);return s.replace(/^\n{1,}/,"")},i.prototype.sql=function(e,t){var i=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),s=i.length,a=[],c=0,l=this.step,d=0,u="",f=0,p=t?n(t):this.shift;for(f=0;f<s;f++)a=f%2?a.concat(i[f]):a.concat(o(i[f],l));for(s=a.length,f=0;f<s;f++){d=r(a[f],d),/\s{0,}\s{0,}SELECT\s{0,}/.exec(a[f])&&(a[f]=a[f].replace(/\,/g,",\n"+l+l)),/\s{0,}\s{0,}SET\s{0,}/.exec(a[f])&&(a[f]=a[f].replace(/\,/g,",\n"+l+l)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(a[f])?u+=p[++c]+a[f]:/\'/.exec(a[f])?(d<1&&c&&c--,u+=a[f]):(u+=p[c]+a[f],d<1&&c&&c--)}return u=u.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},i.prototype.xmlmin=function(e,t){return(t?e:e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns")).replace(/>\s{0,}</g,"><")},i.prototype.jsonmin=function(e){return"undefined"==typeof JSON?e:JSON.stringify(JSON.parse(e),null,0)},i.prototype.cssmin=function(e,t){return(t?e:e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"")).replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},i.prototype.sqlmin=function(e){return e.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")},e.exports=new i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renameHTML=t.newFolderHTML=t.uploadAreaHTML=void 0,t.uploadAreaHTML='<div id="document-upload-container">\n\n    <div id="initial_upload_container">\n      <div id="initial_upload_area">\n        <div id="initial_upload_message">Upload Files</div>\n      </div>\n    </div>\n    \n    <div id="uploading_container">\n      <div class="file_container" id="unpaired_container">\n\n        <div class="file-container-title">Unpaired Documents</div>\n\n        <div id="files_container">\n\n          <div id="mei_container">\n            <div class="file_heading">MEI</div>\n            <div class="file_sort_name">\n              <div>Name</div>\n              <div class="sort_name arrow_btn">&#x22C0;</div>\n            </div>\n            <div class="file_list" id="mei_list">\n              <div class="unpaired_item_container" style="width: 100%; background: #DAEAF1; border-radius: 5px;">\n                <label class="unpaired_item_label">\n                  <input type="radio" class="unpaired_item_radio" name="mei_radio_group" value="create_mei">\n                    <span style="margin-top: auto;margin-left: 3px;">\n                      Create new MEI file\n                    </span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div id="image_container">\n            <div class="file_heading">Images</div>\n            <div class="file_sort_name">\n              <div>Name</div>\n              <div class="sort_name arrow_btn">&#x22C0;</div>\n            </div>\n            <div class="file_list" id="image_list"></div>\n          </div>\n\n        </div>\n\n        <div id="generate-pair-button-container">\n          <div class="action_button" id="make_pair">Make Pair</div>\n        </div>\n      </div>\n\n      <div class="file_container" id="paired_container">\n\n        <div class="file-container-title">Paired Folios</div>\n        <div class="file_sort_name">\n          <div>Name</div>\n          <div class="sort_name arrow_btn">&#x22C0;</div>\n        </div>\n        <div class="folio_list" id="paired_list"></div>\n\n        <div id="upload_button_container">\n          <div class="action_button" id="upload_button">\n            Upload\n            <div id="uploading_spinner">↻</div>\n          </div>\n        </div>\n\n      </div>\n\n      \x3c!--\n      <div class="file_container" id="manuscripts_container">\n        <h2 class="file_heading">Manuscripts</h2>\n        <div class="folio_list" id="manuscript_list"></div>\n      </div>\n      --\x3e\n\n    </div>\n  </div>',t.newFolderHTML='\n    <div id="rename_container">\n      <div id="dashboard_input_container">\n      </div>\n      <div id="rename_buttons_container">\n        <button id="cancel_dashboard">Cancel</button>\n        <button id="confirm_dashboard">Create</button>\n      </div>\n    </div>\n  ',t.renameHTML='\n    <div id="rename_container">\n      <div id="dashboard_input_container">\n      </div>\n      <div id="rename_buttons_container">\n        <button id="cancel_dashboard">Cancel</button>\n        <button id="confirm_dashboard">Confirm</button>\n      </div>\n    </div>\n  '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groupingNotRecognized=void 0,t.groupingNotRecognized=function(){window.confirm("Neon does not recognize this neume grouping. Would you like to create a compound neume?")||document.getElementById("undo").click()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitStaffHandler=void 0;const i=n(5),r=n(3),o=n(23),s=n(14);t.SplitStaffHandler=class{constructor(e,t){this.handler=(e=>{const t=this.staff.id,n=(0,s.getSVGRelCoords)(e.clientX,e.clientY),a={action:"split",param:{elementId:t,x:n.x}};this.neonView.edit(a,this.neonView.view.getCurrentPageURI()).then(async e=>{e&&(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action successful","success"));const n=new o.default(this.neonView,".staff");this.splitDisable(),(0,r.selectAll)([document.querySelector("#"+t)],this.neonView,n);const s=document.getElementById("moreEdit");s&&(s.innerHTML="",s.parentElement.classList.add("hidden"))})}).bind(this),this.keydownListener=(e=>{"Escape"===e.key?this.splitDisable():"Shift"===e.key&&document.body.removeEventListener("click",this.handler,{capture:!0})}).bind(this),this.clickawayHandler=(e=>{null===e.target.closest(".active-page")&&(this.splitDisable(),document.body.removeEventListener("click",this.handler,{capture:!0}))}).bind(this),this.resetHandler=(e=>{"Shift"===e.key&&document.body.addEventListener("click",this.handler,{capture:!0})}).bind(this),this.neonView=e,this.staff=t}startSplit(){this.splitDisable(),document.body.addEventListener("click",this.handler,{capture:!0}),document.body.addEventListener("keydown",this.keydownListener),document.body.addEventListener("keyup",this.resetHandler),document.body.addEventListener("click",this.clickawayHandler),i.queueNotification("Click Where to Split")}splitDisable(){document.body.removeEventListener("keydown",this.keydownListener),document.body.removeEventListener("keyup",this.resetHandler),document.body.removeEventListener("click",this.clickawayHandler),document.body.removeEventListener("click",this.handler,{capture:!0})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitNeumeHandler=void 0;const i=n(5);t.SplitNeumeHandler=class{constructor(e,t){this.handler=(e=>{const t={action:"splitNeume",param:{elementId:this.neume.id,ncId:e.target.parentElement.id}};this.neonView.edit(t,this.neonView.view.getCurrentPageURI()).then(async e=>{e?(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action successful","success")):(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action failed","error")),this.splitDisable()})}).bind(this),this.keydownListener=(e=>{"Escape"===e.key?this.splitDisable():"Shift"===e.key&&document.body.removeEventListener("click",this.handler,{capture:!0})}).bind(this),this.clickawayHandler=(e=>{null===e.target.closest(".active-page")&&(this.splitDisable(),document.body.removeEventListener("click",this.handler,{capture:!0}))}).bind(this),this.resetHandler=(e=>{"Shift"===e.key&&document.body.addEventListener("click",this.handler,{capture:!0})}).bind(this),this.neonView=e,this.neume=t}startSplit(){this.splitDisable(),document.body.addEventListener("click",this.handler,{capture:!0}),document.body.addEventListener("keydown",this.keydownListener),document.body.addEventListener("keyup",this.resetHandler),document.body.addEventListener("click",this.clickawayHandler),i.queueNotification("Click The Beginning of The Second Neume")}splitDisable(){document.body.removeEventListener("keydown",this.keydownListener),document.body.removeEventListener("keyup",this.resetHandler),document.body.removeEventListener("click",this.clickawayHandler),document.body.removeEventListener("click",this.handler,{capture:!0})}}},function(e,t){},function(e,t,n){"use strict";(function(e){t.test=function(){return"function"==typeof e.queueMicrotask},t.install=function(t){return function(){e.queueMicrotask(t)}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){var n=e.MutationObserver||e.WebKitMutationObserver;t.test=function(){return n},t.install=function(t){var i=0,r=new n(t),o=e.document.createTextNode("");return r.observe(o,{characterData:!0}),function(){o.data=i=++i%2}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){t.test=function(){return!e.setImmediate&&void 0!==e.MessageChannel},t.install=function(t){var n=new e.MessageChannel;return n.port1.onmessage=t,function(){n.port2.postMessage(0)}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){t.test=function(){return"document"in e&&"onreadystatechange"in e.document.createElement("script")},t.install=function(t){return function(){var n=e.document.createElement("script");return n.onreadystatechange=function(){t(),n.onreadystatechange=null,n.parentNode.removeChild(n),n=null},e.document.documentElement.appendChild(n),t}}}).call(this,n(9))},function(e,t,n){"use strict";t.test=function(){return!0},t.install=function(e){return function(){setTimeout(e,0)}}},,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateDocName=t.deleteDocument=t.addDocument=t.createManifest=t.fetchUploads=t.db=void 0;const i=n(30),r=n(28),o=n(91);t.db=new r.default("Neon-User-Storage"),t.fetchUploads=async function(){try{return(await new Promise((e,n)=>{t.db.allDocs({include_docs:!0}).then(t=>e(t)).catch(e=>n(e))})).rows.map(e=>({id:e.id,name:e.doc?e.doc.name:"undefined"}))}catch(e){return console.log("Couldn't fetch uploaded documents",e.message),[]}},t.createManifest=function(e,t,n,r){return new Promise(async s=>{const a=JSON.parse(JSON.stringify(o));a["@id"]=e,a.title=t,a.timestamp=(new Date).toISOString();const c=new Promise(e=>{const t=new FileReader;t.addEventListener("load",()=>{e(t.result)}),t.readAsDataURL(n)}),l=new Promise(e=>{const t=new FileReader;t.addEventListener("load",()=>{e(t.result)}),t.readAsDataURL(r)}),d=await c,u=await l;a.image=u,a.mei_annotations=[{id:(0,i.v4)(),type:"Annotation",body:d,target:u}],s(a)})},t.addDocument=function(e,n,i,r){return new Promise((o,s)=>{t.db.put({_id:e,name:n,type:r?"page":"manuscript",_attachments:{manifest:{content_type:"application/ld+json",data:i}}}).then(()=>{o(!0)}).catch(t=>{window.alert(`Error Uploading Document: ${t.message}, title: ${n}, id: ${e}.`),s(!1)})})},t.deleteDocument=function(e){return new Promise((n,i)=>{t.db.get(e).then(e=>{t.db.remove(e).then(e=>{n(!0)}).catch(e=>{console.log(e),i(e)})}).catch(e=>{console.log(e),i(e)})})},t.updateDocName=function(e,n){return new Promise((i,r)=>{t.db.get(e).then(o=>{t.db.getAttachment(e,"manifest").then(e=>{e.text().then(e=>{const s=JSON.parse(e);o.name=n,s.title=n;const a=new Blob([JSON.stringify(s,null,2)],{type:"application/ld+json"});o._attachments.manifest={content_type:"application/ld+json",data:a},t.db.put(o).then(()=>i(!0)).catch(e=>r(e))}).catch(e=>r(e))}).catch(e=>r(e))}).catch(e=>r(e))})}},,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadDashboard=t.updateDashboard=void 0;const i=n(25),r=n(46),o=n(25),s=n(93),a=n(94),c=n(97),l=n(17),d=document.querySelector("#fs-content-container"),u=document.querySelector("#main-section-content"),f=document.querySelector("#open-doc"),p=document.querySelector("#remove-doc"),m=document.querySelector("#nav-path-container");let h=document.querySelector("#fs-back-btn"),g=document.querySelector("#fs-empty-btn"),v=document.querySelector("#fs-delete-btn");const y=document.querySelector("#upload-new-doc-button"),b=document.querySelector("#add-folder-button"),_=new s.ShiftSelectionManager,w=(0,o.FileSystemManager)(),E=(0,s.dashboardState)(),S=document.querySelector(".main-section-content"),k=document.querySelector(".right-click-file-menu"),L=document.querySelector(".context-menu-items-wrapper");let A=!1,x=!1,C=null,T=!1;function N(){y.classList.contains("active")&&(0,a.InitUploadArea)(E.getParentFolder())}function q(e,t){const n=(i=t?{manifest:e}:{storage:e},Object.keys(i).map(e=>encodeURIComponent(e)+"="+encodeURIComponent(i[e])).join("&"));var i;window.open("./editor.html?"+n,"_blank")}function O(e){const t=E.getEntries().at(e);E.setSelection(e,!0);document.getElementById(t.id).classList.add("selected")}function I(e){const t=E.getEntries().at(e).id;E.setSelection(e,!1);document.getElementById(t).classList.remove("selected")}function B(){Array.from(document.querySelectorAll(".document-entry.selected")).forEach(e=>e.classList.remove("selected")),E.resetSelection()}async function M(e,t,n){if("folder"===t.type){n.addEventListener("dblclick",(async function(){return await z([...E.getFolderPath(),t])}),!1)}else n.addEventListener("dblclick",j,!1);!function(e,t){e.addEventListener("click",(function(e){P(t)}),!1)}(n,e),function(e,t){e.addEventListener("contextmenu",e=>{e.stopPropagation(),e.preventDefault(),(T||1===E.getSelectedEntries().length)&&B(),O(t),ne("selection-options",e.clientX,e.clientY),k.classList.remove("hidden"),T=!0}),S.addEventListener("click",e=>{if(T){let t=e.target;if(t.parentElement.classList.contains("document-entry")&&(t=t.parentElement),k.classList.add("hidden"),T=!1,t.classList.contains("document-entry")){const e=W(t.id);P(E.getIndexByEntryName(e.name))}else B()}})}(n,e)}function P(e){A||x?A?E.getSelection()[e]?(I(e),_.setStart(E.getSelection().lastIndexOf(!0))):(O(e),_.setStart(e)):x&&(_.getPrevSelection().forEach(e=>{I(e)}),_.setEnd(e),_.getSelection(E.getSelection()).forEach(e=>{O(e)})):(B(),O(e),_.setStart(e)),V(),U()}function j(){if(f.classList.contains("active"))if(1!==E.getSelectedFolders().length&&1!==E.getSelectedTrash().length)E.getSelectedFiles().forEach(e=>function(e){const t=e.metadata.document;if(void 0!==typeof t){const n="sample"===t;q(e.id,n)}}(e)),_.reset(),B(),V();else{z([...E.getFolderPath(),E.getSelectedEntries()[0]])}}function F(){if(!p.classList.contains("active"))return;const e=E.getSelectedEntries(),t=E.getParentFolder(),n=E.getTrashFolder(),r=(new Date).toLocaleString();for(let t of e)t=i.FileSystemTools.addMetadata(t,{removed_on:r,recover_folder:E.getFolderPathNames()});K(e,t,n)}function D(e,t){return new Promise((n,o)=>{(0,r.deleteDocument)(e.id).then(()=>{i.FileSystemTools.removeEntry(e,t),n(!0)}).catch(()=>o(!1))})}function R(e,t){return new Promise(n=>{const r=e.children.map(t=>"file"===t.type?D(t,e):"folder"===t.type?R(t,e):Promise.resolve(!1));Promise.all(r).then(()=>{i.FileSystemTools.removeEntry(e,t),n(!0)}).catch(()=>n(!1))})}function $(){const e=E.getSelectedEntries(),t=`Are you sure you want to delete:\n${n=e,n.map(e=>`- ${e.name} (${e.type})`).join("\n")}\nThis action is irreversible.`;var n;if(window.confirm(t)){const t=e.map(e=>"file"===e.type?D(e,E.getParentFolder()):"folder"===e.type?R(e,E.getParentFolder()):void 0);Promise.all(t).then(()=>{z(E.getFolderPath())}).catch(e=>console.debug("failed to delete files: ",e))}}function H(){const e=E.getTrashFolder();if(!e)return void console.error("Trash folder not found.");if(window.confirm("Are you sure you want to delete all the files in Trash Folder?\nThis action is irreversible.")){const t=e.children.map(t=>"file"===t.type?D(t,e):"folder"===t.type?R(t,e):Promise.resolve(!1));Promise.all(t).then(()=>{z(E.getFolderPath())}).catch(e=>console.debug("failed to delete files: ",e))}}function V(){E.getParentFolder().metadata.immutable||E.getSelectedEntries()[0]&&E.getSelectedEntries()[0].metadata.immutable?(y.classList.remove("active"),b.classList.remove("active"),p.classList.remove("active"),E.getSelectedEntries().length?f.classList.add("active"):f.classList.remove("active")):E.isInTrash()?(y.classList.remove("active"),b.classList.remove("active"),p.classList.remove("active"),f.classList.remove("active")):E.getSelectedTrash().length?(f.classList.add("active"),p.classList.remove("active"),y.classList.remove("active"),b.classList.remove("active")):E.getSelectedEntries().length?(f.classList.add("active"),p.classList.add("active"),y.classList.remove("active"),b.classList.remove("active")):(f.classList.remove("active"),p.classList.remove("active"),y.classList.add("active"),b.classList.add("active"))}function U(){!function(){const e=h.cloneNode(!0);h.parentNode.replaceChild(e,h),1===E.getFolderPath().length?(e.classList.remove("active"),e.setAttribute("disabled","true")):(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",G),e.addEventListener("ondragenter",()=>e.classList.add("active")),e.addEventListener("ondragleave",()=>e.classList.remove("active")),J(e,E.getParentFolder(),E.getFolderPath().at(-2))),h=e}(),function(){const e=g.cloneNode(!0);g.parentNode.replaceChild(e,g);const t=E.getParentFolder();"trash"===t.type||E.isInTrash()?(e.style.display="",t.children.length&&!E.getSelectedEntries().length&&"trash"===t.type?(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",H)):(e.classList.remove("active"),e.setAttribute("disabled","true"))):e.style.display="none",g=e}(),function(){const e=v.cloneNode(!0);v.parentNode.replaceChild(e,v),"trash"===E.getParentFolder().type||E.isInTrash()?(e.style.display="",E.getSelectedEntries().length?(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",$)):(e.classList.remove("active"),e.setAttribute("disabled","true"))):e.style.display="none",v=e}()}async function G(){const e=E.getFolderPath().slice(0,-1);await z(e)}function W(e){return E.getEntries().find(t=>t.id===e)}async function z(e){e||(e=E.getFolderPath()),E.setFolderPath(e);const t=E.getParentFolder();d.innerHTML="",_.reset(),E.setEntries(t.children),t.children.forEach(async(e,t)=>{const n=function(e){const t=document.createElement("div");t.classList.add("document-entry"),t.setAttribute("draggable","true");const n=document.createElement("img");n.classList.add("document-icon");const i=document.createElement("div");switch(i.innerText=e.name,e.type){case"folder":t.classList.add("folder-entry"),t.setAttribute("id",e.id),n.src="./Neon-gh/assets/img/folder-icon.svg",t.setAttribute("drop-id",e.id),t.classList.add("drop-target");break;case"trash":t.classList.add("folder-entry"),t.setAttribute("id",e.id),n.src="./Neon-gh/assets/img/trash-icon.svg",t.setAttribute("drop-id",e.id),t.classList.add("drop-target");break;case"file":t.classList.add("file-entry"),t.setAttribute("id",e.id),"manuscript"===e.metadata.type?(t.classList.add("manuscript-entry"),n.src="./Neon-gh/assets/img/manuscript-icon.svg"):"folio"===e.metadata.type?(t.classList.add("folio-entry"),n.src="./Neon-gh/assets/img/folio-icon.svg"):n.src="./Neon-gh/assets/img/folio-icon.svg"}return t.appendChild(n),t.appendChild(i),t}(e);d.appendChild(n),await M(t,e,n)}),V(),function(){m.innerHTML="";const e=E.getFolderPath().map((e,t)=>{const n=document.createElement("div");n.classList.add("nav-path-section"),n.innerHTML=e.name;const i=E.getFolderPath().slice(0,t+1);return n.addEventListener("click",async()=>await z(i)),J(n,E.getParentFolder(),i.at(-1)),n});e.forEach((t,n)=>{if(m.appendChild(t),n!==e.length-1){const e=document.createElement("div");e.classList.add("nav-path-seperator"),e.innerHTML=" / ",m.appendChild(e)}})}(),U();const n=document.getElementById("info-badge");E.isInTrash()?(n.textContent="Files will be deleted after 30 days",n.style.background="#9DB2BF"):(n.textContent="",n.style.background=""),t.children.forEach(e=>{const n=document.getElementById(e.id);n.addEventListener("dragstart",e=>{e.dataTransfer.effectAllowed="move",C=e.target}),"folder"!==e.type&&"trash"!==e.type||J(n,t,e)}),w.setFileSystem(E.getFolderPath().at(0))}function J(e,t,n){e.addEventListener("dragenter",t=>{t.preventDefault(),e.classList.add("dragenter")}),e.addEventListener("dragleave",t=>{t.preventDefault(),e.classList.remove("dragenter")}),e.addEventListener("dragover",e=>e.preventDefault()),e.addEventListener("drop",function(e,t){return n=>{n.preventDefault();const i=W(C.getAttribute("id"));i&&i!==t&&K([i],e,t)}}(t,n))}function K(e,t,n){const r=[];e.forEach(e=>{"trash"===n.type&&n.children.some(t=>t.name===e.name)&&(e.name=function(e){const t=(new Date).toLocaleString();return e+" - "+t}(e.name));const o=i.FileSystemTools.canMoveEntry(e,t,n);o.succeeded?i.FileSystemTools.moveEntry(e,t,n):r.push(o.error)}),r.filter((e,t,n)=>n.indexOf(e)===t),r.length>0&&window.alert(r.join("\n")),z()}function X(){const e=new l.ModalWindow;e.setModalWindowView(l.ModalWindowView.MOVE_TO),e.openModalWindow();const t=E.getSelectedEntries(),n=E.getParentFolder(),i=function(e){const t=document.createElement("ul");return t.id="tree-root",t.appendChild(function e(t,n,i){const r=document.createElement("li"),o=document.createElement("div");o.classList.add("tree-li-container");const s=document.createElement("div");s.classList.add("tree-name"),s.innerHTML=t.name,s.addEventListener("click",()=>{document.querySelectorAll(".tree-name").forEach(e=>e.classList.remove("selected")),s.classList.add("selected")}),s.addEventListener("dblclick",()=>{n(t)});if(t.children.every(e=>"folder"!==e.type))return r.appendChild(o),o.appendChild(s),r;const a=document.createElement("ul"),c=document.createElement("div");c.classList.add("tree-arrow"),c.innerHTML="▶",i<2&&a.classList.add("active");i<2&&c.classList.add("active");return c.addEventListener("click",()=>{c.classList.toggle("active"),a.classList.toggle("active")}),r.appendChild(o),o.appendChild(c),o.appendChild(s),r.appendChild(a),t.children.forEach(t=>{if("folder"===t.type){const r=e(t,n,i+1);a.appendChild(r)}}),r}(E.root(),e,0)),t}(i=>{e.hideModalWindow(),K(t,n,i)}),r=document.createElement("div");r.classList.add("tree-container"),r.appendChild(i);const o=document.getElementById("neon-modal-window-content-container");o.innerHTML='<span class="move-menu-msg">Double-click the folder you want to move your items to!</span>',o.appendChild(r)}function Y(){if(!b.classList.contains("active"))return;const e=new l.ModalWindow;e.setModalWindowView(l.ModalWindowView.NEW_FOLDER),e.openModalWindow();const t=document.getElementById("dashboard_input_container"),n=document.getElementById("cancel_dashboard"),i=document.getElementById("confirm_dashboard"),r=document.createElement("input");r.id="dashboard_input",r.type="text",r.placeholder="Untitled Folder",r.value="Untitled Folder",t.appendChild(r),r.select(),r.focus(),n.addEventListener("click",()=>e.hideModalWindow()),i.addEventListener("click",()=>Q(e,r.value)),t.addEventListener("keydown",t=>{"Escape"===t.key?e.hideModalWindow():"Enter"===t.key&&Q(e,r.value)})}function Q(e,t){te(t)?(window.alert("The folder name already exists in the current folder!"),Y()):(e.hideModalWindow(),function(e){const t=document.createElement("div");t.classList.add("document-entry"),t.classList.add("folder-entry"),t.setAttribute("id","new-folder");const n=i.FileSystemTools.createFolder(e);i.FileSystemTools.addEntry(n,E.getParentFolder())?(t.setAttribute("id",e),z()):t.remove()}(t))}function Z(){const e=new l.ModalWindow;e.setModalWindowView(l.ModalWindowView.RENAME),e.openModalWindow();const t=document.getElementById("dashboard_input_container"),n=document.getElementById("cancel_dashboard"),i=document.getElementById("confirm_dashboard"),r=document.createElement("input");r.id="dashboard_input",r.type="text";const o=E.getSelectedEntries()[0].name;r.placeholder=o,r.value=o,t.appendChild(r),r.select(),r.focus(),n.addEventListener("click",()=>e.hideModalWindow()),i.addEventListener("click",()=>ee(e,r.value,o)),t.addEventListener("keydown",t=>{"Escape"===t.key?e.hideModalWindow():"Enter"===t.key&&ee(e,r.value,o)})}function ee(e,t,n){if(t===n)e.hideModalWindow();else if(te(t))window.alert("The filename already exists in the current folder!"),Z();else{e.hideModalWindow();!function(e,t){if(i.FileSystemTools.renameEntry(e,E.getParentFolder(),t))if("file"===e.type){const n=e;(0,r.updateDocName)(n.id,t).then(()=>{z()})}else z()}(E.getSelectedEntries()[0],t)}}function te(e){return E.getParentFolder().children.some(t=>t.name===e)}function ne(e,t,n){switch(e){case"selection-options":const e=E.getSelectedFiles().length,t=E.getSelectedFolders().length,n=E.getSelectedTrash().length;e||t||!n?E.getFolderPath().length>1&&"Trash"==E.getFolderPath().at(1).name?(L.innerHTML=c.trashEntryOptions,ie("trash-entry-options")):1!==e||t||n?e>1&&!t&&!n?(L.innerHTML=c.multiFileOptions,ie("multi-file-options")):e>=1&&t>=1&&!n?(L.innerHTML=c.folderAndFileOptions,ie("folder-and-file-options")):e||1!==t||n?!e&&t>1&&!n&&(L.innerHTML=c.multiFolderOptions,ie("multi-folder-options")):(L.innerHTML=c.singleFolderOptions,ie("single-folder-options")):(L.innerHTML=c.singleFileOptions,ie("single-file-options")):(L.innerHTML=c.trashFolderOptions,ie("trash-folder-options"));break;default:L.innerHTML=c.defaultOptions,ie("default")}if(E.getParentFolder().metadata.immutable||E.getSelectedEntries()[0]&&E.getSelectedEntries()[0].metadata.immutable||E.isInTrash()){const e=document.getElementById("cm-remove-btn"),t=document.getElementById("cm-rename-btn"),n=document.getElementById("cm-move-btn"),i=document.getElementById("cm-upload-doc-btn"),r=document.getElementById("cm-new-folder-btn");e&&e.classList.add("disabled"),t&&t.classList.add("disabled"),n&&n.classList.add("disabled"),i&&i.classList.add("disabled"),r&&r.classList.add("disabled")}k.style.left=t+"px",k.style.top=n+"px",k.classList.remove("hidden")}function ie(e){const t="context-menu-item-wrapper";switch(e){case"single-file-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{k.classList.add("hidden"),j()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{k.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-rename-btn`).addEventListener("click",e=>{k.classList.add("hidden"),Z()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{k.classList.add("hidden"),X()});break;case"multi-file-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{k.classList.add("hidden"),j()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{k.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{k.classList.add("hidden"),X()});break;case"folder-and-file-options":document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{k.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{k.classList.add("hidden"),X()});break;case"single-folder-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{k.classList.add("hidden"),j()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{k.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-rename-btn`).addEventListener("click",e=>{k.classList.add("hidden"),Z()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{k.classList.add("hidden"),X()});break;case"multi-folder-options":document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{k.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{k.classList.add("hidden"),X()});break;case"trash-folder-options":document.querySelector(`.${t}#cm-empty-trash-btn`).addEventListener("click",e=>{k.classList.add("hidden"),H()});break;case"trash-entry-options":document.querySelector(`.${t}#cm-recover-btn`).addEventListener("click",e=>{k.classList.add("hidden"),function(){const e=E.getSelectedEntries(),t=E.getParentFolder();for(let n of e){const e=n.metadata.recover_folder,r=E.getFolderPathByNames(e);if(r){n=i.FileSystemTools.removeMetadata(n,["removed_on","recover_folder"]);const e=/ - \d{1,2}\/\d{1,2}\/\d{4}, \d{1,2}:\d{2}:\d{2} [APMapm]{2}$/;e.test(n.name)&&(n.name=n.name.replace(e,"")),K([n],t,r)}}}()}),document.querySelector(`.${t}#cm-delete-btn`).addEventListener("click",e=>{k.classList.add("hidden"),$()});break;default:document.querySelector(`.${t}#cm-upload-doc-btn`).addEventListener("click",e=>{k.classList.add("hidden"),N()}),document.querySelector(`.${t}#cm-new-folder-btn`).addEventListener("click",e=>{k.classList.add("hidden"),Y()})}}function re(e){E.getTrashFolder()||w.newTrash(e);const t=E.getTrashFolder(),n=new Date,i=new Date(n.getTime()-2592e6);t.children.forEach(e=>{(e=>{if(e.metadata&&e.metadata.removed_on){return new Date(e.metadata.removed_on)<=i}return!1})(e)&&("file"===e.type?D(e,t):"folder"===e.type&&R(e,t))})}null==f||f.addEventListener("click",j),null==p||p.addEventListener("click",F),null==y||y.addEventListener("click",N),null==b||b.addEventListener("click",Y),window.addEventListener("keydown",e=>{e.metaKey&&(A=!0),e.shiftKey&&(x=!0),"Escape"===e.key&&(B(),_.reset(),V(),U())}),window.addEventListener("keyup",e=>{e.metaKey||(A=!1),e.shiftKey||(x=!1)}),null==u||u.addEventListener("click",e=>{const t=e.target;Boolean(t.closest(".document-entry"))||(B(),_.reset(),V(),U())}),t.updateDashboard=z;t.loadDashboard=async()=>{const e=await w.getRoot();E.root(e),re(e),z([e]),document.querySelector(".main-section").addEventListener("contextmenu",e=>{e.preventDefault(),B(),ne("default",e.clientX,e.clientY)}),document.querySelector(".main-section").addEventListener("click",e=>{k.classList.add("hidden")})}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0});(0,n(56).loadDashboard)(),null===(i=document.querySelector("#home-link"))||void 0===i||i.setAttribute("href","https://ddmal.music.mcgill.ca/Neon")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EntryType=void 0,function(e){e.Folder="folder",e.Trash="trash",e.File="file"}(t.EntryType||(t.EntryType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemTools=void 0;const i=n(25),r=n(16),o=(e,t,n,r)=>{const o={};return t===i.EntryType.File?{name:e,type:t,id:n,metadata:o}:{name:e,type:t,id:n,children:r,metadata:o}};const s=(e,t)=>{const n=t.children.some(t=>t.name===e.name),i=t.metadata.immutable,r={succeeded:!1,error:""};return n?r.error=`Duplicate name: ${e.name} already exists in ${t.name}.`:i?r.error=t.name+" is immutable.":r.succeeded=!0,r},a=(e,t)=>{const n=-1!==t.children.findIndex(t=>t.id===e.id),i=t.metadata.immutable,r=e.metadata.immutable,o={succeeded:!1,error:""};return n?i?o.error=t.name+" is immutable.":r?o.error=e.name+" is immutable.":o.succeeded=!0:o.error=`${e.name} does not exist in ${t.name}.`,o},c=(e,t,n)=>{const r=e===n,o=n.children.some(t=>t.name===e.name),s=t.metadata.immutable,a=n.metadata.immutable,c=-1!==t.children.findIndex(t=>t.id===e.id),l=e.type==i.EntryType.Folder&&function e(t,n){return n.children.filter(e=>e.type===i.EntryType.Folder).map(n=>n===t||e(t,n)).some(e=>!0===e)}(n,e),d={succeeded:!1,error:""};return r?d.error=`Cannot move ${e.name} to itself.`:o?d.error=`Duplicate name: ${e.name} already exists in ${n.name}.`:s?d.error=t.name+" is immutable.":a?d.error=n.name+" is immutable.":c?l?d.error=`Cannot move ${e.name} into a its own subfolder, ${n.name}.`:d.succeeded=!0:d.error=`${e.name} does not exist in ${t.name}.`,d},l=(e,t,n)=>{const i={succeeded:!1,error:""};return t.children.some((t,n,i)=>t.name===e.name&&n!==i.indexOf(t))?i.error=`Duplicate name: ${n} already exists in ${t.name}.`:i.succeeded=!0,i},d=(e,t)=>{const{succeeded:n,error:r}=s(e,t);return n?(t.children.push(e),(o=t).children.sort((e,t)=>e.name.localeCompare(t.name)),o.children.sort((e,t)=>e.type===i.EntryType.File&&t.type===i.EntryType.Folder?1:e.type===i.EntryType.Folder&&t.type===i.EntryType.File?-1:0),!0):(console.error(r),!1);var o},u=(e,t,n=!1)=>{const{succeeded:i,error:r}=a(e,t);if(i||n){const n=t.children.indexOf(e);return t.children.splice(n,1),!0}return console.error(r),!1};t.FileSystemTools={createFolder:e=>o(e,i.EntryType.Folder,(0,r.uuidv4)(),[]),createTrash:e=>o(e,i.EntryType.Trash,(0,r.uuidv4)(),[]),createFile:(e,t)=>o(e,i.EntryType.File,t),moveEntry:function(e,t,n){const i=c(e,t,n);if(i.succeeded){if(u(e,t,!0)){if(d(e,n))return!0;console.error(`Moving: failed to add ${e.name} to ${n.name}`)}else console.error(`Moving: failed to remove ${e.name} from ${t.name}`)}else console.error(i.error);return!1},canAddEntry:s,canRemoveEntry:a,canMoveEntry:c,canRenameEntry:l,addEntry:d,removeEntry:u,addMetadata:function(e,t){return Object.entries(t).forEach(([t,n])=>{e.metadata[t]=n}),e},removeMetadata:function(e,t){return t.forEach(t=>{delete e.metadata[t]}),e},getAllNames:e=>e.children.map(e=>e.name),renameEntry:(e,t,n)=>{const{succeeded:i,error:r}=l(e,t,n);return i?(e.name=n,!0):(console.error(r),!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemManager=void 0;const i=n(25),r=n(46),o=n(92);t.FileSystemManager=()=>{function e(e){try{window.localStorage.setItem("neon-fs",JSON.stringify(e))}catch(e){return console.error(e),window.alert("Error saving file system"),!1}return!0}async function t(){try{const t=window.localStorage.getItem("neon-fs");if(t){return JSON.parse(t)}{const t=i.FileSystemTools.createFolder("Home");return function(e){const t=o.samples.map(([e,t])=>{const n=i.FileSystemTools.createFile(e,e);return"folio"===t?i.FileSystemTools.addMetadata(n,{type:"folio",document:"sample",immutable:!0}):"manuscript"===t&&i.FileSystemTools.addMetadata(n,{type:"manuscript",document:"sample",immutable:!0}),n}),n=i.FileSystemTools.createFolder("Samples");t.forEach(e=>{i.FileSystemTools.addEntry(e,n)}),i.FileSystemTools.addEntry(n,e),i.FileSystemTools.addMetadata(n,{immutable:!0})}(t),n(t),await async function(e){const t=await(0,r.fetchUploads)();return t.map(e=>i.FileSystemTools.createFile(e.name,e.id)).forEach(t=>{i.FileSystemTools.addEntry(t,e)}),e}(t),e(t),t}}catch(e){console.error(e),window.alert("Error loading file system")}}function n(e){const t=i.FileSystemTools.createTrash("Trash");i.FileSystemTools.addEntry(t,e)}return{getRoot:async function(){return await t()},setFileSystem:e,getFileSystem:t,newTrash:n}}},function(e){e.exports=JSON.parse('{"@context":["http://www.w3.org/ns/anno.jsonld",{"schema":"http://schema.org/","title":"schema:name","timestamp":"schema:dateModified","image":{"@id":"schema:image","@type":"@id"},"mei_annotations":{"@id":"Annotation","@type":"@id","@container":"@list"}}]}')},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.samples=void 0,t.samples=[["CDN-Hsmu_M2149.L4_001r","folio"],["CDN-Hsmu_M2149.L4_002r","folio"],["CH-E_611_024r","folio"],["CH-E_611_026r","folio"],["CH-E_611_028r","folio"],["Salzinnes","manuscript"]]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dashboardState=t.ShiftSelectionManager=void 0;t.ShiftSelectionManager=class{constructor(){this.prevSelection=[],this.reset()}setStart(e){this.reset(),this.start=Math.max(e,0)}setEnd(e){this.end=e}reset(){this.start=0,this.end=-1,this.prevSelection.splice(0)}getPrevSelection(){return this.prevSelection}getSelection(e){let t,n;if(-1===this.end)return[];this.end<this.start?(t=this.end,n=this.start+1):(t=this.start,n=this.end+1);const i=Array.from({length:n-t},(e,n)=>n+t).filter(t=>!e[t]);return this.prevSelection=i,i}},t.dashboardState=function(){let e=[],t=[],n=[],i=null;function r(e){return e&&(i=e),i}function o(){return e.filter((e,n)=>t[n])}return{root:r,setEntries:function(n){e=n,t=Array(n.length).fill(!1)},getEntries:function(){return e},getIndexByEntryName:function(t){return e.findIndex(e=>e.name===t)},setSelection:function(e,n){t[e]=n},getSelection:function(){return t},resetSelection:function(){t.fill(!1)},setFolderPath:function(e){n=e},getFolderPath:function(){return n},getFolderPathNames:function(){return n.map(e=>e.name)},getFolderPathByNames:function(e){let t=r();e=e.slice(1);for(const n of e){const e=t.children.find(e=>e.name===n);if(!e||"folder"!==e.type)return void console.debug("failed to find folder: ",n);t=e}return t},getParentFolder:function(){return n.at(-1)},getTrashFolder:function(){return r().children.filter(e=>"trash"===e.type)[0]},getSelectedEntries:o,getSelectedFolders:function(){return o().filter(e=>"folder"===e.type)},getSelectedTrash:function(){return o().filter(e=>"trash"===e.type)},getSelectedFiles:function(){return o().filter(e=>"file"===e.type)},isInTrash:function(){return n.some(e=>"trash"===e.type)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InitUploadArea=void 0;const i=n(17),r=n(95),o=n(56);t.InitUploadArea=function(e){const t=new i.ModalWindow;t.setModalWindowView(i.ModalWindowView.DOCUMENT_UPLOAD),t.openModalWindow();const n=document.querySelector("#make_pair"),s=document.querySelector("#upload_button");n.addEventListener("click",r.handleMakePair),s.addEventListener("click",()=>async function(e,t){const n=document.querySelector("#uploading_spinner");n.classList.add("visible"),(0,r.handleUploadAllDocuments)(t).then(()=>{setTimeout(async()=>{await(0,o.updateDashboard)(),n.classList.remove("visible"),e.hideModalWindow()},2e3)}).catch(t=>{console.log("One or more uploads rejected: ",t),setTimeout(async()=>{await(0,o.updateDashboard)(),n.classList.remove("visible"),e.hideModalWindow()},2e3)})}(t,e));const a=document.createElement("input");a.type="file",a.multiple=!0,a.addEventListener("change",(function(){const e=a.files,t=Array.from(e),n=(0,r.addNewFiles)(t);if(0!==n.length){const e=n.map(e=>e.name);window.alert("The following files are not .mei, .png, .jpeg, or .jsonld files: \n\n"+e.join("\n"))}a.value=null}));const c=document.querySelector("#initial_upload_area");c.onclick=()=>a.click(),c.ondragleave=()=>c.classList.remove("over"),c.ondragover=e=>{e.stopPropagation(),e.preventDefault(),c.classList.add("over"),e.dataTransfer.dropEffect="copy"},c.ondrop=e=>{e.stopPropagation(),e.preventDefault(),c.classList.remove("over");const t=e.dataTransfer.files,n=Array.from(t),i=(0,r.addNewFiles)(n);if(0!==i.length){const e=i.map(e=>e.name);window.alert("The following files are not .mei, .png, .jpeg, or .jsonld files: \n\n"+e.join("\n"))}},document.querySelectorAll(".sort_name").forEach(e=>{e.addEventListener("click",()=>(0,r.sortFileByName)(e))})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fnConflictHandler=t.formatFilename=t.sortFileByName=t.handleUploadAllDocuments=t.handleMakePair=t.addNewFiles=void 0;const i=n(30),r=n(96),o=n(46),s=n(25),a=r.default.getInstance();function c(e,t){if("mei"!==t&&"image"!==t)return;const n="mei"===t?"mei_radio_group":"image_radio_group",r=(0,i.v4)(),o=document.createElement("div");o.className="unpaired_item_container";const s=document.createElement("input");s.type="radio",s.className="unpaired_item_radio",s.name=n,s.value=e,s.id=r;const a=document.createElement("label");a.className="unpaired_item_label",a.setAttribute("for",r);const c=document.createElement("span");c.innerText=l(e,50),c.setAttribute("style","margin-top: auto; margin-left: 3px;");const d=document.createElement("img");return d.className="unpaired_del_btn",d.src="/Neon/Neon-gh/assets/img/unpaired-remove-doc.svg",d.title="delete",a.appendChild(s),a.appendChild(c),o.appendChild(a),o.appendChild(d),d.addEventListener("click",(function(){o.remove()})),o}function l(e,t){const n=Math.floor(t/2),i=e.length;return i<=t?e:`${e.substring(0,n-1)}...${e.substring(i-n+2,i)}`}function d(e,t){let n=e,i=1;for(;t.includes(n);)n=`${e}(${i})`,i++;return n}a.setMeiTemplate("samples/mei/mei_template.mei"),t.addNewFiles=function(e){const t=document.querySelector("#mei_list"),n=document.querySelector("#image_list"),i=[];return e.forEach(e=>{const r=e.name.split(".").pop();if("mei"===r){const n=c(e.name,"mei");t.appendChild(n),a.addFile(e)}else if(["png","jpg","jpeg"].includes(r)){const t=c(e.name,"image");n.appendChild(t),a.addFile(e)}else"jsonld"===r||i.push(e)}),i},t.handleMakePair=function(){const e=document.querySelector("#paired_list"),t=document.querySelector('input[name="mei_radio_group"]:checked'),n=document.querySelector('input[name="image_radio_group"]:checked');if(null===t||null===n)return;let i=t.value;const r=n.value;let o=!1;if("create_mei"===t.value){o=!0;const e=r.split(".");e.length>1&&e.pop(),e.push("mei"),i=e.join(".");const t=a.createMeiFile(i);a.addFile(t)}const s=i.substring(0,i.length-4),d=function(e,t,n){const i=document.querySelector("#mei_list"),r=document.querySelector("#image_list"),o=document.createElement("div");o.className="folio_item",o.setAttribute("mei",t),o.setAttribute("image",n);const s=document.createElement("div");function d(){o.remove();const s=a.isCreatedFolio(e);if(a.removeFolio(e),!s){const e=c(t,"mei");i.appendChild(e)}const l=c(n,"image");r.appendChild(l)}s.classList.add("folio-filename"),s.innerHTML=l(e,50),o.appendChild(s);const u=document.createElement("img");return u.className="unpair_btn",u.src="/Neon/Neon-gh/assets/img/unpair-doc.svg",u.title="unpair",u.addEventListener("click",d),o.appendChild(u),o}(s,i,r);e.appendChild(d),a.addFolio(s,i,r,o),o||t.parentElement.parentElement.remove(),n.parentElement.parentElement.remove()},t.handleUploadAllDocuments=async function(e){const t=[...a.getFolios().map(async([t,n,r])=>{const a=(0,i.v4)();return await async function(e,t,n,i,r){return(0,o.createManifest)(e,t,n,i).then(n=>{const i=new Blob([JSON.stringify(n,null,2)],{type:"application/ld+json"});return(0,o.addDocument)(e,t,i,!0)}).then(n=>{if(n){const n=d(t,s.FileSystemTools.getAllNames(r)),i=(new Date).toLocaleString(),o=s.FileSystemTools.createFile(n,e),a=s.FileSystemTools.addMetadata(o,{type:"folio",created_on:i});return s.FileSystemTools.addEntry(a,r)}return console.log("failed to uploadFolio: "+t),!1})}(a,t,n,r,e)})].map(e=>Promise.resolve(e).then(e=>({status:"fulfilled",value:e}),e=>({status:"rejected",reason:e})));return a.clear(),Promise.all(t)},t.sortFileByName=async function(e){const t=e.parentElement.nextElementSibling,n=Array.from(t.children);let i=e.classList.contains("arrow-up");i?(e.classList.remove("arrow-up"),e.classList.add("arrow-down"),e.innerHTML="&#x22C1;"):(e.classList.remove("arrow-down"),e.classList.add("arrow-up"),e.innerHTML="&#x22C0;"),i=!i,n.sort((e,t)=>{const n=e.textContent.trim(),r=t.textContent.trim();return i?n.localeCompare(r):r.localeCompare(n)}),n.forEach(e=>{t.appendChild(e)}),e.setAttribute("style","color: black")},t.formatFilename=l,t.fnConflictHandler=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),r=n(32);class o{constructor(){this.allFiles=new Map,this.folios=new Array}static getInstance(){return o.instance||(o.instance=new o),o.instance}addFile(e){if(this.allFiles.has(e.name)){const t={file:e,count:this.getFileCount(e.name)+1};this.allFiles.set(e.name,t)}else{const t={file:e,count:1};this.allFiles.set(e.name,t)}}async setMeiTemplate(e){try{const t=await fetch(e);if(!t.ok)throw new Error("Failed to load MEI template from "+e);this.meiTemplate=await t.text()}catch(e){console.error(e)}}createMeiFile(e){try{if(!this.meiTemplate)throw new Error("Cannot find MEI template");const t=new DOMParser,n=new XMLSerializer,o=t.parseFromString(this.meiTemplate,"text/xml"),s=o.documentElement;s.querySelector("meiHead").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("fileDesc").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("titleStmt").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("title").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("pubStmt").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("facsimile").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("surface").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("mdiv").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("score").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("scoreDef").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("staffGrp").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("staffDef").setAttribute("xml:id","m-"+(0,i.uuidv4)());s.querySelector("section").setAttribute("xml:id","m-"+(0,i.uuidv4)());const a=r.xml(n.serializeToString(o)),c=new Blob([a],{type:"text/xml"});return new File([c],e,{type:"text/xml"})}catch(e){console.error(e)}}getFile(e){if(this.allFiles.has(e))return this.allFiles.get(e).file}removeFile(e){const t=this.getFileCount(e);if(0!==t)if(1===t)this.allFiles.delete(e);else{const n={file:this.allFiles.get(e).file,count:t-1};this.allFiles.set(e,n)}}getFileCount(e){return this.allFiles.has(e)?this.allFiles.get(e).count:0}addFolio(e,t,n,i){const r={filename:e,mei_filename:t,image_filename:n,isCreated:i};this.folios.push(r)}isCreatedFolio(e){const t=this.folios.find(t=>t.filename===e);return!!t&&t.isCreated}removeFolio(e){const t=this.folios.findIndex(t=>t.filename===e);this.folios.splice(t,1)}getFolios(){return this.folios.map(e=>{const t=e.filename,n=e.mei_filename,i=e.image_filename;return[t,this.getFile(n),this.getFile(i)]})}clear(){this.allFiles.clear(),this.folios.splice(0)}print(){console.log(this.allFiles),console.log(this.folios)}}t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trashEntryOptions=t.trashFolderOptions=t.multiFolderOptions=t.singleFolderOptions=t.folderAndFileOptions=t.multiFileOptions=t.singleFileOptions=t.defaultOptions=void 0,t.defaultOptions='<div id="cm-upload-doc-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Upload document</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/new-doc.svg">\n    </div>\n    <div id="cm-new-folder-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">New folder</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/new-folder.svg">\n    </div>',t.singleFileOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-rename-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Rename</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/rename-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/move-doc-icon.svg">\n    </div>',t.multiFileOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/move-doc-icon.svg">\n    </div>',t.folderAndFileOptions='<div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Delete</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/move-doc-icon.svg">\n    </div>',t.singleFolderOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-rename-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Rename</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/rename-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/move-doc-icon.svg">\n    </div>',t.multiFolderOptions='<div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/move-doc-icon.svg">\n    </div>',t.trashFolderOptions='<div id="cm-empty-trash-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Empty Trash</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>',t.trashEntryOptions='<div id="cm-recover-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Put Back</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/recover-doc.svg">\n    </div>\n    <div id="cm-delete-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Delete</div>\n        <img class="context-menu-item-icon" src="/Neon/Neon-gh/assets/img/remove-doc.svg">\n    </div>'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,