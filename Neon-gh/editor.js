!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=58)}([function(e,t,n){"use strict";var i,s="object"==typeof Reflect?Reflect:null,r=s&&"function"==typeof s.apply?s.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};i=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,i){function s(n){e.removeListener(t,r),i(n)}function r(){"function"==typeof e.removeListener&&e.removeListener("error",s),n([].slice.call(arguments))}v(e,t,r,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&v(e,"error",t,n)}(e,s,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function d(e,t,n,i){var s,r,o,a;if(l(n),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),r=e._events),o=r[t]),void 0===o)o=r[t]=n,++e._eventsCount;else if("function"==typeof o?o=r[t]=i?[n,o]:[o,n]:i?o.unshift(n):o.push(n),(s=u(e))>0&&o.length>s&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,a=c,console&&console.warn&&console.warn(a)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},s=h.bind(i);return s.listener=n,i.wrapFn=s,s}function g(e,t,n){var i=e._events;if(void 0===i)return[];var s=i[t];return void 0===s?[]:"function"==typeof s?n?[s.listener||s]:[s]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(s):m(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function v(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(r){i.once&&e.removeEventListener(t,s),n(r)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return u(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=s[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var l=c.length,u=m(c,l);for(n=0;n<l;++n)r(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return d(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return d(this,e,t,!0)},a.prototype.once=function(e,t){return l(t),this.on(e,f(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,f(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,i,s,r,o;if(l(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(s=-1,r=n.length-1;r>=0;r--)if(n[r]===t||n[r].listener===t){o=n[r].listener,s=r;break}if(s<0)return this;0===s?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,s),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,o||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var s,r=Object.keys(n);for(i=0;i<r.length;++i)"removeListener"!==(s=r[i])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},a.prototype.listeners=function(e){return g(this,e,!0)},a.prototype.rawListeners=function(e){return g(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},a.prototype.listenerCount=p,a.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";var i,s,r,o=[n(36),n(37),n(38),n(39),n(40),n(41)],a=-1,c=[],l=!1;function u(){i&&s&&(i=!1,s.length?c=s.concat(c):a=-1,c.length&&d())}function d(){if(!i){l=!1,i=!0;for(var e=c.length,t=setTimeout(u);e;){for(s=c,c=[];s&&++a<e;)s[a].run();a=-1,e=c.length}s=null,a=-1,i=!1,clearTimeout(t)}}for(var h=-1,f=o.length;++h<f;)if(o[h]&&o[h].test&&o[h].test()){r=o[h].install(d);break}function g(e,t){this.fun=e,this.array=t}g.prototype.run=function(){var e=this.fun,t=this.array;switch(t.length){case 0:return e();case 1:return e(t[0]);case 2:return e(t[0],t[1]);case 3:return e(t[0],t[1],t[2]);default:return e.apply(null,t)}},e.exports=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new g(e,t)),l||i||(l=!0,r())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectAll=t.selectNn=t.selectBBox=t.getStaffBBox=t.isMultiStaveSelection=t.sharedSecondLevelParent=t.elementsHaveCorrectType=t.sharedLogicalParent=t.areAdjacent=t.isLigature=t.selectNcs=t.select=t.selectLayerElement=t.selectStaff=t.unselect=t.getSelectionType=void 0;const i=n(15),s=n(16),r=n(24),o=n(25),a=n(13),c=n(8);function l(){const e=document.getElementsByClassName("sel-by is-active");return 0!==e.length?e[0].id:null}function u(){document.querySelectorAll(".no-moving").forEach(e=>e.classList.remove("no-moving")),document.querySelectorAll(".selected").forEach(e=>{e.classList.remove("selected"),e.classList.contains("staff")?(e.removeAttribute("style"),i.unhighlight(e)):(e.removeAttribute("style"),e.style.fill="")}),Array.from(document.getElementsByClassName("divLine")).forEach(e=>{e.setAttribute("stroke","black"),e.setAttribute("stroke-width","30px")}),Array.from(document.getElementsByClassName("neume")).forEach(e=>{e.style.fill=""}),Array.from(document.getElementsByClassName("text-select")).forEach(e=>{e.style.color="",e.style.fontWeight="",e.classList.remove("text-select")}),Array.from(document.getElementsByClassName("sylTextRect-display")).forEach(e=>{e.style.fill="blue"}),Array.from(document.getElementsByClassName("syllable-highlighted")).forEach(e=>{e.style.fill="",e.classList.add("syllable"),e.classList.remove("syllable-highlighted")}),c.selectAll("#resizeRect").remove(),c.selectAll(".resizePoint").remove(),c.selectAll(".rotatePoint").remove(),document.getElementById("selByStaff").classList.contains("is-active")?a.endOptionsSelection():r.endGroupingSelection(),document.getElementById("extraEdit").innerHTML="",document.getElementById("extraEdit").parentElement.classList.add("hidden"),(0,s.updateHighlight)()}function d(e,t){e.classList.contains("selected")||(e.classList.add("selected"),i.unhighlight(e),i.highlight(e,"#d00"),a.triggerSplitActions(),r.initGroupingListeners(),t.dragInit())}function h(e,t){e.classList.contains("selected")||(e.classList.add("selected"),i.unhighlight(e),i.highlight(e,"#d00"),t.dragInit())}function f(e,t,n=!0){if(e){if(e.classList.contains("staff"))return d(e,t);if(e.classList.contains("layer"))return h(e,t);if(!e.classList.contains("selected")&&!e.classList.contains("sylTextRect")&&!e.classList.contains("sylTextRect-display")){let t;if(e.classList.add("selected"),e.style.fill="#d00",e.style.stroke=e.classList.contains("divLine")?"#d00":"black",e.querySelectorAll(".sylTextRect-display").length&&e.querySelectorAll(".sylTextRect-display").forEach(e=>{e.style.fill="#d00"}),e.querySelectorAll(".divLine").length&&e.querySelectorAll(".divLine").forEach(e=>{e.style.stroke="#d00"}),e.classList.contains("syllable")&&"neume"==(0,s.getHighlightType)()&&e.querySelectorAll(".neume").forEach(e=>{e.style.fill="#d00"}),e.classList.contains("syllable")?t=e.id:null!==e.closest(".syllable")&&(t=e.closest(".syllable").id),void 0!==t){document.querySelectorAll("span."+t).forEach(e=>{e.style.color="#d00",e.style.fontWeight="bold",e.classList.add("text-select")})}}n&&(0,s.updateHighlight)()}}async function g(e,t){const n=await t.getElementAttr(e.id,t.view.getCurrentPageURI());return Boolean(n.ligated)}function p(e,t){if(t.length<2)return!1;switch(e){case"selBySyllable":t.forEach(e=>{if(!e.classList.contains("syllable"))return!1});break;case"selByNeume":t.forEach(e=>{if(!e.classList.contains("neume"))return!1});break;case"selByStaff":t.forEach(e=>{if(!e.classList.contains("staff"))return!1});break;default:return!1}return!0}function m(e){const t=Array.from(e),n=t.pop().parentElement.parentElement;for(const e of t){if(e.parentElement.parentElement.id!==n.id)return!1}return!0}function v(e,t,n){const i=e,s=i.closest(".syl");if(!s.classList.contains("selected")){s.classList.add("selected"),i.style.fill="#d00";const r=e.closest(".syllable");r.style.fill="#d00",r.classList.add("syllable-highlighted"),void 0!==n&&(0,o.resize)(s,n,t),void 0!==t&&t.dragInit();const a=e.closest(".syllable").id;if(void 0!==a){const e=document.querySelector("span."+a);e&&(e.style.color="#d00",e.style.fontWeight="bold",e.classList.add("text-select"))}}}t.getSelectionType=l,t.unselect=u,t.selectStaff=d,t.selectLayerElement=h,t.select=f,t.selectNcs=async function(e,t,n){if(!e.parentElement.classList.contains("selected")){const i=e.parentElement;if(u(),f(i),await g(i,t)){const e=i.previousSibling;if(await g(e,t))f(e);else{const e=i.nextSibling;await g(e,t)?f(e):console.warn("Error: Neither prev or next nc are ligatures")}r.triggerGrouping("ligature")}else i.classList.contains("nc")?a.triggerNcActions(i):console.warn("No action triggered!");n.dragInit()}},t.isLigature=g,t.areAdjacent=function(e,t){if(t.length<2)return!1;let n;switch(e){case"selBySyllable":n=Array.from(document.querySelectorAll(".syllable"));break;case"selByNeume":return!0;case"selByNc":n=Array.from(document.querySelectorAll(".nc"));break;case"selByStaff":n=Array.from(document.querySelectorAll(".staff"));break;default:return!1}const i=[];for(let e=0;e<n.length;e++)for(let s=0;s<t.length;s++)n[e].isSameNode(t[s])&&i.push(t[s]);for(let e=0;e<i.length-1;e++){const t=i[e],s=i[e+1],r=n.indexOf(t),o=n.indexOf(s);if(1!==Math.abs(r-o))return!1}return!0},t.sharedLogicalParent=function(e,t){if(!p(e,t=t.filter(e=>!(e.classList.contains("divLine")||e.classList.contains("accid")||e.classList.contains("clef")))))return!1;switch(e){case"selBySyllable":const e=t[0].closest(".staff");for(let n=0;n<t.length;n++){if(!t[n].closest(".staff").isSameNode(e))return!1}return!0;case"selByNeume":const n=t[0].closest(".syllable");for(let e=0;e<t.length;e++){if(!t[e].closest(".syllable").isSameNode(n))return!1}return!0;case"selByStaff":return!0;default:return!1}},t.elementsHaveCorrectType=p,t.sharedSecondLevelParent=m,t.isMultiStaveSelection=function(e){const t=Array.from(e);for(let e=0;e<t.length;e++){const n=t[e].closest(".staff");for(let i=e;i<t.length;i++){const e=t[i].closest(".staff");if(!n.isSameNode(e))return!0}}return!1},t.getStaffBBox=function(e){let t,n,i,s,r;return e.querySelectorAll("path").forEach(e=>{const o=e.getAttribute("d").match(/\d+/g).map(e=>Number(e));void 0===r&&(r=Math.atan((o[3]-o[1])/(o[2]-o[0]))),(void 0===n||Math.min(o[1],o[3])<n)&&(n=Math.min(o[1],o[3])),(void 0===t||o[0]<t)&&(t=o[0]),(void 0===s||Math.max(o[1],o[3])>s)&&(s=Math.max(o[1],o[3])),(void 0===i||o[2]>i)&&(i=o[2])}),{id:e.id,ulx:t,uly:n,lrx:i,lry:s,rotate:r}},t.selectBBox=v,t.selectNn=function(e){return!(e.length>0)||(e.forEach(e=>{f(e)}),!1)},t.selectAll=async function(e,t,n){const i=l();if(u(),0===e.length)return;let s,c=!1,d=!1;switch(i){case"selBySyllable":s=".syllable";break;case"selByNeume":s=".neume";break;case"selByNc":s=".nc";break;case"selByStaff":s=".staff";break;case"selByBBox":s=".sylTextRect-display";break;case"selByLayerElement":s=".clef, .custos, .accid, .divLine";break;default:return void console.error("Unknown selection type "+i)}const h=new Set;for(const t of e){let e=t.closest(s);if(null===e){if(e=t.closest(".clef, .custos, .accid, .divLine"),null===e){console.warn("Element "+t.id+" is not part of specified group and is not a clef or custos or accid or divLine.");continue}c=c||!0}else d=d||!0;h.add(e);const n=e.getAttribute("mei:follows");n&&(document.querySelector("#"+n.slice(1)).classList.add("no-moving"),h.add(document.querySelector("#"+n.slice(1))));const i=e.getAttribute("mei:precedes");i&&(document.querySelector("#"+i.slice(1)).classList.add("no-moving"),h.add(document.querySelector("#"+i.slice(1))))}h.forEach(e=>f(e,n,!1));const g=Array.from(h.values());if(!c||d)switch(i){case"selByStaff":switch(g.length){case 1:a.triggerSplitActions(),r.initGroupingListeners(),(0,o.resize)(g[0],t,n);break;default:a.triggerStaffActions(),r.initGroupingListeners()}break;case"selByLayerElement":1===h.size&&g[0].classList.contains("clef")?a.triggerClefActions(g[0]):1===h.size&&g[0].classList.contains("custos")?a.triggerCustosActions():1===h.size&&g[0].classList.contains("accid")?a.triggerAccidActions(g[0]):1===h.size&&g[0].classList.contains("divLine")?a.triggerLayerElementActions(g[0]):a.triggerDefaultActions();break;case"selBySyllable":switch(g.length){case 1:a.triggerSyllableActions("singleSelect");break;case 2:r.isLinkable("selBySyllable",g)?a.triggerSyllableActions("linkableSelect"):r.isGroupable("selBySyllable",g)?a.triggerSyllableActions("multiSelect"):a.triggerSyllableActions("default");break;default:r.isGroupable("selBySyllable",g)?a.triggerSyllableActions("multiSelect"):a.triggerSyllableActions("default")}break;case"selByNeume":switch(g.length){case 1:a.triggerNeumeActions(),r.initGroupingListeners();break;default:r.isGroupable("selByNeume",g)?r.triggerGrouping("neume"):a.triggerDefaultActions()}break;case"selByNc":switch(g.length){case 1:a.triggerNcActions(g[0]);break;case 2:if(m(g)){if(g[0].parentElement===g[1].parentElement){const e=Array.from(g[0].parentElement.children);if(1===Math.abs(e.indexOf(g[0])-e.indexOf(g[1]))){let e=g[0].children[0],t=g[1].children[0],n=e.x.baseVal.value,i=t.x.baseVal.value,s=e.y.baseVal.value,o=t.y.baseVal.value;if((n>i||n===i&&s<o)&&([e,t]=[t,e],[n,s,i,o]=[i,o,n,s]),n===i||s<o){r.triggerGrouping("ligature");break}}}r.triggerGrouping("nc")}else a.triggerDefaultActions();break;default:m(g)?r.triggerGrouping("nc"):a.triggerDefaultActions()}break;case"selByBBox":switch(g.length){case 1:v(g[0],n,t),a.triggerDefaultActions();break;default:g.forEach(e=>v(e,n,void 0))}break;default:console.error("Unknown selection type. This should not have occurred.")}else 1===h.size&&g[0].classList.contains("clef")?a.triggerClefActions(g[0]):1===h.size&&g[0].classList.contains("custos")?a.triggerCustosActions():1===h.size&&g[0].classList.contains("accid")?a.triggerAccidActions(g[0]):1===h.size&&g[0].classList.contains("divLine")?a.triggerLayerElementActions(g[0]):"selBySyllable"==i?a.triggerDefaultSylActions():a.triggerDefaultActions()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.queueNotification=t.Notification=void 0;const i=n(27),s=n(23),r=new Array(0);let o=null,a=!1;const c={default:"",warning:"⚠️ ",error:"🔴 ",success:"✅ "};class l{constructor(e,t){this.message=c[t]+e,this.displayed=!1,this.id=(0,s.uuidv4)(),this.isModeMessage=-1!==e.search("Mode"),this.timeoutID=-1,this.type=t}setTimeoutId(e){this.timeoutID=Math.max(e,-1)}display(){this.displayed=!0}getId(){return this.id}}function u(e){document.getElementById(e).remove(),null!==o&&o.getId()===e&&(o=null),r.length>0?d():0===document.querySelectorAll(".neon-notification").length&&(document.getElementById("notification-content").style.display="none",a=!1)}function d(){if(r.length>0){a=!0;const e=r.pop();!function(e){if(e.isModeMessage){if(null!==o)return window.clearTimeout(o.timeoutID),r.push(e),void u(o.getId());o=e}const t=document.getElementById("notification-content"),n=document.createElement("div");n.classList.add("neon-notification"),n.classList.add("neon-notification-"+e.type),n.id=e.getId(),n.innerHTML=e.message,t.append(n),t.style.display="",e.display()}(e),e.setTimeoutId(window.setTimeout(u,5e3,e.getId())),document.getElementById(e.getId()).addEventListener("click",()=>{window.clearTimeout(e.timeoutID),u(e.getId())})}}function h(e,t="default"){const n=new l(e,t);r.push(n),"error"!=n.type&&"warning"!=n.type||(0,i.recordNotification)(n),(!a||document.getElementById("notification-content").querySelectorAll(".neon-notification").length<3)&&d()}t.Notification=l,t.queueNotification=h,t.default={queueNotification:h}},function(e,t,n){"use strict";e.exports=function(e){return function(){var t=arguments.length;if(t){for(var n=[],i=-1;++i<t;)n[i]=arguments[i];return e.call(this,n)}return e.call(this,[])}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setSettings=t.getSettings=void 0;let i=null;const s={zoom:100,glyphOpacity:100,imageOpacity:100,highlightMode:"none",selectionMode:"selBySyllable",displayBBox:!1,displayText:!1,displayInfo:!1,displayErrLog:!1,viewBox:null};t.getSettings=function(){return i.settings},t.setSettings=function(e){i.set(e)},t.default=class{constructor(e){i=this,this.id=e,this.load()}load(){try{const e=JSON.parse(window.localStorage.getItem(this.id));this.sync(e)}catch(e){this.sync({})}}set(e){this.settings=Object.assign(Object.assign({},this.settings),e),window.localStorage.setItem(this.id,JSON.stringify(this.settings))}sync(e){this.settings=Object.assign(Object.assign({},s),e),window.localStorage.setItem(this.id,JSON.stringify(this.settings))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.errorLogsPanelContents=t.syllableActionsContent=t.hotkeysModal=t.editTextModal=t.groupingMenu=t.clefActionContents=t.splitActionContents=t.accidActionContents=t.layerElementInActionContents=t.layerElementOutActionContents=t.custosActionContents=t.defaultSylActionContents=t.defaultActionContents=t.staffActionContents=t.neumeActionContents=t.defaultNeumeActionContents=t.ncActionContents=t.editControlsPanel=t.insertControlsPanel=t.insertTabHtml=void 0,t.insertTabHtml={primitiveTab:'<p class="insert-element-container">\n            <button id="punctum" class="side-panel-btn insertel smallel" aria-label="punctum" title="punctum"><img src="/Neon/Neon-gh/assets/img/punctum.png" class="image"/></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virga" class="side-panel-btn insertel smallel" aria-label="virga" title="virga"><img src="/Neon/Neon-gh/assets/img/virga.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virgaReversed" class="side-panel-btn insertel smallel" aria-label="Reversed Virga" title="Reversed Virga"><img src="/Neon/Neon-gh/assets/img/virga_reversed.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="diamond" class="side-panel-btn insertel smallel" aria-label="inclinatum" title="inclinatum"><img src="/Neon/Neon-gh/assets/img/diamond.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="custos" class="side-panel-btn insertel smallel" aria-label="custos" title="custos"><img src="/Neon/Neon-gh/assets/img/custos.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="cClef" class="side-panel-btn insertel smallel" aria-label="C Clef" title=" C Clef"><img src="/Neon/Neon-gh/assets/img/cClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="fClef" class="side-panel-btn insertel smallel" aria-label="F Clef" title="F Clef"><img src="/Neon/Neon-gh/assets/img/fClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentA" class="side-panel-btn insertel smallel" aria-label="Liquescent A" title="Liquescent A"><img src="/Neon/Neon-gh/assets/img/liquescentA.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentC" class="side-panel-btn insertel smallel" aria-label="Liquescent C" title="Liquescent C"><img src="/Neon/Neon-gh/assets/img/liquescentC.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="flat" class="side-panel-btn insertel smallel" aria-label="Flat" title="Flat"><img src="/Neon/Neon-gh/assets/img/accidFlat.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="natural" class="side-panel-btn insertel smallel" aria-label="Natural" title="Natural"><img src="/Neon/Neon-gh/assets/img/accidNatural.png" class="image"></button>\n        </p> \n        <p class="insert-element-container">\n            <button id="divLineMaxima" class="side-panel-btn insertel smallel" aria-label="DivLine Maxima" title="DivLine Maxima"><img src="/Neon/Neon-gh/assets/img/divisio.png" class="image"></button>\n        </p>',groupingTab:'<p class="insert-element-container">\n            <button id="pes" class="side-panel-btn insertel smallel" aria-label="pes" title="pes"><img src="/Neon/Neon-gh/assets/img/pes.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="clivis" class="side-panel-btn insertel smallel" aria-label="clivis" title="clivis"><img src="/Neon/Neon-gh/assets/img/clivis.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="scandicus" class="side-panel-btn insertel smallel" aria-label="scandicus" title="scandicus"><img src="/Neon/Neon-gh/assets/img/scandicus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="climacus" class="side-panel-btn insertel smallel" aria-label="climacus" title="climacus"><img src="/Neon/Neon-gh/assets/img/climacus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="torculus" class="side-panel-btn insertel smallel" aria-label="toculus" title="toculus"><img src="/Neon/Neon-gh/assets/img/torculus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="porrectus" class="side-panel-btn insertel smallel" aria-label="porrectus" title="porrectus"><img src="/Neon/Neon-gh/assets/img/porrectus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="pressus" class="side-panel-btn insertel smallel" aria-label="pressus" title="pressus"><img src="/Neon/Neon-gh/assets/img/pressus.png" class="image"></button>\n        </p>',systemTab:'<p class="insert-element-container">\n            <button id="staff" class="side-panel-btn insertel longel" aria-label="system" title="system"><img src="/Neon/Neon-gh/assets/img/staff.png" class="image"></button>\n        </p>\n        <p>Click upper left and lower right corners of new staff.</p>'},t.insertControlsPanel='<div class="panel-heading" id="insertMenu">\n        <div class="panel-heading-title">INSERT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleInsert" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n\t<div class="panel-content-subsection first-subsection">\n        <div id="insertContents" class="panel-contents" style="overflow-y: hidden;">\n            <p class="panel-tabs">\n                <a id="primitiveTab" class="insertTab">Primitive Elements</a>\n                <a id="groupingTab" class="insertTab">Grouping</a>\n                <a id="systemTab" class="insertTab">System</a>\n            </p>\n            <div id="insert_data"></div>\n        </div>\n    </div>',t.editControlsPanel='<div class="panel-heading" id="editMenu">\n        <div class="panel-heading-title focused">EDIT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleEdit" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div id="editContents" class="panel-contents">\n        <div class="panel-content-subsection first-subsection">\n            <div id="selection-mode-container">\n                <div class="panel-sub-title">Selection Mode:</div>\n                <div id="selection-mode-btns-container"  class="right-side-panel-btns-container" style="overflow-x: auto;">\n                    \n                        <button class="side-panel-btn sel-by is-active" id="selBySyllable">Syllable</button>\n                        <button class="side-panel-btn sel-by" id="selByNeume">Neume</button>\n                        <button class="side-panel-btn sel-by" id="selByNc">Neume Component</button>\n                        <button class="side-panel-btn sel-by" id="selByStaff">Staff</button>\n                        <button class="side-panel-btn sel-by" id="selByLayerElement">Layer Element</button>\n                    \n                </div>\n            </div>\n        </div>\n\n        <div id="display-slider-actions-container">\n                <div class="panel-content-subsection hidden">\n                    <div id="moreEdit"></div>\n                </div>\n                <div class="panel-content-subsection hidden">\n                    <div id="extraEdit"></div>\n                </div>\n                    \x3c!--\n                    * The extraEdit panel is added for edit options that have dropdown menus\n                    * Like the Neume and Clef menus\n                    * This is done because the moreEdit menu needs to have overflow for cases where it has lots of buttons\n                    * But overflow ruins dropdown menus\n                    --\x3e\n                <div class="panel-content-subsection hidden">\n                    <div id="neumeEdit"></div>\n                </div>\n                <div class="panel-content-subsection">\n                    <div id="undoRedo_controls"></div>\n                </div>\n        </div>\n    </div>',t.ncActionContents='<label>Change Head Shape:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Head Shapes</span>\n                <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="Punctum" class="dropdown-item">Punctum</a>\n                <a id="Virga" class="dropdown-item">Virga</a> \n                <a id="VirgaReversed" class="dropdown-item">Reversed Virga</a>\n                <a id="LiquescentClockwise" class="dropdown-item">Liquescent C</a>\n                <a id="LiquescentAnticlockwise" class="dropdown-item">Liquescent A</a>\n                <a id="Inclinatum" class="dropdown-item">Inclinatum</a>\n            </div>\n        </div>\n    </div>',t.defaultNeumeActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="split-neume">Split Neumes</button>\n    </div>',t.neumeActionContents='<label>Grouping Options:</label>\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Groupings</span>\n                    <svg class="icon">\n                        <use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n                    </svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content scrollable-dropdown">\n                <a id="Pes" class="dropdown-item grouping">Pes</a>\n                <a id="PesSubpunctis" class="dropdown-item grouping">Pes Subpunctis</a>\n                <a id="Clivis" class="dropdown-item grouping">Clivis</a>\n                <a id="Scandicus" class="dropdown-item grouping">Scandicus</a>\n                <a id="ScandicusFlexus" class="dropdown-item grouping">Scandicus Flexus</a>\n                <a id="ScandicusSubpunctis" class="dropdown-item grouping">Scandicus Subpunctis</a>\n                <a id="Climacus" class="dropdown-item grouping">Climacus</a>\n                <a id="ClimacusResupinus" class="dropdown-item grouping">Climacus Resupinus</a>\n                <a id="Torculus" class="dropdown-item grouping">Torculus</a>\n                <a id="TorculusResupinus" class="dropdown-item grouping">Torculus Resupinus</a>\n                <a id="Porrectus" class="dropdown-item grouping">Porrectus</a>\n                <a id="PorrectusFlexus" class="dropdown-item grouping">Porrectus Flexus</a>\n                <a id="PorrectusSubpunctis" class="dropdown-item grouping">Porrectus Subpunctis</a>\n                <a id="Pressus" class="dropdown-item grouping">Pressus</a>\n            </div>\n        </div>\n    </div>\n    <button class="side-panel-btn" id="ungroupNcs">Ungroup</button>',t.staffActionContents='<label>Merge Systems:</label>\n    <button id="merge-systems" class="side-panel-btn">Merge</button>\n    <button class="side-panel-btn" id="delete">Delete</button>',t.defaultActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.defaultSylActionContents='<button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>',t.custosActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementOutActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="insertToSyllable">Insert to nearest syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementInActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="moveOutsideSyllable">Move outside syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.accidActionContents='<label>Change Accidental:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger"overflow="auto">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Shapes</span>\n                <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="ChangeToFlat" class="dropdown-item">Flat</a>\n                <a id="ChangeToNatural" class="dropdown-item">Natural</a>\n            </div>\n        </div>\n    </div>',t.splitActionContents='<div>Split System:</div>\n    <div id="split-system-btns-container" class="right-side-panel-btns-container">\n        <button id="split-system" class="side-panel-btn">Split</button>\n        <button id="reset-rotate" class="side-panel-btn">Reset Rotate</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.clefActionContents='\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Displace Octave</span>\n                    <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="increment-octave" class="dropdown-item">+1 Octave</a>\n                    <a id="decrement-octave" class="dropdown-item">-1 Octave</a>\n                </div>\n            </div>\n        </div>\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Change Clef Shape</span>\n                    <svg class="icon"><use xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="CClef" class="dropdown-item">C Clef</a>\n                    <a id="FClef" class="dropdown-item">F Clef</a>\n                </div>\n            </div>\n        </div>\n    </div>\n    ',t.groupingMenu={nc:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn more-edit-btn" id="groupNcs">Group Neume Components</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',neume:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="groupNeumes">Group Neumes</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',syl:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n                <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n            </div>\n\t\t</div>',ligatureNc:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="groupNcs">Group Neume Components</button>\n                        <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>',ligature:'<div class="more-edit-btn panel-btn">\n                <div class="right-side-panel-btns-container">\n                    <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                    <button class="side-panel-btn" id="delete">Delete</button>\n                </div>\n            </div>',splitSyllable:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>'},t.editTextModal='<div class="neon-modal-window-content" id="neon-modal-window-content-edit-text">\n        <label for="neon-modal-window-edit-text-input" id="neon-modal-window-edit-text-label">Enter Syllable Text:</label>\n        <input id="neon-modal-window-edit-text-input" type="text">\n        <div id="neon-modal-window-edit-text-btns">\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-cancel">Cancel</div>\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-save">Save</div>        \n        </div>\n    </div>',t.hotkeysModal='\n    <div class="neon-modal-window-content" id="neon-modal-window-content-hotkeys">\n        \x3c!-- "Display" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Display</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">+</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom In</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">-</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Out</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">0</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Reset</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">h</div>\n                </div>\n                <div class="hotkey-entry-description">Hide Glyph</div>\n            </div>\n        </div>\n\n        \x3c!-- "Edit" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Edit</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Undo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Redo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">q/w/e/r/t/y</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Highlight by Staff/Syllable/Neume/LayerElement/Selection/Off\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">1/2/3/4</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Select by Syllable/Neume/Neume Component/Staff\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Number</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Begin Insert for the <i>nth</i> option in the selected tab\n                </div>\n            </div>\n        </div>\n\n        \x3c!-- "Other" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Other</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">s</div>\n                </div>\n                <div class="hotkey-entry-description">Save File</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Esc</div>\n                </div>\n                <div class="hotkey-entry-description">Return to Edit Mode</div>\n            </div>\n        </div>\n    </div>',t.syllableActionsContent='\n  <div class="right-side-panel-btns-container">\n    <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n    <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>\n    <button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n  </div>\n',t.errorLogsPanelContents='<div class="panel-heading" id="errorLogHeading">\n        <div class="panel-heading-title">Error Log</div>\n        <svg class="icon">\n            <use id="toggleErrorLog" xlink:href="/Neon/Neon-gh//assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div class="panel-contents" id="errorLogContents" style="overflow: visible; padding: 0.5em 0.75em;"><div>'},function(e,t){e.exports=d3},function(e,t,n){"use strict";for(var i=n(10),s=[],r=0;r<256;++r)s.push((r+256).toString(16).substr(1));t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!Object(i.a)(n))throw TypeError("Stringified UUID is invalid");return n}},function(e,t,n){"use strict";var i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;t.a=function(e){return"string"==typeof e&&i.test(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getGlyphBBox=t.isOutOfSVGBounds=t.getStaffByCoords=t.getStaffIdByCoords=t.getSVGRelCoords=void 0;const i=n(3);function s(e,t){const n=new DOMPoint(e,t),i=document.querySelector(".active-page > .definition-scale").querySelector(".system"),{x:s,y:r}=n.matrixTransform(i.getScreenCTM().inverse());return{x:s,y:r}}function r(e,t){const n=Array.from(document.querySelectorAll(".staff")).map(e=>(0,i.getStaffBBox)(e)),{x:r,y:o}=s(e,t),a=n.find(e=>r<=e.lrx&&r>=e.ulx&&o<=e.lry&&o>=e.uly);return a?a.id:null}t.getSVGRelCoords=s,t.getStaffIdByCoords=r,t.getStaffByCoords=function(e,t){const n=r(e,t);return document.querySelector("#"+n)},t.isOutOfSVGBounds=function(e,t){const n=document.querySelector("#bgimg");return e<=0||e>=Number(n.getAttribute("width"))||t<=0||t>=Number(n.getAttribute("height"))},t.getGlyphBBox=function(e){const t="rect"==e.tagName?e.getBBox():e.parentNode.getBBox();return{ulx:t.x,uly:t.y,lrx:t.x+t.width,lry:t.y+t.height}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.triggerDefaultActions=t.triggerDefaultSylActions=t.triggerSplitActions=t.triggerStaffSplitMode=t.triggerStaffActions=t.triggerLayerElementActions=t.triggerAccidActions=t.triggerCustosActions=t.triggerClefActions=t.triggerSyllableActions=t.triggerNeumeActions=t.triggerNcActions=t.addChangeStaffListener=t.moveOutsideSyllableHandler=t.insertToSyllableHandler=t.changeStaffHandler=t.removeHandler=t.endOptionsSelection=t.deleteButtonHandler=t.unsetLiquescentAnticlockwiseAction=t.unsetLiquescentClockwiseAction=t.unsetVirgaReversedAction=t.unsetVirgaAction=t.unsetInclinatumAction=t.initNeonView=void 0;const i=n(7),s=n(24),r=n(4),o=n(33),a=n(34),c=n(3);let l;function u(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function d(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function h(e){return{action:"set",param:{elementId:e,attrType:"tilt",attrValue:""}}}function f(e){return{action:"set",param:{elementId:e,attrType:"curve",attrValue:""}}}function g(e){return{action:"set",param:{elementId:e,attrType:"curve",attrValue:""}}}function p(e){"d"!==e.key&&"Backspace"!==e.key||(v(),e.preventDefault())}function m(){const e=document.getElementById("moreEdit"),t=document.getElementById("extraEdit");e&&(e.innerHTML="",e.parentElement.classList.add("hidden")),t&&(t.innerHTML="",t.parentElement.classList.add("hidden")),document.body.removeEventListener("keydown",p)}function v(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{t.classList.contains("syl")&&(t=t.closest(".syllable")),t.classList.contains("accid")&&(t=t.closest(".accid")),t.classList.contains("divLine")&&(t=t.closest(".divLine")),e.push({action:"remove",param:{elementId:t.id}})});const t={action:"chain",param:e};m(),l.edit(t,l.view.getCurrentPageURI()).then(()=>{l.updateForCurrentPage()})}function y(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"changeStaff",param:{elementId:t.id}})});const t={action:"chain",param:e};m(),l.edit(t,l.view.getCurrentPageURI()).then(()=>{l.updateForCurrentPage()})}function b(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"insertToSyllable",param:{elementId:t.id}})});const t={action:"chain",param:e};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Insert Success","success"):r.default.queueNotification("Insert Failed XoX","error"),m(),l.updateForCurrentPage()})}function w(){const e=[];Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push({action:"moveOutsideSyllable",param:{elementId:t.id}})});const t={action:"chain",param:e};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Move Success","success"):r.default.queueNotification("Move Failed XoX","error"),m(),l.updateForCurrentPage()})}function _(){const e=document.getElementById("delete");e&&(e.removeEventListener("click",v),e.addEventListener("click",v),document.body.addEventListener("keydown",p))}function E(){const e=document.getElementById("changeStaff");null==e||e.removeEventListener("click",y),null==e||e.addEventListener("click",y)}function S(e,t,n=!0){const i=document.getElementById(e);i&&(i.parentElement.classList.remove("hidden"),n?i.innerHTML=t:i.innerHTML+=t)}function L(){const e=document.querySelector(".staff.selected");if(null!==e){new o.SplitStaffHandler(l,e).startSplit(),m()}else console.error("No staff was selected!"),m()}function x(){document.querySelectorAll(".drop_select").forEach(e=>{const t=()=>{document.body.removeEventListener("click",t),e.classList.remove("is-active")};e.addEventListener("click",n=>{e.classList.toggle("is-active"),Array.from(document.querySelectorAll(".drop_select")).filter(t=>t!==e).forEach(e=>e.classList.remove("is-active")),n.stopPropagation(),e.classList.contains("is-active")?document.body.addEventListener("click",t):document.body.removeEventListener("click",t)})})}t.initNeonView=function(e){l=e,s.initNeonView(e)},t.unsetInclinatumAction=u,t.unsetVirgaAction=d,t.unsetVirgaReversedAction=h,t.unsetLiquescentClockwiseAction=f,t.unsetLiquescentAnticlockwiseAction=g,t.deleteButtonHandler=p,t.endOptionsSelection=m,t.removeHandler=v,t.changeStaffHandler=y,t.insertToSyllableHandler=b,t.moveOutsideSyllableHandler=w,t.addChangeStaffListener=E,t.triggerNcActions=function(e){m(),S("moreEdit",i.defaultActionContents),S("extraEdit",i.ncActionContents),_(),document.querySelector("#Punctum.dropdown-item").addEventListener("click",()=>{const t=u(e.id),n=d(e.id),i=h(e.id),s=f(e.id),o=g(e.id);l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#Inclinatum.dropdown-item").addEventListener("click",()=>{const t=d(e.id),n=h(e.id),i=f(e.id),s=g(e.id),o={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"se"}};l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#Virga.dropdown-item").addEventListener("click",()=>{const t=h(e.id),n=u(e.id),i=f(e.id),s=g(e.id),o={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"s"}};l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#VirgaReversed.dropdown-item").addEventListener("click",()=>{const t=u(e.id),n=d(e.id),i=f(e.id),s=g(e.id),o={action:"set",param:{elementId:e.id,attrType:"tilt",attrValue:"n"}};l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#LiquescentClockwise.dropdown-item").addEventListener("click",()=>{const t=u(e.id),n=d(e.id),i=h(e.id),s=g(e.id),o={action:"set",param:{elementId:e.id,attrType:"curve",attrValue:"c"}};l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#LiquescentAnticlockwise.dropdown-item").addEventListener("click",()=>{const t=u(e.id),n=d(e.id),i=h(e.id),s=f(e.id),o={action:"set",param:{elementId:e.id,attrType:"curve",attrValue:"a"}};l.edit({action:"chain",param:[t,n,i,s,o]},l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),x()},t.triggerNeumeActions=function(){m(),S("moreEdit",i.defaultNeumeActionContents),S("extraEdit",i.neumeActionContents),_();const e=document.querySelectorAll(".selected");function t(t){const n={action:"changeGroup",param:{elementId:e[0].id,contour:t}};l.edit(n,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Grouping Changed","success"):r.default.queueNotification("Grouping Failed","error"),m(),l.updateForCurrentPage()})}1===e.length?(document.getElementById("split-neume").addEventListener("click",()=>{const e=document.querySelector(".neume.selected");if(null!==e){new a.SplitNeumeHandler(l,e).startSplit(),m()}else console.error("No staff was selected!"),m()}),document.querySelector("#Pes.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PesSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Clivis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Scandicus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ScandicusFlexus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ScandicusSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Climacus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#ClimacusResupinus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Torculus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#TorculusResupinus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Porrectus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PorrectusFlexus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#PorrectusSubpunctis.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),document.querySelector("#Pressus.dropdown-item").addEventListener("click",e=>{t(l.info.getContourByValue(e.target.id))}),x()):console.warn("More than one neume selected! Cannot trigger Neume ClickSelect actions.")},t.triggerSyllableActions=function(e){m(),S("moreEdit",i.syllableActionsContent);let t="";switch(e){case"singleSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"linkableSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"multiSelect":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>';break;case"default":t+='<div class="right-side-panel-btns-container">\n          <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n          <button class="side-panel-btn" id="delete">Delete</button>\n        </div>'}S("moreEdit",t,!0),E(),_(),s.initGroupingListeners()},t.triggerClefActions=function(e){var t,n;m(),S("moreEdit",e.parentElement.classList.contains("syllable")?i.layerElementInActionContents:i.layerElementOutActionContents),S("extraEdit",i.clefActionContents),_(),E(),null===(t=document.getElementById("insertToSyllable"))||void 0===t||t.addEventListener("click",b),null===(n=document.getElementById("moveOutsideSyllable"))||void 0===n||n.addEventListener("click",w),document.querySelector("#increment-octave").addEventListener("click",()=>{const t={action:"displaceClefOctave",param:{elementId:e.id,direction:"above"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Clef octave incremented.","success"):r.default.queueNotification("Maximum octave displacement reached. Clef can only be displaced up to 3 octaves.","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#decrement-octave").addEventListener("click",()=>{const t={action:"displaceClefOctave",param:{elementId:e.id,direction:"below"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Clef octave decremented.","success"):r.default.queueNotification("Maximum octave displacement reached. Clef can only be displaced up to 3 octaves.","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#CClef.dropdown-item").addEventListener("click",()=>{const t={action:"setClef",param:{elementId:e.id,shape:"C"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#FClef.dropdown-item").addEventListener("click",()=>{const t={action:"setClef",param:{elementId:e.id,shape:"F"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),x()},t.triggerCustosActions=function(){m(),S("moreEdit",i.custosActionContents),E(),_()},t.triggerAccidActions=function(e){var t,n;m(),S("moreEdit",e.parentElement.classList.contains("syllable")?i.layerElementInActionContents:i.layerElementOutActionContents,!1),S("extraEdit",i.accidActionContents),_(),E(),null===(t=document.getElementById("insertToSyllable"))||void 0===t||t.addEventListener("click",b),null===(n=document.getElementById("moveOutsideSyllable"))||void 0===n||n.addEventListener("click",w),document.querySelector("#ChangeToFlat.dropdown-item").addEventListener("click",()=>{const t={action:"set",param:{elementId:e.id,attrType:"accid",attrValue:"f"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),document.querySelector("#ChangeToNatural.dropdown-item").addEventListener("click",()=>{const t={action:"set",param:{elementId:e.id,attrType:"accid",attrValue:"n"}};l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.default.queueNotification("Shape Changed","success"):r.default.queueNotification("Shape Change Failed","error"),m(),l.updateForCurrentPage()})}),x()},t.triggerLayerElementActions=function(e){var t,n;m(),S("moreEdit",e.parentElement.classList.contains("syllable")?i.layerElementInActionContents:i.layerElementOutActionContents,!1),_(),E(),null===(t=document.getElementById("insertToSyllable"))||void 0===t||t.addEventListener("click",b),null===(n=document.getElementById("moveOutsideSyllable"))||void 0===n||n.addEventListener("click",w)},t.triggerStaffActions=function(){m(),S("moreEdit",i.staffActionContents),_(),document.getElementById("merge-systems").addEventListener("click",()=>{s.mergeStaves()})},t.triggerStaffSplitMode=L,t.triggerSplitActions=function(){m(),S("moreEdit",i.splitActionContents),_(),document.getElementById("split-system").addEventListener("click",()=>{L()}),document.getElementById("reset-rotate").addEventListener("click",()=>{const e=document.querySelector(".staff.selected"),t=(0,c.getStaffBBox)(e),n=Math.tan(t.rotate)*(t.lrx-t.ulx);if(null!==e){const i={action:"resizeRotate",param:{elementId:e.id,ulx:t.ulx,uly:t.rotate>0?t.uly+n/2:t.uly-n/2,lrx:t.lrx,lry:t.rotate>0?t.lry-n/2:t.lry+n/2,rotate:0}};l.edit(i,l.view.getCurrentPageURI()).then(async e=>{e&&await l.updateForCurrentPage()}),m()}else console.error("No staff was selected"),m()})},t.triggerDefaultSylActions=function(){m(),S("moreEdit",i.defaultSylActionContents),_(),E()},t.triggerDefaultActions=function(){m(),S("moreEdit",i.defaultActionContents),_()}},function(e,t,n){e.exports=function(e){"use strict";var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e,t){var n=e[0],i=e[1],s=e[2],r=e[3];i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&s|~i&r)+t[0]-680876936|0)<<7|n>>>25)+i|0)&i|~n&s)+t[1]-389564586|0)<<12|r>>>20)+n|0)&n|~r&i)+t[2]+606105819|0)<<17|s>>>15)+r|0)&r|~s&n)+t[3]-1044525330|0)<<22|i>>>10)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&s|~i&r)+t[4]-176418897|0)<<7|n>>>25)+i|0)&i|~n&s)+t[5]+1200080426|0)<<12|r>>>20)+n|0)&n|~r&i)+t[6]-1473231341|0)<<17|s>>>15)+r|0)&r|~s&n)+t[7]-45705983|0)<<22|i>>>10)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&s|~i&r)+t[8]+1770035416|0)<<7|n>>>25)+i|0)&i|~n&s)+t[9]-1958414417|0)<<12|r>>>20)+n|0)&n|~r&i)+t[10]-42063|0)<<17|s>>>15)+r|0)&r|~s&n)+t[11]-1990404162|0)<<22|i>>>10)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&s|~i&r)+t[12]+1804603682|0)<<7|n>>>25)+i|0)&i|~n&s)+t[13]-40341101|0)<<12|r>>>20)+n|0)&n|~r&i)+t[14]-1502002290|0)<<17|s>>>15)+r|0)&r|~s&n)+t[15]+1236535329|0)<<22|i>>>10)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&r|s&~r)+t[1]-165796510|0)<<5|n>>>27)+i|0)&s|i&~s)+t[6]-1069501632|0)<<9|r>>>23)+n|0)&i|n&~i)+t[11]+643717713|0)<<14|s>>>18)+r|0)&n|r&~n)+t[0]-373897302|0)<<20|i>>>12)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&r|s&~r)+t[5]-701558691|0)<<5|n>>>27)+i|0)&s|i&~s)+t[10]+38016083|0)<<9|r>>>23)+n|0)&i|n&~i)+t[15]-660478335|0)<<14|s>>>18)+r|0)&n|r&~n)+t[4]-405537848|0)<<20|i>>>12)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&r|s&~r)+t[9]+568446438|0)<<5|n>>>27)+i|0)&s|i&~s)+t[14]-1019803690|0)<<9|r>>>23)+n|0)&i|n&~i)+t[3]-187363961|0)<<14|s>>>18)+r|0)&n|r&~n)+t[8]+1163531501|0)<<20|i>>>12)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i&r|s&~r)+t[13]-1444681467|0)<<5|n>>>27)+i|0)&s|i&~s)+t[2]-51403784|0)<<9|r>>>23)+n|0)&i|n&~i)+t[7]+1735328473|0)<<14|s>>>18)+r|0)&n|r&~n)+t[12]-1926607734|0)<<20|i>>>12)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i^s^r)+t[5]-378558|0)<<4|n>>>28)+i|0)^i^s)+t[8]-2022574463|0)<<11|r>>>21)+n|0)^n^i)+t[11]+1839030562|0)<<16|s>>>16)+r|0)^r^n)+t[14]-35309556|0)<<23|i>>>9)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i^s^r)+t[1]-1530992060|0)<<4|n>>>28)+i|0)^i^s)+t[4]+1272893353|0)<<11|r>>>21)+n|0)^n^i)+t[7]-155497632|0)<<16|s>>>16)+r|0)^r^n)+t[10]-1094730640|0)<<23|i>>>9)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i^s^r)+t[13]+681279174|0)<<4|n>>>28)+i|0)^i^s)+t[0]-358537222|0)<<11|r>>>21)+n|0)^n^i)+t[3]-722521979|0)<<16|s>>>16)+r|0)^r^n)+t[6]+76029189|0)<<23|i>>>9)+s|0,i=((i+=((s=((s+=((r=((r+=((n=((n+=(i^s^r)+t[9]-640364487|0)<<4|n>>>28)+i|0)^i^s)+t[12]-421815835|0)<<11|r>>>21)+n|0)^n^i)+t[15]+530742520|0)<<16|s>>>16)+r|0)^r^n)+t[2]-995338651|0)<<23|i>>>9)+s|0,i=((i+=((r=((r+=(i^((n=((n+=(s^(i|~r))+t[0]-198630844|0)<<6|n>>>26)+i|0)|~s))+t[7]+1126891415|0)<<10|r>>>22)+n|0)^((s=((s+=(n^(r|~i))+t[14]-1416354905|0)<<15|s>>>17)+r|0)|~n))+t[5]-57434055|0)<<21|i>>>11)+s|0,i=((i+=((r=((r+=(i^((n=((n+=(s^(i|~r))+t[12]+1700485571|0)<<6|n>>>26)+i|0)|~s))+t[3]-1894986606|0)<<10|r>>>22)+n|0)^((s=((s+=(n^(r|~i))+t[10]-1051523|0)<<15|s>>>17)+r|0)|~n))+t[1]-2054922799|0)<<21|i>>>11)+s|0,i=((i+=((r=((r+=(i^((n=((n+=(s^(i|~r))+t[8]+1873313359|0)<<6|n>>>26)+i|0)|~s))+t[15]-30611744|0)<<10|r>>>22)+n|0)^((s=((s+=(n^(r|~i))+t[6]-1560198380|0)<<15|s>>>17)+r|0)|~n))+t[13]+1309151649|0)<<21|i>>>11)+s|0,i=((i+=((r=((r+=(i^((n=((n+=(s^(i|~r))+t[4]-145523070|0)<<6|n>>>26)+i|0)|~s))+t[11]-1120210379|0)<<10|r>>>22)+n|0)^((s=((s+=(n^(r|~i))+t[2]+718787259|0)<<15|s>>>17)+r|0)|~n))+t[9]-343485551|0)<<21|i>>>11)+s|0,e[0]=n+e[0]|0,e[1]=i+e[1]|0,e[2]=s+e[2]|0,e[3]=r+e[3]|0}function i(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return n}function s(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24);return n}function r(e){var t,s,r,o,a,c,l=e.length,u=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(u,i(e.substring(t-64,t)));for(s=(e=e.substring(t-64)).length,r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<s;t+=1)r[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(r[t>>2]|=128<<(t%4<<3),t>55)for(n(u,r),t=0;t<16;t+=1)r[t]=0;return o=(o=8*l).toString(16).match(/(.*?)(.{0,8})$/),a=parseInt(o[2],16),c=parseInt(o[1],16)||0,r[14]=a,r[15]=c,n(u,r),u}function o(e){var n,i="";for(n=0;n<4;n+=1)i+=t[e>>8*n+4&15]+t[e>>8*n&15];return i}function a(e){var t;for(t=0;t<e.length;t+=1)e[t]=o(e[t]);return e.join("")}function c(e){return/[\u0080-\uFFFF]/.test(e)&&(e=unescape(encodeURIComponent(e))),e}function l(e){var t,n=[],i=e.length;for(t=0;t<i-1;t+=2)n.push(parseInt(e.substr(t,2),16));return String.fromCharCode.apply(String,n)}function u(){this.reset()}return a(r("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function t(e,t){return(e=0|e||0)<0?Math.max(e+t,0):Math.min(e,t)}ArrayBuffer.prototype.slice=function(n,i){var s,r,o,a,c=this.byteLength,l=t(n,c),u=c;return i!==e&&(u=t(i,c)),l>u?new ArrayBuffer(0):(s=u-l,r=new ArrayBuffer(s),o=new Uint8Array(r),a=new Uint8Array(this,l,s),o.set(a),r)}}(),u.prototype.append=function(e){return this.appendBinary(c(e)),this},u.prototype.appendBinary=function(e){this._buff+=e,this._length+=e.length;var t,s=this._buff.length;for(t=64;t<=s;t+=64)n(this._hash,i(this._buff.substring(t-64,t)));return this._buff=this._buff.substring(t-64),this},u.prototype.end=function(e){var t,n,i=this._buff,s=i.length,r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<s;t+=1)r[t>>2]|=i.charCodeAt(t)<<(t%4<<3);return this._finish(r,s),n=a(this._hash),e&&(n=l(n)),this.reset(),n},u.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},u.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},u.prototype.setState=function(e){return this._buff=e.buff,this._length=e.length,this._hash=e.hash,this},u.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},u.prototype._finish=function(e,t){var i,s,r,o=t;if(e[o>>2]|=128<<(o%4<<3),o>55)for(n(this._hash,e),o=0;o<16;o+=1)e[o]=0;i=(i=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),s=parseInt(i[2],16),r=parseInt(i[1],16)||0,e[14]=s,e[15]=r,n(this._hash,e)},u.hash=function(e,t){return u.hashBinary(c(e),t)},u.hashBinary=function(e,t){var n=a(r(e));return t?l(n):n},u.ArrayBuffer=function(){this.reset()},u.ArrayBuffer.prototype.append=function(e){var t,i,r,o,a,c=(i=this._buff.buffer,r=e,o=!0,(a=new Uint8Array(i.byteLength+r.byteLength)).set(new Uint8Array(i)),a.set(new Uint8Array(r),i.byteLength),o?a:a.buffer),l=c.length;for(this._length+=e.byteLength,t=64;t<=l;t+=64)n(this._hash,s(c.subarray(t-64,t)));return this._buff=t-64<l?new Uint8Array(c.buffer.slice(t-64)):new Uint8Array(0),this},u.ArrayBuffer.prototype.end=function(e){var t,n,i=this._buff,s=i.length,r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<s;t+=1)r[t>>2]|=i[t]<<(t%4<<3);return this._finish(r,s),n=a(this._hash),e&&(n=l(n)),this.reset(),n},u.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},u.ArrayBuffer.prototype.getState=function(){var e,t=u.prototype.getState.call(this);return t.buff=(e=t.buff,String.fromCharCode.apply(null,new Uint8Array(e))),t},u.ArrayBuffer.prototype.setState=function(e){return e.buff=function(e,t){var n,i=e.length,s=new ArrayBuffer(i),r=new Uint8Array(s);for(n=0;n<i;n+=1)r[n]=e.charCodeAt(n);return t?r:s}(e.buff,!0),u.prototype.setState.call(this,e)},u.ArrayBuffer.prototype.destroy=u.prototype.destroy,u.ArrayBuffer.prototype._finish=u.prototype._finish,u.ArrayBuffer.hash=function(e,t){var i=a(function(e){var t,i,r,o,a,c,l=e.length,u=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(u,s(e.subarray(t-64,t)));for(e=t-64<l?e.subarray(t-64):new Uint8Array(0),i=e.length,r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<i;t+=1)r[t>>2]|=e[t]<<(t%4<<3);if(r[t>>2]|=128<<(t%4<<3),t>55)for(n(u,r),t=0;t<16;t+=1)r[t]=0;return o=(o=8*l).toString(16).match(/(.*?)(.{0,8})$/),a=parseInt(o[2],16),c=parseInt(o[1],16)||0,r[14]=a,r[15]=c,n(u,r),u}(new Uint8Array(e)));return t?l(i):i},u}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setGroupingHighlight=t.setStaffHighlight=t.highlight=t.unsetGroupingHighlight=t.unsetStaffHighlight=t.unhighlight=void 0;const i=["rgb(230, 159, 0)","rgb(86, 180, 233)","rgb(0, 158, 115)","rgb(240, 228, 66)","rgb(0, 114, 178)","rgb(213, 94, 0)","rgb(204, 121, 167)"];function s(e){let t;t=e?e.querySelectorAll(":not(.selected) .highlighted"):document.querySelectorAll(":not(.selected) .highlighted"),t.forEach(e=>{if("path"!==e.tagName||e.closest(".staff").classList.contains("selected"))if(e.classList.contains("divLine")&&!e.closest(".staff").classList.contains("selected"))e.setAttribute("stroke","#000000");else{e.removeAttribute("fill");let t=e.querySelectorAll(".sylTextRect-display");if(!t.length)try{t=e.closest(".syllable").querySelectorAll(".sylTextRect-display")}catch(e){t=[]}t.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||e.closest(".syl").classList.contains("selected")?e.style.fill="#d00":e.style.fill="blue",e.classList.remove("highlighted")}))}else e.setAttribute("stroke","#000000");e.classList.remove("highlighted")})}function r(){s()}function o(){r();Array.from(document.getElementsByClassName("highlighted")).filter(e=>!e.parentElement.classList.contains("selected")).forEach(e=>{e.setAttribute("#d00",null);let t=e.querySelectorAll(".sylTextRect-display");t.length||null!==e.closest(".syllable")&&(t=e.closest(".syllable").querySelectorAll("sylTextRect-display")),t.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".syl").classList.contains("selected")?e.style.fill="#d00":e.style.fill="blue",e.classList.remove("highlighted")})),e.classList.remove("highlighted"),e.querySelectorAll("sylTextRect-display").forEach(e=>{e.classList.remove("highlighted")})}),Array.from(document.getElementsByClassName("selected")).forEach(e=>{e.setAttribute("fill","")})}function a(e,t){const n=Array.from(e.children);for(let e=0;e<n.length;e++){const i=n[e];if("path"===i.tagName)i.setAttribute("stroke",t);else if(i.classList.contains("divLine"))i.setAttribute("stroke",t),i.setAttribute("stroke-width","30px");else{if(i.classList.contains("resizePoint")||"resizeRect"===i.id||i.classList.contains("rotatePoint"))return;if(i.classList.contains("layer"))Array.from(i.children).forEach(e=>{n.push(e)});else if(document.getElementsByClassName("highlight-selected").length&&"highlight-neume"===document.getElementsByClassName("highlight-selected")[0].id&&i.classList.contains("syllable"))Array.from(i.children).filter(e=>e.classList.contains("neume")).forEach(e=>{n.push(e)});else{i.setAttribute("fill",t);let e=i.querySelectorAll(".sylTextRect-display");if(!e.length)try{e=i.closest(".syllable").querySelectorAll(".sylTextRect-display")}catch(t){e=[]}e.forEach((function(e){e.closest(".syllable").classList.contains("selected")||e.closest(".syl").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||(e.style.fill=t,e.classList.add("highlighted"))}))}}i.classList.add("highlighted")}let i;i="30px",e.querySelectorAll(".nc, .custos, .clef, .accid").forEach(e=>{e.setAttribute("stroke","black"),e.setAttribute("stroke-width",i)})}function c(){const e=Array.from(document.getElementsByClassName("staff"));for(let t=0;t<e.length;t++){const n=i[t%i.length];a(e[t],n)}}t.unhighlight=s,t.unsetStaffHighlight=r,t.unsetGroupingHighlight=o,t.highlight=a,t.setStaffHighlight=c,t.setGroupingHighlight=function e(t){if(o(),"staff"===t)return void c();if("selection"===t){switch(document.querySelector(".sel-by.is-active").id){case"selBySyllable":case"selByBBox":t="syllable";break;case"selByStaff":t="staff";break;case"selByLayerElement":t="layerElement";break;case"selByNeume":default:t="neume"}return void e(t)}let n;n="layerElement"==t?document.querySelectorAll(".accid, .clef, .custos, .divLine"):document.getElementsByClassName(t),document.querySelectorAll(".nc, .custos, .clef, .accid, .divLine").forEach(e=>{e.setAttribute("stroke","black"),e.setAttribute("stroke-width","30px")});for(let e=0;e<n.length;e++){const t=i[e%i.length];if(null!==n[e].closest(".selected")||n[e].classList.contains("selected"))n[e].classList.contains("selected")?n[e].setAttribute("fill","#d00"):n[e].setAttribute("fill",null),n[e].classList.remove("highlighted");else{n[e].setAttribute("fill",t);n[e].querySelectorAll(".sylTextRect-display").forEach((function(e){e.closest(".syl").classList.contains("selected")||e.closest(".syllable").classList.contains("selected")||e.closest(".staff").classList.contains("selected")||(e.style.fill=t)})),n[e].classList.add("highlighted"),n[e].querySelectorAll(".sylTextRect-display").forEach(e=>{e.classList.add("highlighted")})}n[e].classList.contains("divLine")&&n[e].setAttribute("stroke",t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initDisplayControls=t.loadHighlightSettings=t.updateHighlight=t.setHighlightSelectionControls=t.setHighlightControls=t.setHighlightOption=t.getHighlightType=t.setBgOpacityFromSlider=t.setOpacityFromSlider=t.setZoomControls=void 0;const i=n(15),s=n(6);let r,o;function a(e){const t=document.getElementById("opacityOutput");document.getElementById("opacitySlider").value=t.value,(0,s.setSettings)({glyphOpacity:Number(t.value)});const n=document.querySelector("#toggle-glyph-opacity > img");0===Number(t.value)?n.setAttribute("src","/Neon/Neon-gh/assets/img/show-icon.svg"):n.setAttribute("src","/Neon/Neon-gh/assets/img/hide-icon.svg");try{document.querySelectorAll("."+e).forEach(e=>{e.style.opacity=(Number(t.value)/100).toString()})}catch(e){console.warn("Unable to properly set opacity to pages")}}function c(e){const t=document.querySelector("#bgOpacityOutput");(0,s.setSettings)({imageOpacity:Number(t.value)});const n=document.querySelector("#toggle-bg-opacity > img");0===Number(t.value)?n.setAttribute("src","/Neon/Neon-gh/assets/img/show-icon.svg"):n.setAttribute("src","/Neon/Neon-gh/assets/img/hide-icon.svg");const i=document.querySelector("."+e);i&&(i.style.opacity=String(Number(t.value)/100))}function l(e){const t=document.getElementById("highlight-"+e),n=document.getElementById("highlight-dropdown"),r=document.getElementById("highlight-type");if((0,s.setSettings)({highlightMode:e}),n.classList.remove("is-active"),document.querySelectorAll(".highlight-selected").forEach(e=>{e.classList.remove("highlight-selected")}),"none"===e)return r.textContent=" - Off",void i.unsetGroupingHighlight();t.classList.add("highlight-selected"),r.textContent=" - "+(e[0].toUpperCase()+e.slice(1)),i.setGroupingHighlight(e)}function u(e){document.getElementById("highlight-"+e).addEventListener("click",()=>{l(e)})}function d(){document.body.removeEventListener("click",d),document.getElementById("highlight-dropdown").classList.remove("is-active")}function h(){const e=document.getElementById("highlight-dropdown");document.getElementById("highlight-button").addEventListener("click",t=>{t.stopPropagation(),e.classList.toggle("is-active"),e.classList.contains("is-active")?(document.body.addEventListener("click",d),u("staff"),u("syllable"),u("neume"),u("layerElement"),u("none")):document.body.removeEventListener("click",d)})}function f(){const{highlightMode:e}=(0,s.getSettings)();l(e)}t.setZoomControls=function(e){if(void 0===e)return;const t=document.getElementById("zoomSlider"),n=document.getElementById("zoomOutput"),{zoom:i}=(0,s.getSettings)();t.value=String(i),n.value=String(i),e.zoomTo(i/100),document.getElementById("reset-zoom").addEventListener("click",()=>{n.value="100",t.value="100",e.resetZoomAndPan()}),document.querySelector("#set-zoom-easy-edit").addEventListener("click",()=>{n.value="180",t.value="180",e.zoomTo(1.8)}),t.addEventListener("mouseup",(function(){n.value=t.value,e.zoomTo(Number(n.value)/100)})),t.disabled=!1,document.body.addEventListener("keydown",i=>{const s=parseInt(n.value);if("ArrowUp"===i.key||"ArrowDown"===i.key||"ArrowRight"===i.key||"ArrowLeft"===i.key)i.preventDefault();else if("+"===i.key){const i=Math.min(s+20,parseInt(t.getAttribute("max")));e.zoomTo(i/100),n.value=String(i),t.value=String(i)}else if("_"===i.key){const i=Math.max(s-20,parseInt(t.getAttribute("min")));e.zoomTo(i/100),n.value=String(i),t.value=String(i)}else"0"===i.key&&(n.value="100",t.value="100",e.resetZoomAndPan())})},t.setOpacityFromSlider=a,t.setBgOpacityFromSlider=c,t.getHighlightType=function(){return document.getElementById("highlight-type").textContent.slice(3).toLowerCase()},t.setHighlightOption=u,t.setHighlightControls=h,t.setHighlightSelectionControls=function(){const e=document.getElementById("highlight-selection");e.addEventListener("click",()=>{document.getElementById("highlight-dropdown").classList.remove("is-active"),document.querySelectorAll(".highlight-selected").forEach(e=>{e.classList.remove("highlight-selected")}),e.classList.add("highlight-selected"),document.getElementById("highlight-type").textContent=" - Selection",i.setGroupingHighlight("selection")})},t.updateHighlight=function(){let e;try{e=document.querySelector(".highlight-selected").id}catch(t){e=""}switch(e){case"highlight-staff":i.setGroupingHighlight("staff");break;case"highlight-syllable":i.setGroupingHighlight("syllable");break;case"highlight-neume":i.setGroupingHighlight("neume");break;case"highlight-layerElement":i.setGroupingHighlight("layerElement");break;case"highlight-selection":i.setGroupingHighlight("selection");break;default:i.unsetGroupingHighlight()}},t.loadHighlightSettings=f,t.initDisplayControls=function(e,t){!function(e){const t=document.getElementById("opacitySlider"),n=document.getElementById("opacityOutput"),{glyphOpacity:i}=(0,s.getSettings)();function o(){n.value=t.value,r=Number(t.value),a(e)}r=i,t.value=String(i),n.value=String(i);const c=document.getElementById("toggle-glyph-opacity");100==i&&c.classList.add("hide-icon"),null==c||c.addEventListener("click",()=>{let i;c.classList.contains("hide-icon")?(c.classList.remove("hide-icon"),i=0):(c.classList.add("hide-icon"),i=1),document.querySelectorAll("."+e).forEach(e=>{e.style.opacity=i.toString()}),r=Number(t.value),t.value=String(100*i),n.value=String(Math.round(100*i)),(0,s.setSettings)({glyphOpacity:100*i}),o()}),t.addEventListener("input",o),t.addEventListener("change",o),t.disabled=!1}(e),function(e){const t=document.getElementById("bgOpacitySlider"),n=document.getElementById("bgOpacityOutput"),{imageOpacity:i}=(0,s.getSettings)();function r(){n.value=t.value,o=Number(t.value),c(e)}o=i,t.value=String(i),n.value=String(i);const a=document.getElementById("toggle-bg-opacity");100==i&&a.classList.add("hide-icon"),a.addEventListener("click",()=>{let i;a.classList.contains("hide-icon")?(a.classList.remove("hide-icon"),i=0):(a.classList.add("hide-icon"),i=1),document.getElementsByClassName(e)[0].style.opacity=i.toString(),o=Number(t.value),t.value=String(100*i),n.value=String(Math.round(100*i)),(0,s.setSettings)({imageOpacity:100*i}),r()}),t.addEventListener("input",r),t.addEventListener("change",r),t.disabled=!1}(t),h(),document.getElementById("burgerMenu").addEventListener("click",()=>{document.getElementById("burgerMenu").classList.toggle("is-active"),document.getElementById("navMenu").classList.toggle("is-active")}),document.body.addEventListener("keydown",e=>{if(!e.metaKey)switch(e.key){case"q":l("staff");break;case"w":l("syllable");break;case"e":l("neume");break;case"r":l("layerElement");break;case"t":l("selection");break;case"y":l("none")}}),function(){const e=document.querySelector("#display-all-btn");e.addEventListener("click",()=>{if(e.classList.contains("selected")){e.classList.remove("selected"),e.innerHTML="Display All";const t=document.querySelectorAll(".checkbox-container > .checkbox");Array.from(t).forEach(e=>{e.checked&&e.click()})}else{e.classList.add("selected"),e.innerHTML="Hide All";const t=document.querySelectorAll(".checkbox-container > .checkbox");Array.from(t).forEach(e=>{e.checked||e.click()})}})}(),f();const n=document.getElementById("displayContents"),i=document.getElementById("toggleDisplay");document.getElementById("displayHeader").addEventListener("click",e=>{e.stopPropagation(),n.classList.contains("closed")?(n.classList.remove("closed"),n.style.padding="0.5em 0.75em",setTimeout(()=>{n.style.overflow="visible"},200),i.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(n.classList.add("closed"),n.style.overflow="hidden",setTimeout(()=>{n.style.padding="0px"},200),i.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModalWindow=t.ModalWindowView=void 0;const i=n(7),s=n(31),r=n(28);var o,a;!function(e){e[e.EDIT_TEXT=0]="EDIT_TEXT",e[e.HOTKEYS=1]="HOTKEYS",e[e.VALIDATION_STATUS=2]="VALIDATION_STATUS",e[e.DOCUMENT_UPLOAD=3]="DOCUMENT_UPLOAD"}(o=t.ModalWindowView||(t.ModalWindowView={})),function(e){e[e.OPEN=0]="OPEN",e[e.CLOSED=1]="CLOSED"}(a||(a={}));t.ModalWindow=class{constructor(e){this.openEditSylTextModalWindow=function(){Array.from(document.getElementsByClassName("neon-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),document.getElementById("neon-modal-window-content-edit-text").classList.add("visible"),document.getElementById("neon-modal-window-edit-text-cancel").removeEventListener("click",this.hideModalWindow),document.getElementById("neon-modal-window-edit-text-cancel").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("neon-modal-window-edit-text-save").removeEventListener("click",this.updateSylText.bind(this)),document.getElementById("neon-modal-window-edit-text-save").addEventListener("click",this.updateSylText.bind(this)),document.getElementById("neon-modal-window-container").style.display="flex",this.focusModalWindow()},this.updateSylText=function(){const e=document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0],t=e.textContent.replace(/\u{25CA}/u,"").trim(),n=document.getElementById("neon-modal-window-edit-text-input").value;if(null!==n&&n!==t){const t={action:"setText",param:{elementId:[...e.classList.entries()].filter(e=>"text-select"!==e[1]&&"selected-to-edit"!==e[1])[0][1],text:n}};this.neonView.edit(t,this.neonView.view.getCurrentPageURI()).then(t=>{t&&this.neonView.updateForCurrentPage().then(()=>{(0,r.updateSelectedBBox)(e,this.dragHandler,this.neonView)})})}this.hideModalWindow()},this.keydownListener=function(e){switch(e.stopImmediatePropagation(),this.modalWindowView){case o.EDIT_TEXT:"Enter"===e.key&&this.updateSylText();default:"Escape"===e.key&&this.hideModalWindow()}},this.focusModalWindow=function(){switch(this.modalWindowView){case o.EDIT_TEXT:document.getElementById("neon-modal-window-edit-text-input").select();break;default:document.getElementById("neon-modal-window").focus()}},this.neonView=e,this.modalWindowState=a.CLOSED,document.getElementById("neon-modal-window-header-close").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("neon-modal-window").addEventListener("keydown",this.keydownListener.bind(this)),document.getElementById("neon-modal-window-container").addEventListener("click",this.focusModalWindow.bind(this))}setModalWindowView(e,t){this.modalWindowView=e,this.setModalWindowContent(t)}getModalWindowView(){return this.modalWindowView.toString()}openModalWindow(){switch(Array.from(document.getElementsByClassName("neon-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),this.modalWindowView){case o.EDIT_TEXT:this.openEditSylTextModalWindow();break;case o.HOTKEYS:document.getElementById("neon-modal-window-content-hotkeys").classList.add("visible");case o.DOCUMENT_UPLOAD:default:document.getElementById("neon-modal-window-container").style.display="flex",this.focusModalWindow()}document.body.style.overflowX="hidden",document.body.style.overflowY="hidden",this.modalWindowState=a.OPEN}hideModalWindow(){switch(this.modalWindowView){case o.EDIT_TEXT:document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].classList.remove("selected-to-edit");default:document.getElementById("neon-modal-window-container").style.display="none",this.modalWindowView!==o.DOCUMENT_UPLOAD&&document.getElementById("container").focus()}document.body.style.overflowX="hidden",document.body.style.overflowY="scroll",this.modalWindowState=a.CLOSED}setModalWindowContent(e){switch(this.modalWindowView){case o.EDIT_TEXT:document.getElementById("neon-modal-window-content-container").innerHTML=i.editTextModal,document.getElementById("neon-modal-window-header-title").innerText="EDIT SYLLABLE TEXT";const t=/\u{25CA}/u,n=document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].textContent.replace(t,"").trim();document.getElementById("neon-modal-window-edit-text-input").value=n;break;case o.HOTKEYS:document.getElementById("neon-modal-window-content-container").innerHTML=i.hotkeysModal,document.getElementById("neon-modal-window-header-title").innerText="HOTKEYS";break;case o.VALIDATION_STATUS:document.getElementById("neon-modal-window-content-container").innerHTML=`<div style="margin-bottom: 30px;white-space: pre-line;">${e}</div>\n          <div class="neon-modal-window-btn">\n            <a href="data:text/plain;charset=utf-8,${encodeURIComponent(e)}" download="validation.log">\n              Export\n            </a>\n            </div>`,document.getElementById("neon-modal-window-header-title").innerText="ERROR LOG";break;case o.DOCUMENT_UPLOAD:document.getElementById("neon-modal-window-header-title").innerText="DOCUMENT UPLOAD",document.getElementById("neon-modal-window-content-container").innerHTML=s.uploadAreaHTML;break;default:console.error("Unknown selection type. This should not have occurred.")}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(8),s=n(11),r=n(4),o=n(3);t.default=class{constructor(e,t){this.dragStartCoords=[-1,-1],this.neonView=e,this.selector=t}dragInit(){const e=i.drag().on("start",function(){this.dragStartCoords=[i.event.x,i.event.y],this.dx=0,this.dy=0,i.event.sourceEvent.target.classList.contains("staff")&&i.select(this.selector).call(e)}.bind(this)).on("drag",this.dragging.bind(this)).on("end",this.dragEnded.bind(this));i.selectAll(".selected").call(e);let t=Array.from(document.querySelectorAll(".selected"));this.noMovePrecedes=t.filter(e=>e.classList.contains("no-moving")&&e.hasAttribute("mei:precedes")),t=t.filter(e=>!e.classList.contains("no-moving")),this.selection=t.concat(Array.from(document.querySelectorAll(".resizePoint")))}dragging(){this.dx=i.event.x-this.dragStartCoords[0],this.dy=i.event.y-this.dragStartCoords[1],this.moveElements(this.selection,this.dx,this.dy);if(0===this.selection.filter(e=>e.classList.contains("syl")).length&&0===this.noMovePrecedes.length){const e=Array.from(document.querySelectorAll(".syllable.selected")).map(e=>e.querySelector(".sylTextRect-display"));this.moveElements(e,-this.dx,-this.dy)}}dragEnded(){const e=Math.abs(this.dx),t=Math.abs(this.dy);if(e<=5&&t<=5)return this.reset(),void this.dragInit();const n=this.selection.filter(e=>!e.classList.contains("resizePoint"));if(this.isCursorOutOfBounds()||this.isDragOutOfBounds(n)){this.returnElements(this.selection);const e=Array.from(document.querySelectorAll(".syllable.selected")).map(e=>e.querySelector(".sylTextRect-display"));return this.returnElements(e),this.reset(),this.dragInit(),(0,r.queueNotification)("[FAIL] Glyphs were placed out of bounds! Drag action failed.","error")}const i=[];n.forEach(e=>{const t={action:"drag",param:{elementId:"rect"===e.tagName?e.closest(".syl").id:e.id,x:this.dx,y:-this.dy}};i.push(t)});const s={action:"chain",param:i};this.neonView.edit(s,this.neonView.view.getCurrentPageURI()).then(async()=>{const e=Array.from(document.querySelectorAll(".selected")).filter(e=>!e.classList.contains("no-moving")).map(e=>e.id);await this.neonView.updateForCurrentPage(),this.endOptionsSelection(),this.reset(),await this.reselect(e),this.dragInit()})}async reselect(e){const t=e.map(e=>document.querySelector("#"+e));t.filter(e=>!e.classList.contains("syl")).forEach(async()=>await(0,o.selectAll)(t,this.neonView,this)),t.filter(e=>e.classList.contains("syl")).forEach(e=>(0,o.selectBBox)(e.querySelector(".sylTextRect-display"),this,this.neonView)),t.filter(e=>e.classList.contains("staff")).forEach(e=>(0,o.selectStaff)(e,this))}resetTo(e){this.resetToAction=e}reset(){void 0!==this.resetToAction&&i.select(this.selector).call(this.resetToAction)}endOptionsSelection(){const e=document.getElementById("moreEdit"),t=document.getElementById("extraEdit");e&&(e.innerHTML="",e.parentElement.classList.add("hidden")),t&&(t.innerHTML="",t.parentElement.classList.add("hidden"))}moveElements(e,t,n){e.filter(e=>null!==e).forEach(e=>{e.setAttribute("transform",`translate(${t},${n})`)})}returnElements(e){e.filter(e=>null!==e).forEach(e=>{e.removeAttribute("transform")})}isCursorOutOfBounds(){const e=this.dragStartCoords[0]+this.dx,t=this.dragStartCoords[1]+this.dy;return(0,s.isOutOfSVGBounds)(e,t)}isDragOutOfBounds(e){let t=document.querySelector("#displayBBox").checked?"use, rect":"use";e[0].classList.contains("staff")&&(t="path");const n=e.reduce((e,n)=>e.concat(...n.querySelectorAll(t)),[]).map(s.getGlyphBBox).reduce((e,t)=>({ulx:Math.min(e.ulx,t.ulx),uly:Math.min(e.uly,t.uly),lrx:Math.max(e.lrx,t.lrx),lry:Math.max(e.lry,t.lry)}),{ulx:Number.MAX_VALUE,uly:Number.MAX_VALUE,lrx:Number.MIN_VALUE,lry:Number.MIN_VALUE}),{ulx:i,uly:r,lrx:o,lry:a}=n;return(0,s.isOutOfSVGBounds)(i+this.dx,r+this.dy)||(0,s.isOutOfSVGBounds)(o+this.dx,a+this.dy)}}},function(e,t,n){"use strict";var i=n(42),s=t.ValidationError=function(e,t,n,i,s,r){if(Array.isArray(i)?(this.path=i,this.property=i.reduce((function(e,t){return e+d(t)}),"instance")):void 0!==i&&(this.property=i),e&&(this.message=e),n){var o=n.$id||n.id;this.schema=o||n}void 0!==t&&(this.instance=t),this.name=s,this.argument=r,this.stack=this.toString()};s.prototype.toString=function(){return this.property+" "+this.message};var r=t.ValidatorResult=function(e,t,n,i){this.instance=e,this.schema=t,this.options=n,this.path=i.path,this.propertyPath=i.propertyPath,this.errors=[],this.throwError=n&&n.throwError,this.throwFirst=n&&n.throwFirst,this.throwAll=n&&n.throwAll,this.disableFormat=n&&!0===n.disableFormat};function o(e,t){return t+": "+e.toString()+"\n"}function a(e){Error.captureStackTrace&&Error.captureStackTrace(this,a),this.instance=e.instance,this.schema=e.schema,this.options=e.options,this.errors=e.errors}r.prototype.addError=function(e){var t;if("string"==typeof e)t=new s(e,this.instance,this.schema,this.path);else{if(!e)throw new Error("Missing error detail");if(!e.message)throw new Error("Missing error message");if(!e.name)throw new Error("Missing validator type");t=new s(e.message,this.instance,this.schema,this.path,e.name,e.argument)}if(this.errors.push(t),this.throwFirst)throw new a(this);if(this.throwError)throw t;return t},r.prototype.importErrors=function(e){"string"==typeof e||e&&e.validatorType?this.addError(e):e&&e.errors&&(this.errors=this.errors.concat(e.errors))},r.prototype.toString=function(e){return this.errors.map(o).join("")},Object.defineProperty(r.prototype,"valid",{get:function(){return!this.errors.length}}),e.exports.ValidatorResultError=a,a.prototype=new Error,a.prototype.constructor=a,a.prototype.name="Validation Error";var c=t.SchemaError=function e(t,n){this.message=t,this.schema=n,Error.call(this,t),Error.captureStackTrace(this,e)};c.prototype=Object.create(Error.prototype,{constructor:{value:c,enumerable:!1},name:{value:"SchemaError",enumerable:!1}});var l=t.SchemaContext=function(e,t,n,i,s){this.schema=e,this.options=t,Array.isArray(n)?(this.path=n,this.propertyPath=n.reduce((function(e,t){return e+d(t)}),"instance")):this.propertyPath=n,this.base=i,this.schemas=s};l.prototype.resolve=function(e){return i.resolve(this.base,e)},l.prototype.makeChild=function(e,t){var n=void 0===t?this.path:this.path.concat([t]),s=e.$id||e.id,r=i.resolve(this.base,s||""),o=new l(e,this.options,n,r,Object.create(this.schemas));return s&&!o.schemas[r]&&(o.schemas[r]=e),o};var u=t.FORMAT_REGEXPS={"date-time":/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,date:/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,time:/^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,duration:/P(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S)|\d+(D|M(\d+D)?|Y(\d+M(\d+D)?)?)(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S))?|\d+W)/i,email:/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,"idn-email":/^("(?:[!#-\[\]-\u{10FFFF}]|\\[\t -\u{10FFFF}])*"|[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*)@([!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*|\[[!-Z\^-\u{10FFFF}]*\])$/u,"ip-address":/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,ipv6:/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,uri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"uri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,iri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"iri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\u{10FFFF}]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/u,uuid:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,"uri-template":/(%[0-9a-f]{2}|[!#$&(-;=?@\[\]_a-z~]|\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?)*\})*/iu,"json-pointer":/^(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*$/iu,"relative-json-pointer":/^\d+(#|(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*)$/iu,hostname:/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"host-name":/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"utc-millisec":function(e){return"string"==typeof e&&parseFloat(e)===parseInt(e,10)&&!isNaN(e)},regex:function(e){var t=!0;try{new RegExp(e)}catch(e){t=!1}return t},style:/[\r\n\t ]*[^\r\n\t ][^:]*:[\r\n\t ]*[^\r\n\t ;]*[\r\n\t ]*;?/,color:/^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,phone:/^\+(?:[0-9] ?){6,14}[0-9]$/,alpha:/^[a-zA-Z]+$/,alphanumeric:/^[a-zA-Z0-9]+$/};u.regexp=u.regex,u.pattern=u.regex,u.ipv4=u["ip-address"],t.isFormat=function(e,t,n){if("string"==typeof e&&void 0!==u[t]){if(u[t]instanceof RegExp)return u[t].test(e);if("function"==typeof u[t])return u[t](e)}else if(n&&n.customFormats&&"function"==typeof n.customFormats[t])return n.customFormats[t](e);return!0};var d=t.makeSuffix=function(e){return(e=e.toString()).match(/[.\s\[\]]/)||e.match(/^[\d]/)?e.match(/^\d+$/)?"["+e+"]":"["+JSON.stringify(e)+"]":"."+e};function h(e,t,n,i){"object"==typeof n?t[i]=p(e[i],n):-1===e.indexOf(n)&&t.push(n)}function f(e,t,n){t[n]=e[n]}function g(e,t,n,i){"object"==typeof t[i]&&t[i]&&e[i]?n[i]=p(e[i],t[i]):n[i]=t[i]}function p(e,t){var n=Array.isArray(t),i=n&&[]||{};return n?(e=e||[],i=i.concat(e),t.forEach(h.bind(null,e,i))):(e&&"object"==typeof e&&Object.keys(e).forEach(f.bind(null,e,i)),Object.keys(t).forEach(g.bind(null,e,t,i))),i}function m(e){return"/"+encodeURIComponent(e).replace(/~/g,"%7E")}t.deepCompareStrict=function e(t,n){if(typeof t!=typeof n)return!1;if(Array.isArray(t))return!!Array.isArray(n)&&(t.length===n.length&&t.every((function(i,s){return e(t[s],n[s])})));if("object"==typeof t){if(!t||!n)return t===n;var i=Object.keys(t),s=Object.keys(n);return i.length===s.length&&i.every((function(i){return e(t[i],n[i])}))}return t===n},e.exports.deepMerge=p,t.objectGetPath=function(e,t){for(var n,i=t.split("/").slice(1);"string"==typeof(n=i.shift());){var s=decodeURIComponent(n.replace(/~0/,"~").replace(/~1/g,"/"));if(!(s in e))return;e=e[s]}return e},t.encodePath=function(e){return e.map(m).join("")},t.getDecimalPlaces=function(e){var t=0;if(isNaN(e))return t;"number"!=typeof e&&(e=Number(e));var n=e.toString().split("e");if(2===n.length){if("-"!==n[1][0])return t;t=Number(n[1].slice(1))}var i=n[0].split(".");return 2===i.length&&(t+=i[1].length),t},t.isSchema=function(e){return"object"==typeof e&&e||"boolean"==typeof e}},function(e,t,n){"use strict";var i;n.d(t,"a",(function(){return r}));var s=new Uint8Array(16);function r(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(s)}},function(e,t,n){"use strict";function i(e,t,n){var i=n[n.length-1];e===i.element&&(n.pop(),i=n[n.length-1]);var s=i.element,r=i.index;if(Array.isArray(s))s.push(e);else if(r===t.length-2){s[t.pop()]=e}else t.push(e)}t.stringify=function(e){var t=[];t.push({obj:e});for(var n,i,s,r,o,a,c,l,u,d,h="";n=t.pop();)if(i=n.obj,h+=n.prefix||"",s=n.val||"")h+=s;else if("object"!=typeof i)h+=void 0===i?null:JSON.stringify(i);else if(null===i)h+="null";else if(Array.isArray(i)){for(t.push({val:"]"}),r=i.length-1;r>=0;r--)o=0===r?"":",",t.push({obj:i[r],prefix:o});t.push({val:"["})}else{for(c in a=[],i)i.hasOwnProperty(c)&&a.push(c);for(t.push({val:"}"}),r=a.length-1;r>=0;r--)u=i[l=a[r]],d=r>0?",":"",d+=JSON.stringify(l)+":",t.push({obj:u,prefix:d});t.push({val:"{"})}return h},t.parse=function(e){for(var t,n,s,r,o,a,c,l,u,d=[],h=[],f=0;;)if("}"!==(t=e[f++])&&"]"!==t&&void 0!==t)switch(t){case" ":case"\t":case"\n":case":":case",":break;case"n":f+=3,i(null,d,h);break;case"t":f+=3,i(!0,d,h);break;case"f":f+=4,i(!1,d,h);break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"-":for(n="",f--;;){if(s=e[f++],!/[\d\.\-e\+]/.test(s)){f--;break}n+=s}i(parseFloat(n),d,h);break;case'"':for(r="",o=void 0,a=0;'"'!==(c=e[f++])||"\\"===o&&a%2==1;)r+=c,"\\"===(o=c)?a++:a=0;i(JSON.parse('"'+r+'"'),d,h);break;case"[":l={element:[],index:d.length},d.push(l.element),h.push(l);break;case"{":u={element:{},index:d.length},d.push(u.element),h.push(u);break;default:throw new Error("unexpectedly reached end of input: "+t)}else{if(1===d.length)return d.pop();i(d.pop(),d,h)}}},function(e,t,n){"use strict";var i=n(20),s=n(9);t.a=function(e,t,n){var r=(e=e||{}).random||(e.rng||i.a)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=r[o];return t}return Object(s.a)(r)}},function(e,t,n){"use strict";function i(e){if(16!==e.length)return"";function t(e,t){return e+t.toString(16).padStart(2,"0")}return e.slice(0,4).reduce(t,"")+"-"+e.slice(4,6).reduce(t,"")+"-"+e.slice(6,8).reduce(t,"")+"-"+e.slice(8,10).reduce(t,"")+"-"+e.slice(10).reduce(t,"")}Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0,t.uuidv4=function(){if(void 0===window.crypto)return i(new Uint8Array(16));const e=new Uint8Array(16),t=Uint8Array.from([parseInt("01000000",2),parseInt("10000000",2),parseInt("00001111",2),parseInt("00111111",2)]);return window.crypto.getRandomValues(e),e[6]=e[6]&t[2]|t[0],e[8]=e[8]&t[3]|t[1],i(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initGroupingListeners=t.endGroupingSelection=t.triggerGrouping=t.mergeStaves=t.isLinkable=t.isLinked=t.isGroupable=t.initNeonView=void 0;const i=n(7),s=n(32),r=n(4),o=n(3),a=n(13),c=n(13);let l;function u(e,t){if(Array.from(t.values()).length<2)return!1;switch(e){case"selByNeume":if(o.sharedLogicalParent(e,t))return!1;default:return!!o.areAdjacent(e,t)}}function d(e){return 2===e.length&&(e[0].getAttribute("mei:follows")==="#"+e[1].id&&e[1].getAttribute("mei:precedes")==="#"+e[0].id||e[0].getAttribute("mei:precedes")==="#"+e[1].id&&e[1].getAttribute("mei:follows")==="#"+e[0].id)}function h(e,t){switch(t.length){case 2:if("selBySyllable"!==e)return!1;if(d([t[0],t[1]]))return!0;if(o.isMultiStaveSelection(t)){const e=t[0].closest(".staff"),n=t[1].closest(".staff"),i=Array.from(e.parentElement.children),s=i.indexOf(e)<i.indexOf(n)?e:n,r=s.id===e.id?n:e,o=s.querySelector(".layer"),a=r.querySelector(".layer"),c=Array.from(o.children).filter(e=>e.classList.contains("syllable")),l=Array.from(a.children).filter(e=>e.classList.contains("syllable")),u=c[c.length-1],d=l[0];if(u.id===t[0].id&&d.id===t[1].id)return!0;if(u.id===t[1].id&&d.id===t[0].id)return!0}default:return!1}return!1}function f(){const e=document.querySelectorAll(".staff.selected"),t=[];e.forEach(e=>{t.push(e.id)});const n={action:"merge",param:{elementIds:t}};l.edit(n,l.view.getCurrentPageURI()).then(e=>{e?(r.queueNotification("Staff Merged","success"),a.endOptionsSelection(),l.updateForCurrentPage()):r.queueNotification("Merge Failed","error")})}function g(){const e=document.getElementById("moreEdit");e.innerHTML="",e.parentElement.classList.add("hidden"),document.body.removeEventListener("keydown",c.deleteButtonHandler),document.body.removeEventListener("keydown",m)}function p(){const e=document.getElementById("delete");e.removeEventListener("click",c.removeHandler),e.addEventListener("click",c.removeHandler),document.body.addEventListener("keydown",c.deleteButtonHandler),document.body.addEventListener("keydown",m);try{document.getElementById("mergeSyls").addEventListener("click",()=>{v("group","neume",w().filter(e=>document.getElementById(e).classList.contains("neume")))})}catch(e){}try{document.getElementById("groupNeumes").addEventListener("click",()=>{v("group","neume",b())})}catch(e){}try{document.getElementById("groupNcs").addEventListener("click",()=>{v("group","nc",b())})}catch(e){}try{document.getElementById("ungroupNeumes").addEventListener("click",()=>{v("ungroup","neume",w())})}catch(e){}try{document.getElementById("ungroupNcs").addEventListener("click",()=>{v("ungroup","nc",w())})}catch(e){}try{document.getElementById("toggle-ligature").addEventListener("click",async()=>{const e={action:"toggleLigature",param:{elementIds:b()}};l.edit(e,l.view.getCurrentPageURI()).then(e=>{e?r.queueNotification("Ligature Toggled","success"):r.queueNotification("Ligature Toggle Failed","error"),g(),l.updateForCurrentPage()})})}catch(e){}try{document.getElementById("toggle-link").addEventListener("click",()=>{y()})}catch(e){}}t.initNeonView=function(e){l=e},t.isGroupable=u,t.isLinked=d,t.isLinkable=h,t.mergeStaves=f,t.triggerGrouping=function(e){const t=document.getElementById("moreEdit");t.parentElement.classList.remove("hidden"),t.innerHTML+=i.groupingMenu[e],p()},t.endGroupingSelection=g,t.initGroupingListeners=p;const m=function(e){if("g"===e.key){const e=Array.from(document.querySelectorAll(".selected"));if(0==e.length)return;const t=o.getSelectionType();switch(t){case"selBySyllable":if(h(t,e))y();else if(u(t,e)){v("group","neume",w().filter(e=>document.getElementById(e).classList.contains("neume")))}else if(1===e.length){v("ungroup","neume",w())}break;case"selByNeume":if(u(t,e)){v("group","neume",b())}else{v("ungroup","nc",w())}break;case"selByNc":if(u(t,e)){v("group","nc",b())}else{v("ungroup","nc",w())}break;case"selByStaff":u(t,e)?f():a.triggerStaffSplitMode();break;default:return void console.error(`Can't perform grouping/ungrouping action on selection type ${t}.`)}}};function v(e,t,n){const i={action:e,param:{groupType:t,elementIds:n}};l.edit(i,l.view.getCurrentPageURI()).then(i=>{if(i?"group"===e?r.queueNotification("Grouping Success","success"):r.queueNotification("Ungrouping Success","success"):"group"===e?r.queueNotification("Grouping Failed","error"):r.queueNotification("Ungrouping Failed","error"),l.updateForCurrentPage(),"nc"===t){const e=document.getElementById(n[0]).parentElement,t=Array.from(e.children);void 0===l.info.getContour(t)&&s.groupingNotRecognized()}g()})}function y(){const e=b(),t={action:"chain",param:[]},n=new Array;if(document.getElementById(e[0]).getAttribute("mei:precedes"))n.push({action:"set",param:{elementId:e[0],attrType:"precedes",attrValue:""}}),n.push({action:"set",param:{elementId:e[1],attrType:"follows",attrValue:""}}),n.push({action:"setText",param:{elementId:e[1],text:""}});else if(document.getElementById(e[0]).getAttribute("mei:follows"))n.push({action:"set",param:{elementId:e[0],attrType:"follows",attrValue:""}}),n.push({action:"set",param:{elementId:e[1],attrType:"precedes",attrValue:""}}),n.push({action:"setText",param:{elementId:e[0],text:""}});else{const t=document.getElementById(e[0]),i=document.getElementById(e[1]),s=t.closest(".staff"),r=i.closest(".staff"),o=Array.from(s.parentElement.children).filter(e=>e.classList.contains("staff"));let a,c;o.indexOf(s)<o.indexOf(r)?(a=t,c=i):(a=i,c=t),n.push({action:"set",param:{elementId:a.id,attrType:"precedes",attrValue:"#"+c.id}}),n.push({action:"set",param:{elementId:c.id,attrType:"follows",attrValue:"#"+a.id}});const l=c.querySelector(".syl");null!==l&&n.push({action:"remove",param:{elementId:l.id}})}t.param=n,l.edit(t,l.view.getCurrentPageURI()).then(e=>{e?r.queueNotification("Toggled Syllable Link"):r.queueNotification("Failed to Toggle Syllable Link"),g(),l.updateForCurrentPage()})}function b(){const e=[];return Array.from(document.getElementsByClassName("selected")).forEach(t=>{e.push(t.id)}),e}function w(){const e=[];return Array.from(document.getElementsByClassName("selected")).forEach(t=>{if(t.classList.contains("divLine")||t.classList.contains("accid")||t.classList.contains("clef"))return;Array.from(t.children).forEach(t=>{e.push(t.id)})}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resize=void 0;const i=n(3),s=n(8),r=n(11),o=n(4),a={TopLeft:0,Top:1,TopRight:2,Right:3,BottomRight:4,Bottom:5,BottomLeft:6,Left:7};function c(e,t,n,i,s){let r;if(s>=0)r=[{x:e,y:t,name:a.TopLeft},{x:(e+n)/2,y:t+(n-e)/2*Math.sin(s),name:a.Top},{x:n,y:t+(n-e)*Math.sin(s),name:a.TopRight},{x:n,y:(t+i+(n-e)*Math.sin(s))/2,name:a.Right},{x:n,y:i,name:a.BottomRight},{x:(e+n)/2,y:i-(n-e)/2*Math.sin(s),name:a.Bottom},{x:e,y:i-(n-e)*Math.sin(s),name:a.BottomLeft},{x:e,y:(t+i-(n-e)*Math.sin(s))/2,name:a.Left}];else{const o=(n-e)*Math.tan(Math.abs(s)),c=i-t-o;r=[{x:e,y:t+o,name:a.TopLeft},{x:(e+n)/2,y:t+o/2,name:a.Top},{x:n,y:t,name:a.TopRight},{x:n,y:t+c/2,name:a.Right},{x:n,y:t+c,name:a.BottomRight},{x:(e+n)/2,y:i-o/2,name:a.Bottom},{x:e,y:i,name:a.BottomLeft},{x:e,y:i-c/2,name:a.Left}]}return r}t.resize=function(e,t,n){let l,u,d,h,f,g,p,m,v,y,b,w,_,E,S;function L(){const e=c(l,u,d,h,f),t=e.filter((e,t)=>t%2==0).map(e=>e.x+","+e.y).join(" ");document.querySelector("#resizeRect").setAttribute("points",t);const n=document.querySelector(".syl.selected > .sylTextRect-display");n&&(n.setAttribute("x",String(Math.min(l,d))),n.setAttribute("y",String(Math.min(u,h))),n.setAttribute("width",String(Math.abs(d-l))),n.setAttribute("height",String(Math.abs(h-u))));for(const t in a){const n=e[a[t]];s.select("#p-"+t).filter(".resizePoint").attr("cx",n.x).attr("cy",n.y)}let i=e[3].x,r=e[3].y;const o=i+100+","+(r+85)+" "+(i+70)+","+(r+50)+" "+(i+100)+","+(r+15)+" "+(i+130)+","+(r+50);i=e[7].x,r=e[7].y;const g=i-100+","+(r-15)+" "+(i-130)+","+(r-50)+" "+(i-100)+","+(r-85)+" "+(i-70)+","+(r-50);s.select("#rotateLeft").attr("points",g),s.select("#rotateRight").attr("points",o)}!function x(){if(null===e)return;if(e.classList.contains("syl")){const t=e.querySelector(".sylTextRect-display");if(null===t)return void console.warn("Tried to draw resize rect for a sylTextRect that doesn't exist (or isn't displaying)");l=Number(t.getAttribute("x")),u=Number(t.getAttribute("y")),d=+l+ +t.getAttribute("width"),h=+u+ +t.getAttribute("height"),f=0}if(e.classList.contains("staff")){const t=(0,i.getStaffBBox)(e);l=t.ulx,u=t.uly,d=t.lrx,h=t.lry;const n=e.querySelector("path").getAttribute("d").match(/\d+/g).map(e=>Number(e));f=Math.atan((n[3]-n[1])/(n[2]-n[0]))}let k;g=l,v=u,p=d,y=h;const A=c(l,u,d,h,f);_=A[2].x-A[0].x;const C=A.filter((e,t)=>t%2==0).map(e=>e.x+","+e.y).join(" ");s.select("#"+e.id).append("polygon").attr("points",C).attr("id","resizeRect").attr("stroke","black").attr("stroke-width",10).attr("fill","none").style("cursor","move").style("stroke-dasharray","20 10");for(const t in a){const n=A[a[t]];s.select(e.viewportElement).append("circle").attr("cx",n.x).attr("cy",n.y).attr("r",25).attr("stroke","black").attr("stroke-width",4).attr("fill","#0099ff").attr("class","resizePoint").attr("id","p-"+t)}for(const e in a)s.select("#p-"+e).filter(".resizePoint").call(s.drag().on("start",()=>{I(e)}).on("drag",P).on("end",O.bind(this)));if(e.classList.contains("staff")){let t=A[3].x,n=A[3].y;const i=t+100+","+(n+85)+" "+(t+70)+","+(n+50)+" "+(t+100)+","+(n+15)+" "+(t+130)+","+(n+50);t=A[7].x,n=A[7].y;const r=t-100+","+(n-15)+" "+(t-130)+","+(n-50)+" "+(t-100)+","+(n-85)+" "+(t-70)+","+(n-50);s.select("#"+e.id).append("polygon").attr("points",i).attr("id","rotateRight").attr("stroke","black").attr("stroke-width",7).attr("fill","#0099ff").attr("class","rotatePoint"),s.select("#"+e.id).append("polygon").attr("points",r).attr("id","rotateLeft").attr("stroke","black").attr("stroke-width",7).attr("fill","#0099ff").attr("class","rotatePoint"),s.select("#rotateLeft").call(s.drag().on("start",B).on("drag",(function(){const e=s.mouse(this)[1]-b,t=S-Math.atan(e/_);t>-.2&&t<.2&&(E=e,u=w+E,f=t,f>=0?(u=E+A.filter(e=>e.name===a.TopLeft)[0].y,h=A.filter(e=>e.name===a.BottomRight)[0].y):(u=A.filter(e=>e.name===a.TopRight)[0].y,h=E+A.filter(e=>e.name===a.BottomLeft)[0].y));L()})).on("end",T)),s.select("#rotateRight").call(s.drag().on("start",B).on("drag",(function(){const e=s.mouse(this)[1]-b,t=S+Math.atan(e/_);t>-.2&&t<.2&&(E=e,f=t,f>=0?(h=E+A.filter(e=>e.name===a.BottomRight)[0].y,u=A.filter(e=>e.name===a.TopLeft)[0].y):(u=E+A.filter(e=>e.name===a.TopRight)[0].y,h=A.filter(e=>e.name===a.BottomLeft)[0].y));L()})).on("end",T))}function I(e){k=e;const t=A.find(t=>t.name===a[e]);m=[t.x,t.y],v=u,y=h}function P(){const e=s.mouse(this);switch(a[k]){case a.TopLeft:l=e[0],u=e[1];break;case a.Top:u=e[1]-(d-l)*Math.tan(f)/2;break;case a.TopRight:d=e[0],u=e[1]-(d-l)*Math.tan(f);break;case a.Right:d=e[0],h=y+(e[0]-m[0])*Math.tan(f);break;case a.BottomRight:d=e[0],h=e[1];break;case a.Bottom:h=e[1]+(d-l)*Math.tan(f)/2;break;case a.BottomLeft:l=e[0],h=e[1]+(d-l)*Math.tan(f);break;case a.Left:l=e[0],u=v+(e[0]-m[0])*Math.tan(f);break;default:console.error("Something that wasn't a side of the rectangle was dragged. This shouldn't happen.")}L()}function O(){if((0,r.isOutOfSVGBounds)(l,u)||(0,r.isOutOfSVGBounds)(d,h))return l=g,u=v,d=p,h=y,L(),(0,o.queueNotification)("[FAIL] Glyphs were placed out of bounds! Resize action failed.","error");const a={action:"resize",param:{elementId:e.id,ulx:l,uly:u,lrx:d,lry:h}};t.edit(a,t.view.getCurrentPageURI()).then(async r=>{if(r&&await t.updateForCurrentPage(),e=document.querySelector("#"+e.id),l=void 0,u=void 0,d=void 0,h=void 0,s.selectAll(".resizePoint").remove(),s.selectAll("#resizeRect").remove(),s.selectAll(".rotatePoint").remove(),x(),e.classList.contains("syl"))(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this);else{(0,i.selectAll)([document.querySelector("#"+e.id)],t,n);const s=document.querySelector("moreEdit");s&&(s.innerHTML="",s.parentElement.classList.add("hidden"))}})}function B(){const e=s.event.sourceEvent.target.id;b=s.mouse(this)[1],y=h,v=u,w="rotateRight"===e?h:u,S=f}function T(){if(void 0===E&&(E=0),(0,r.isOutOfSVGBounds)(l,u)||(0,r.isOutOfSVGBounds)(d,h))return document.querySelectorAll(".resizePoint").forEach(e=>e.remove()),document.querySelectorAll("#resizeRect").forEach(e=>e.remove()),document.querySelectorAll(".rotatePoint").forEach(e=>e.remove()),e=document.getElementById(e.id),l=void 0,u=void 0,d=void 0,h=void 0,E=void 0,x(),e.classList.contains("syl")?(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this):(0,i.selectStaff)(e,n),(0,o.queueNotification)("[FAIL] Glyphs were placed out of bounds! Rotate action failed.","error");const s={action:"resizeRotate",param:{elementId:e.id,ulx:l,uly:u,lrx:d,lry:h,rotate:180*f/Math.PI}};t.edit(s,t.view.getCurrentPageURI()).then(async s=>{s&&await t.updateForCurrentPage(),e=document.getElementById(e.id),l=void 0,u=void 0,d=void 0,h=void 0,E=void 0,x(),(0,i.selectAll)([e],t,n),e.classList.contains("syl")?(0,i.selectBBox)(e.querySelector(".sylTextRect-display"),n,this):(0,i.selectStaff)(e,n)})}}()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dragSelect=t.clickSelect=t.setSelectHelperObjects=t.setSelectStrokeWidth=void 0;const i=n(3),s=n(25),r=n(8),o=n(11);let a,c,l,u,d=7;function h(e){"Escape"===e.key&&(document.getElementsByClassName("selected").length>0&&l.infoListeners(),(0,i.unselect)())}function f(e){if("selByBBox"!==(0,i.getSelectionType)()||!document.getElementById("displayText").checked||"Enter"!==e.key)return;const t=document.querySelector(".syllable-highlighted");if(t){document.querySelector("span."+t.id).click()}}function g(e){if("selByBBox"!==(0,i.getSelectionType)()||"ArrowLeft"!==e.key&&"ArrowRight"!==e.key)return;const t=document.querySelector(".syllable-highlighted"),n=Array.from(document.querySelectorAll(".syllable")).filter(e=>null!==e.querySelector(".sylTextRect-display")),s=n.indexOf(t);if("ArrowLeft"===e.key&&s>0){(0,i.unselect)();const e=n[s-1].querySelector(".sylTextRect-display");(0,i.selectAll)([e],c,a)}else if("ArrowRight"===e.key&&s<n.length-1){(0,i.unselect)();const e=n[s+1].querySelector(".sylTextRect-display");(0,i.selectAll)([e],c,a)}}function p(){const e=document.getElementById("selByBBox");return!!e&&e.classList.contains("is-active")}function m(e){e.stopPropagation()}function v(e,t,n){if(p()||"use"===e.tagName){const s=function(e){if(p()){const t=Number(e.getAttribute("x")),n=Number(e.getAttribute("y"));return{ulx:t,uly:n,lrx:t+Number(e.getAttribute("width").slice(0,-2)),lry:n+Number(e.getAttribute("height").slice(0,-2))}}if("use"===e.tagName){const t=e.parentNode.getBBox();return{ulx:t.x,uly:t.y,lrx:t.x+t.width,lry:t.y+t.height}}return(0,i.getStaffBBox)(e)}(e);return!(n.x<s.ulx||t.x>s.lrx||n.y<s.uly||t.y>s.lry)}const s=(0,i.getStaffBBox)(e);return!(t.x<s.ulx&&n.x<s.ulx||t.x>s.lrx&&n.x>s.lrx||t.y<s.uly+Math.abs(s.ulx-t.x)*Math.tan(s.rotate)&&n.y<s.uly+Math.abs(s.ulx-t.x)*Math.tan(s.rotate)||t.y>s.lry+Math.abs(s.lry-n.y)*Math.tan(s.rotate)&&n.y>s.lry+Math.abs(s.lry-n.y)*Math.tan(s.rotate))}function y(e){if(c&&"insert"!==c.getUserMode()&&!e.shiftKey)if("use"===this.tagName&&"selByBBox"!==(0,i.getSelectionType)()){if(null===this.closest(".selected")){let e=[this];const n=/E9B[45678]/,s=/E9B[9ABC]/;if(this.getAttribute("xlink:href").match(s)){const t=this.closest(".nc"),i=this.closest(".neume"),s=Array.from(i.children).indexOf(t),r=i.children[s-1].children[0];console.assert(r.getAttribute("xlink:href").match(n),"First glyph of ligature unexpected!"),null===r.closest(".selected")&&e.unshift(r)}else if(this.getAttribute("xlink:href").match(n)){const t=this.closest(".nc"),n=this.closest(".neume"),i=Array.from(n.children).indexOf(t),r=n.children[i+1].children[0];console.assert(r.getAttribute("xlink:href").match(s),"Second glyph of ligature unexpected!"),null===r.closest(".selected")&&e.push(r)}t()&&(e=e.concat(Array.from(document.querySelectorAll(".selected")))),(0,i.selectAll)(e,c,a),a&&a.dragInit()}else if(t()){const e={selByStaff:".staff",selByNeume:".neume",selByNc:".nc",selByLayerElement:".accid"}[document.querySelector(".sel-by .is-active").id]||".syllable",t=[this.closest(e)];let n=[];n=Array.from(document.getElementsByClassName("selected")),n=n.filter(e=>!t.includes(e)),(0,i.selectAll)(n,c,a),a&&a.dragInit()}}else if("rect"===e.target.tagName&&"selByBBox"===(0,i.getSelectionType)())if(null===this.closest(".selected")){let n=[e.target];t()&&(n=n.concat(Array.from(document.getElementsByClassName("selected"))),n=n.map(e=>"rect"==e.tagName?e:e.querySelector(".sylTextRect-Display"))),(0,i.selectAll)(n,c,a),a&&a.dragInit()}else{let e=[];if(t()){const t=[this];e=Array.from(document.getElementsByClassName("selected")),e=e.map(e=>"rect"==e.tagName?e:e.querySelector(".sylTextRect-Display")),e=e.filter(e=>!t.includes(e)),(0,i.selectAll)(e,c,a),a&&a.dragInit()}}else{if("selByStaff"!==(0,i.getSelectionType)())return void l.infoListeners();t()||(0,i.unselect)();const n=(0,o.getStaffByCoords)(e.clientX,e.clientY);if(!n)return;n.classList.contains("selected")||((0,i.selectStaff)(n,a),(0,s.resize)(n,c,a),a&&a.dragInit()),n.dispatchEvent(new MouseEvent("mousedown",{screenX:e.screenX,screenY:e.screenY,clientX:e.clientX,clientY:e.clientY,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey,altKey:e.altKey,metaKey:e.metaKey,view:e.view}))}function t(){return window.navigator.userAgent.match(/Mac/)?e.metaKey:e.ctrlKey}}t.setSelectStrokeWidth=function(e){d=e},t.setSelectHelperObjects=function(e,t){a=t,c=e,l=c.info,u=c.view.zoomHandler},t.clickSelect=function(e){document.querySelectorAll(e).forEach(e=>{e.removeEventListener("mousedown",y),e.addEventListener("mousedown",y)}),document.body.removeEventListener("keydown",h),document.body.addEventListener("keydown",h),document.body.removeEventListener("keydown",f),document.body.addEventListener("keydown",f),document.body.removeEventListener("keydown",g),document.body.addEventListener("keydown",g),document.getElementById("container").addEventListener("contextmenu",e=>{e.preventDefault()}),document.querySelectorAll("use,rect,#moreEdit").forEach(e=>{e.removeEventListener("click",m),e.addEventListener("click",m)})},t.dragSelect=function(e){let t=0,n=0,s=!1,o=!1;const l=r.select(e);r.selectAll(e.replace(".active-page","").trim()).on(".drag",null);const h=r.drag().on("start",(function(){if(!c)return;const e=c.getUserMode();if("use"!==r.event.sourceEvent.target.nodeName&&"insert"!==e&&"rect"!==r.event.sourceEvent.target.nodeName){if(r.event.sourceEvent.shiftKey)s=!0,void 0!==u&&u.startDrag();else if(!document.getElementById("selByStaff").classList.contains("is-active")||(f=r.mouse(this),0===Array.from(document.getElementsByClassName("staff")).filter(e=>{const t=(0,i.getStaffBBox)(e),n=t.ulx,s=t.uly,r=t.lrx,o=t.lry,a=t.rotate;return f[0]>n&&f[0]<r&&f[1]>s+(f[0]-n)*Math.tan(a)&&f[1]<o-(r-f[0])*Math.tan(a)}).length)){(0,i.unselect)(),o=!0;const e=r.mouse(this);t=e[0],n=e[1],a=t,h=n,l.append("rect").attr("x",a).attr("y",h).attr("width",0).attr("height",0).attr("id","selectRect").attr("stroke","black").attr("stroke-width",d).attr("fill","none")}}else r.event.sourceEvent.shiftKey&&(s=!0,void 0!==u&&u.startDrag());var a,h,f})).on("drag",(function(){if(!s&&o){const e=r.mouse(this),i=e[0],s=e[1];!function(e,t,n,i){r.select("#selectRect").attr("x",e).attr("y",t).attr("width",n).attr("height",i)}(i<t?i:t,s<n?s:n,i<t?t-i:i-t,s<n?n-s:s-n)}else s&&void 0!==u&&u.dragging()})).on("end",(function(){if(!s&&o){const t=document.getElementById("selectRect"),n=parseInt(t.getAttribute("x")),s=parseInt(t.getAttribute("y")),u=n+parseInt(t.getAttribute("width")),d=s+parseInt(t.getAttribute("height")),h=l.node();let f=new DOMPoint(n,s),g=new DOMPoint(u,d);const m=h.getScreenCTM().inverse().multiply(l.select(".system").node().getScreenCTM()).inverse();f=f.matrixTransform(m),g=g.matrixTransform(m);const y=function(e){return document.getElementById("selByStaff").classList.contains("is-active")?Array.from(document.querySelectorAll(e+" use, "+e+" .staff")):p()?Array.from(document.querySelectorAll(e+" .sylTextRect-display")):Array.from(document.querySelectorAll(e+" use"))}(e).filter(e=>v(e,f,g));y.forEach(e=>{if("use"===e.tagName&&e.getAttribute("xlink:href").match(/E9B[456789ABC]/)){const t=e.closest(".neume"),n=Array.from(t.children).indexOf(e.closest(".nc"));if(e.getAttribute("xlink:href").match(/E9B[45678]/)){const e=t.children[n+1].querySelector("use");y.indexOf(e)<0&&y.push(e)}else{const e=t.children[n-1].querySelector("use");y.indexOf(e)<0&&y.push(e)}}}),(0,i.selectAll)(y,c,a),a&&a.dragInit(),r.selectAll("#selectRect").remove(),o=!1}s=!1}));l.call(h),a&&a.resetTo(h)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initDisplayListener=t.initErrorLogControls=t.initErrorLog=t.recordNotification=void 0;const i=n(7),s=n(6);function r(){const e=document.querySelector("#error_log"),t=document.querySelector("#errorLogHeading"),n=t.querySelector("svg > use"),i=document.querySelector("#errorLogContents"),{displayErrLog:r}=(0,s.getSettings)();r&&e.classList.add("visible"),t.addEventListener("click",e=>{e.stopPropagation(),i.classList.contains("closed")?(i.classList.remove("closed"),i.style.padding="0.5em 0.75em",setTimeout(()=>{i.style.overflow="visible"},200),n.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(i.classList.add("closed"),i.style.overflow="hidden",setTimeout(()=>{i.style.padding="0px"},200),n.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))}),o()}function o(){const e=document.querySelector("#error_log"),t=document.querySelector("#display-single-container"),n=document.createElement("label"),i=document.createElement("input");i.classList.add("checkbox"),n.classList.add("checkbox-container","side-panel-btn"),n.textContent="Errors",i.id="display-errors",i.type="checkbox",i.checked=!1,n.appendChild(i),t.append(n);const{displayErrLog:r}=(0,s.getSettings)();r&&(i.checked=!0),i.addEventListener("click",()=>{const t=document.getElementById("display-all-btn"),n=document.getElementById("displayInfo"),r=document.getElementById("displayBBox"),o=document.getElementById("displayText"),a=document.getElementById("display-errors");i.checked?(e.classList.add("visible"),(0,s.setSettings)({displayErrLog:!0}),(null==n?void 0:n.checked)&&(null==r?void 0:r.checked)&&(null==o?void 0:o.checked)&&(null==a?void 0:a.checked)&&(t.classList.add("selected"),t.innerHTML="Hide All")):(e.classList.remove("visible"),(0,s.setSettings)({displayErrLog:!1}),t.classList.contains("selected")&&(t.classList.remove("selected"),t.innerHTML="Display All"))})}t.recordNotification=function(e){document.querySelector("#errorLogContents").prepend(function(e){const t=document.createElement("div");t.classList.add("notification-container"),t.innerHTML=`\n    <div class="notification-wrapper">\n\n      <div>\n        <div class="log-main">${e.message}</div>\n        <div class="log-extra"></div>\n      </div>\n\n    </div>\n\n    <div class="remove-notif-icon-wrapper">\n      <img class="log-remove remove-notif-icon" src="/Neon/Neon-gh//assets/img/garbage-closed.svg">\n    </div>\n  `;const n=t.querySelector(".log-remove");return n.onclick=()=>t.remove(),n.addEventListener("mouseover",()=>{n.setAttribute("src","/Neon/Neon-gh//assets/img/garbage-open.svg")}),n.addEventListener("mouseout",()=>{n.setAttribute("src","/Neon/Neon-gh//assets/img/garbage-closed.svg")}),t}(e))},t.initErrorLog=function(){document.querySelector("#error_log").innerHTML=i.errorLogsPanelContents,r()},t.initErrorLogControls=r,t.initDisplayListener=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateSelectedBBox=void 0;const i=n(3),s=n(18),r=n(26),o=n(15),a=n(17);function c(){if(!document.getElementById("selByBBox").classList.contains("is-active")){(0,i.unselect)();try{document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden")}catch(e){}document.getElementById("selByBBox").classList.add("is-active");try{document.getElementById("selByNc").classList.remove("is-active"),document.getElementById("selByNeume").classList.remove("is-active"),document.getElementById("selByStaff").classList.remove("is-active"),document.getElementById("selBySyllable").classList.remove("is-active"),document.getElementById("selByLayerElement").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,o.setGroupingHighlight)("syllable")}catch(e){}}this.addBBoxListeners()}function l(e,t,n){(0,i.unselect)();const s=Array.from(e.classList).find(e=>"text-select"!==e&&"selected-to-edit"!==e);if(document.getElementById("displayBBox").checked&&document.getElementById(s)){const e=document.getElementById(s).querySelector(".sylTextRect-display");(0,i.selectBBox)(e,t,n)}}t.updateSelectedBBox=l;t.default=class{constructor(e){this.neonView=e,this.initTextEdit()}updateSelectedBBox(e){(0,i.unselect)();const t=Array.from(e.classList).find(e=>"text-select"!==e&&"selected-to-edit"!==e);if(document.getElementById("displayBBox").checked&&document.getElementById(t)){const e=document.getElementById(t).querySelector(".sylTextRect-display");(0,i.selectBBox)(e,this.dragHandler,this.neonView)}}initTextEdit(){const e=document.getElementById("syl_text").querySelectorAll("span"),t=this.neonView.modal;e.forEach(e=>{function n(){e.classList.add("selected-to-edit"),t.setModalWindowView(a.ModalWindowView.EDIT_TEXT),t.openModalWindow(),l(e,this.dragHandler,this.neonView)}e.removeEventListener("click",n),e.addEventListener("click",n)})}initSelectByBBoxButton(){if(void 0!==this.neonView.NeumeEdit){const e=document.getElementById("selByBBox");if(e)return void(e.style.display="");const t=document.getElementById("selection-mode-btns-container"),n=document.createElement("button");n.classList.add("side-panel-btn","sel-by"),n.id="selByBBox",n.textContent="BBox",t.appendChild(n),n.addEventListener("click",c.bind(this)),document.body.addEventListener("keydown",e=>{"6"===e.key&&""===document.getElementById("selByBBox").style.display&&c.bind(this)()}),this.neonView.view.addUpdateCallback(this.addBBoxListeners.bind(this))}else{const e=document.getElementById("undo").closest(".control"),t=document.createElement("p");t.classList.add("control");const n=document.createElement("button");n.classList.add("side-panel-btn","sel-by"),n.id="selByBBox",n.textContent="BBox",t.appendChild(n),e.appendChild(t),n.classList.add("is-active"),n.style.display="none",this.addBBoxListeners(),this.neonView.view.addUpdateCallback(this.addBBoxListeners.bind(this))}}addBBoxListeners(){document.getElementById("selByBBox").classList.contains("is-active")&&((0,i.unselect)(),void 0===this.neonView.NeumeEdit&&(this.dragHandler=new s.default(this.neonView,".sylTextRect-display"),(0,r.setSelectHelperObjects)(this.neonView,this.dragHandler),"SingleView"===this.neonView.view.constructor.name?((0,r.clickSelect)("#mei_output, #mei_output rect"),(0,r.dragSelect)("#svg_group")):((0,r.clickSelect)(".active-page > svg > svg, .active-page > svg > svg rect"),(0,r.dragSelect)(".active-page svg"))))}}},function(e,t,n){"use strict";n.r(t),function(e){var i,s,r=n(2),o=n.n(r),a=n(22),c=n(14),l=n.n(c),u=n(21),d=n.n(u),h=n(5),f=n.n(h),g=n(1),p=n.n(g),m=n(0),v=n.n(m);function y(e){return"$"+e}function b(e){return e.substring(1)}function w(){this._store={}}function _(e){if(this._store=new w,e&&Array.isArray(e))for(var t=0,n=e.length;t<n;t++)this.add(e[t])}function E(e){if(e instanceof ArrayBuffer)return function(e){if("function"==typeof e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t),i=new Uint8Array(e);return n.set(i),t}(e);var t=e.size,n=e.type;return"function"==typeof e.slice?e.slice(0,t,n):e.webkitSlice(0,t,n)}w.prototype.get=function(e){var t=y(e);return this._store[t]},w.prototype.set=function(e,t){var n=y(e);return this._store[n]=t,!0},w.prototype.has=function(e){return y(e)in this._store},w.prototype.keys=function(){return Object.keys(this._store).map(e=>b(e))},w.prototype.delete=function(e){var t=y(e),n=t in this._store;return delete this._store[t],n},w.prototype.forEach=function(e){for(var t=Object.keys(this._store),n=0,i=t.length;n<i;n++){var s=t[n];e(this._store[s],s=b(s))}},Object.defineProperty(w.prototype,"size",{get:function(){return Object.keys(this._store).length}}),_.prototype.add=function(e){return this._store.set(e,!0)},_.prototype.has=function(e){return this._store.has(e)},_.prototype.forEach=function(e){this._store.forEach((function(t,n){e(n)}))},Object.defineProperty(_.prototype,"size",{get:function(){return this._store.size}}),!function(){if("undefined"==typeof Symbol||"undefined"==typeof Map||"undefined"==typeof Set)return!1;var e=Object.getOwnPropertyDescriptor(Map,Symbol.species);return e&&"get"in e&&Map[Symbol.species]===Map}()?(i=_,s=w):(i=Set,s=Map);var S=Function.prototype.toString,L=S.call(Object);function x(e){var t,n,i;if(!e||"object"!=typeof e)return e;if(Array.isArray(e)){for(t=[],n=0,i=e.length;n<i;n++)t[n]=x(e[n]);return t}if(e instanceof Date&&isFinite(e))return e.toISOString();if(function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer||"undefined"!=typeof Blob&&e instanceof Blob}(e))return E(e);if(!function(e){var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&S.call(n)==L}(e))return e;for(n in t={},e)if(Object.prototype.hasOwnProperty.call(e,n)){var s=x(e[n]);void 0!==s&&(t[n]=s)}return t}function k(e){var t=!1;return f()((function(n){if(t)throw new Error("once called more than once");t=!0,e.apply(this,n)}))}function A(e){return f()((function(t){t=x(t);var n=this,i="function"==typeof t[t.length-1]&&t.pop(),s=new Promise((function(i,s){var r;try{var o=k((function(e,t){e?s(e):i(t)}));t.push(o),(r=e.apply(n,t))&&"function"==typeof r.then&&i(r)}catch(e){s(e)}}));return i&&s.then((function(e){i(null,e)}),i),s}))}function C(e,t){return A(f()((function(n){if(this._closed)return Promise.reject(new Error("database is closed"));if(this._destroyed)return Promise.reject(new Error("database is destroyed"));var i=this;return function(e,t,n){if(e.constructor.listeners("debug").length){for(var i=["api",e.name,t],s=0;s<n.length-1;s++)i.push(n[s]);e.constructor.emit("debug",i);var r=n[n.length-1];n[n.length-1]=function(n,i){var s=["api",e.name,t];s=s.concat(n?["error",n]:["success",i]),e.constructor.emit("debug",s),r(n,i)}}}(i,e,n),this.taskqueue.isReady?t.apply(this,n):new Promise((function(t,s){i.taskqueue.addTask((function(r){r?s(r):t(i[e].apply(i,n))}))}))})))}function I(e,t){for(var n={},i=0,s=t.length;i<s;i++){var r=t[i];r in e&&(n[r]=e[r])}return n}var P;function O(e){return e}function B(e){return[{ok:e}]}function T(e,t,n){var i=t.docs,r=new s;i.forEach((function(e){r.has(e.id)?r.get(e.id).push(e):r.set(e.id,[e])}));var o=r.size,a=0,c=new Array(o);function l(){var e;++a===o&&(e=[],c.forEach((function(t){t.docs.forEach((function(n){e.push({id:t.id,docs:[n]})}))})),n(null,{results:e}))}var u=[];r.forEach((function(e,t){u.push(t)}));var d=0;function h(){if(!(d>=u.length)){var n=Math.min(d+6,u.length),i=u.slice(d,n);!function(n,i){n.forEach((function(n,s){var o=i+s,a=r.get(n),u=I(a[0],["atts_since","attachments"]);u.open_revs=a.map((function(e){return e.rev})),u.open_revs=u.open_revs.filter(O);var d=O;0===u.open_revs.length&&(delete u.open_revs,d=B),["revs","attachments","binary","ajax","latest"].forEach((function(e){e in t&&(u[e]=t[e])})),e.get(n,u,(function(e,t){var i,s,r;i=e?[{error:e}]:d(t),s=n,r=i,c[o]={id:s,docs:r},l(),h()}))}))}(i,d),d+=i.length}}h()}try{localStorage.setItem("_pouch_check_localstorage",1),P=!!localStorage.getItem("_pouch_check_localstorage")}catch(e){P=!1}function N(){return P}function M(){v.a.call(this),this._listeners={},function(e){N()&&addEventListener("storage",(function(t){e.emit(t.key)}))}(this)}function q(e){if("undefined"!=typeof console&&"function"==typeof console[e]){var t=Array.prototype.slice.call(arguments,1);console[e].apply(console,t)}}function j(e){var t=0;return e||(t=2e3),function(e,t){return e=parseInt(e,10)||0,(t=parseInt(t,10))!=t||t<=e?t=(e||1)<<1:t+=1,t>6e5&&(e=3e5,t=6e5),~~((t-e)*Math.random()+e)}(e,t)}function F(e,t){q("info","The above "+e+" is totally normal. "+t)}p()(M,v.a),M.prototype.addListener=function(e,t,n,i){if(!this._listeners[t]){var s=this,r=!1;this._listeners[t]=a,this.on(e,a)}function a(){if(s._listeners[t])if(r)r="waiting";else{r=!0;var e=I(i,["style","include_docs","attachments","conflicts","filter","doc_ids","view","since","query_params","binary","return_docs"]);n.changes(e).on("change",(function(e){e.seq>i.since&&!i.cancelled&&(i.since=e.seq,i.onChange(e))})).on("complete",(function(){"waiting"===r&&o()(a),r=!1})).on("error",(function(){r=!1}))}}},M.prototype.removeListener=function(e,t){t in this._listeners&&(v.a.prototype.removeListener.call(this,e,this._listeners[t]),delete this._listeners[t])},M.prototype.notifyLocalWindows=function(e){N()&&(localStorage[e]="a"===localStorage[e]?"b":"a")},M.prototype.notify=function(e){this.emit(e),this.notifyLocalWindows(e)};var D="function"==typeof Object.assign?Object.assign:function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t};function V(e,t,n){Error.call(this,n),this.status=e,this.name=t,this.message=n,this.error=!0}p()(V,Error),V.prototype.toString=function(){return JSON.stringify({status:this.status,name:this.name,message:this.message,reason:this.reason})};new V(401,"unauthorized","Name or password is incorrect.");var R=new V(400,"bad_request","Missing JSON list of 'docs'"),z=new V(404,"not_found","missing"),H=new V(409,"conflict","Document update conflict"),U=new V(400,"bad_request","_id field must contain a string"),$=new V(412,"missing_id","_id is required for puts"),Z=new V(400,"bad_request","Only reserved document ids may start with underscore."),G=(new V(412,"precondition_failed","Database not open"),new V(500,"unknown_error","Database encountered an unknown error")),W=new V(500,"badarg","Some query argument is invalid"),K=(new V(400,"invalid_request","Request was invalid"),new V(400,"query_parse_error","Some query parameter is invalid")),Y=new V(500,"doc_validation","Bad special document member"),X=new V(400,"bad_request","Something wrong with the request"),J=new V(400,"bad_request","Document must be a JSON object"),Q=(new V(404,"not_found","Database not found"),new V(500,"indexed_db_went_bad","unknown")),ee=(new V(500,"web_sql_went_bad","unknown"),new V(500,"levelDB_went_went_bad","unknown"),new V(403,"forbidden","Forbidden by design doc validate_doc_update function"),new V(400,"bad_request","Invalid rev format")),te=(new V(412,"file_exists","The database could not be created, the file already exists."),new V(412,"missing_stub","A pre-existing attachment stub wasn't found"));new V(413,"invalid_url","Provided URL is invalid");function ne(e,t){function n(t){for(var n=Object.getOwnPropertyNames(e),i=0,s=n.length;i<s;i++)"function"!=typeof e[n[i]]&&(this[n[i]]=e[n[i]]);void 0===this.stack&&(this.stack=(new Error).stack),void 0!==t&&(this.reason=t)}return n.prototype=V.prototype,new n(t)}function ie(e){if("object"!=typeof e){var t=e;(e=G).data=t}return"error"in e&&"conflict"===e.error&&(e.name="conflict",e.status=409),"name"in e||(e.name=e.error||"unknown"),"status"in e||(e.status=500),"message"in e||(e.message=e.message||e.reason),"stack"in e||(e.stack=(new Error).stack),e}function se(e){var t={},n=e.filter&&"function"==typeof e.filter;return t.query=e.query_params,function(i){i.doc||(i.doc={});var s=n&&function(e,t,n){try{return!e(t,n)}catch(e){var i="Filter function threw: "+e.toString();return ne(X,i)}}(e.filter,i.doc,t);if("object"==typeof s)return s;if(s)return!1;if(e.include_docs){if(!e.attachments)for(var r in i.doc._attachments)Object.prototype.hasOwnProperty.call(i.doc._attachments,r)&&(i.doc._attachments[r].stub=!0)}else delete i.doc;return!0}}function re(e){for(var t=[],n=0,i=e.length;n<i;n++)t=t.concat(e[n]);return t}function oe(e){var t;if(e?"string"!=typeof e?t=ne(U):/^_/.test(e)&&!/^_(design|local)/.test(e)&&(t=ne(Z)):t=ne($),t)throw t}function ae(e){return"boolean"==typeof e._remote?e._remote:"function"==typeof e.type&&(q("warn","db.type() is deprecated and will be removed in a future version of PouchDB"),"http"===e.type())}function ce(e){if(!e)return null;var t=e.split("/");return 2===t.length?t:1===t.length?[e,e]:null}function le(e){var t=ce(e);return t?t.join("/"):null}var ue=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],de=/(?:^|&)([^&=]*)=?([^&]*)/g,he=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;function fe(e){for(var t=he.exec(e),n={},i=14;i--;){var s=ue[i],r=t[i]||"",o=-1!==["user","password"].indexOf(s);n[s]=o?decodeURIComponent(r):r}return n.queryKey={},n[ue[12]].replace(de,(function(e,t,i){t&&(n.queryKey[t]=i)})),n}function ge(e,t){var n=[],i=[];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(n.push(s),i.push(t[s]));return n.push(e),Function.apply(null,n).apply(null,i)}function pe(e,t,n){return e.get(t).catch((function(e){if(404!==e.status)throw e;return{}})).then((function(i){var s=i._rev,r=n(i);return r?(r._id=t,r._rev=s,function(e,t,n){return e.put(t).then((function(e){return{updated:!0,rev:e.rev}}),(function(i){if(409!==i.status)throw i;return pe(e,t._id,n)}))}(e,r,n)):{updated:!1,rev:s}}))}var me=function(e){return atob(e)},ve=function(e){return btoa(e)};function ye(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(s){if("TypeError"!==s.name)throw s;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<e.length;i+=1)n.append(e[i]);return n.getBlob(t.type)}}function be(e){for(var t=e.length,n=new ArrayBuffer(t),i=new Uint8Array(n),s=0;s<t;s++)i[s]=e.charCodeAt(s);return n}function we(e,t){return ye([be(e)],{type:t})}function _e(e,t){return we(me(e),t)}function Ee(e,t){var n=new FileReader,i="function"==typeof n.readAsBinaryString;n.onloadend=function(e){var n=e.target.result||"";if(i)return t(n);t(function(e){for(var t="",n=new Uint8Array(e),i=n.byteLength,s=0;s<i;s++)t+=String.fromCharCode(n[s]);return t}(n))},i?n.readAsBinaryString(e):n.readAsArrayBuffer(e)}function Se(e,t){Ee(e,(function(e){t(e)}))}function Le(e,t){Se(e,(function(e){t(ve(e))}))}var xe=self.setImmediate||self.setTimeout;function ke(e,t,n,i,s){(n>0||i<t.size)&&(t=function(e,t,n){return e.webkitSlice?e.webkitSlice(t,n):e.slice(t,n)}(t,n,i)),function(e,t){var n=new FileReader;n.onloadend=function(e){var n=e.target.result||new ArrayBuffer(0);t(n)},n.readAsArrayBuffer(e)}(t,(function(t){e.append(t),s()}))}function Ae(e,t,n,i,s){(n>0||i<t.length)&&(t=t.substring(n,i)),e.appendBinary(t),s()}function Ce(e,t){var n="string"==typeof e,i=n?e.length:e.size,s=Math.min(32768,i),r=Math.ceil(i/s),o=0,a=n?new l.a:new l.a.ArrayBuffer,c=n?Ae:ke;function u(){xe(h)}function d(){var e=function(e){return ve(e)}(a.end(!0));t(e),a.destroy()}function h(){var t=o*s,n=t+s;o++,c(a,e,t,n,o<r?u:d)}h()}function Ie(e){return l.a.hash(e)}function Pe(e,t){if(!t)return Object(a.a)().replace(/-/g,"").toLowerCase();var n=D({},e);return delete n._rev_tree,Ie(JSON.stringify(n))}var Oe=a.a;function Be(e){for(var t,n,i,s,r=e.rev_tree.slice();s=r.pop();){var o=s.ids,a=o[2],c=s.pos;if(a.length)for(var l=0,u=a.length;l<u;l++)r.push({pos:c+1,ids:a[l]});else{var d=!!o[1].deleted,h=o[0];t&&!(i!==d?i:n!==c?n<c:t<h)||(t=h,n=c,i=d)}}return n+"-"+t}function Te(e,t){for(var n,i=e.slice();n=i.pop();)for(var s=n.pos,r=n.ids,o=r[2],a=t(0===o.length,s,r[0],n.ctx,r[1]),c=0,l=o.length;c<l;c++)i.push({pos:s+1,ids:o[c],ctx:a})}function Ne(e,t){return e.pos-t.pos}function Me(e){var t=[];Te(e,(function(e,n,i,s,r){e&&t.push({rev:n+"-"+i,pos:n,opts:r})})),t.sort(Ne).reverse();for(var n=0,i=t.length;n<i;n++)delete t[n].pos;return t}function qe(e){for(var t=Be(e),n=Me(e.rev_tree),i=[],s=0,r=n.length;s<r;s++){var o=n[s];o.rev===t||o.opts.deleted||i.push(o.rev)}return i}function je(e){for(var t,n=[],i=e.slice();t=i.pop();){var s=t.pos,r=t.ids,o=r[0],a=r[1],c=r[2],l=0===c.length,u=t.history?t.history.slice():[];u.push({id:o,opts:a}),l&&n.push({pos:s+1-u.length,ids:u});for(var d=0,h=c.length;d<h;d++)i.push({pos:s+1,ids:c[d],history:u})}return n.reverse()}function Fe(e,t){return e.pos-t.pos}function De(e,t,n){var i=function(e,t,n){for(var i,s=0,r=e.length;s<r;)n(e[i=s+r>>>1],t)<0?s=i+1:r=i;return s}(e,t,n);e.splice(i,0,t)}function Ve(e,t){for(var n,i,s=t,r=e.length;s<r;s++){var o=e[s],a=[o.id,o.opts,[]];i?(i[2].push(a),i=a):n=i=a}return n}function Re(e,t){return e[0]<t[0]?-1:1}function ze(e,t){for(var n=[{tree1:e,tree2:t}],i=!1;n.length>0;){var s=n.pop(),r=s.tree1,o=s.tree2;(r[1].status||o[1].status)&&(r[1].status="available"===r[1].status||"available"===o[1].status?"available":"missing");for(var a=0;a<o[2].length;a++)if(r[2][0]){for(var c=!1,l=0;l<r[2].length;l++)r[2][l][0]===o[2][a][0]&&(n.push({tree1:r[2][l],tree2:o[2][a]}),c=!0);c||(i="new_branch",De(r[2],o[2][a],Re))}else i="new_leaf",r[2][0]=o[2][a]}return{conflicts:i,tree:e}}function He(e,t,n){var i,s=[],r=!1,o=!1;if(!e.length)return{tree:[t],conflicts:"new_leaf"};for(var a=0,c=e.length;a<c;a++){var l=e[a];if(l.pos===t.pos&&l.ids[0]===t.ids[0])i=ze(l.ids,t.ids),s.push({pos:l.pos,ids:i.tree}),r=r||i.conflicts,o=!0;else if(!0!==n){var u=l.pos<t.pos?l:t,d=l.pos<t.pos?t:l,h=d.pos-u.pos,f=[],g=[];for(g.push({ids:u.ids,diff:h,parent:null,parentIdx:null});g.length>0;){var p=g.pop();if(0!==p.diff)for(var m=p.ids[2],v=0,y=m.length;v<y;v++)g.push({ids:m[v],diff:p.diff-1,parent:p.ids,parentIdx:v});else p.ids[0]===d.ids[0]&&f.push(p)}var b=f[0];b?(i=ze(b.ids,d.ids),b.parent[2][b.parentIdx]=i.tree,s.push({pos:u.pos,ids:u.ids}),r=r||i.conflicts,o=!0):s.push(l)}else s.push(l)}return o||s.push(t),s.sort(Fe),{tree:s,conflicts:r||"internal_node"}}function Ue(e,t,n){var i=He(e,t),s=function(e,t){for(var n,i,s=je(e),r=0,o=s.length;r<o;r++){var a,c=s[r],l=c.ids;if(l.length>t){n||(n={});var u=l.length-t;a={pos:c.pos+u,ids:Ve(l,u)};for(var d=0;d<u;d++){var h=c.pos+d+"-"+l[d].id;n[h]=!0}}else a={pos:c.pos,ids:Ve(l,0)};i=i?He(i,a,!0).tree:[a]}return n&&Te(i,(function(e,t,i){delete n[t+"-"+i]})),{tree:i,revs:n?Object.keys(n):[]}}(i.tree,n);return{tree:s.tree,stemmedRevs:s.revs,conflicts:i.conflicts}}function $e(e){return e.ids}function Ze(e,t){t||(t=Be(e));for(var n,i=t.substring(t.indexOf("-")+1),s=e.rev_tree.map($e);n=s.pop();){if(n[0]===i)return!!n[1].deleted;s=s.concat(n[2])}}function Ge(e){return/^_local/.test(e)}function We(e,t,n){v.a.call(this);var i=this;this.db=e;var s=(t=t?x(t):{}).complete=k((function(t,n){var s,o;t?(o="error",("listenerCount"in(s=i)?s.listenerCount(o):v.a.listenerCount(s,o))>0&&i.emit("error",t)):i.emit("complete",n),i.removeAllListeners(),e.removeListener("destroyed",r)}));function r(){i.cancel()}n&&(i.on("complete",(function(e){n(null,e)})),i.on("error",n)),e.once("destroyed",r),t.onChange=function(e,t,n){i.isCancelled||function(e,t,n,i){try{e.emit("change",t,n,i)}catch(e){q("error",'Error in .on("change", function):',e)}}(i,e,t,n)};var o=new Promise((function(e,n){t.complete=function(t,i){t?n(t):e(i)}}));i.once("cancel",(function(){e.removeListener("destroyed",r),t.complete(null,{status:"cancelled"})})),this.then=o.then.bind(o),this.catch=o.catch.bind(o),this.then((function(e){s(null,e)}),s),e.taskqueue.isReady?i.validateChanges(t):e.taskqueue.addTask((function(e){e?t.complete(e):i.isCancelled?i.emit("cancel"):i.validateChanges(t)}))}function Ke(e,t,n){var i=[{rev:e._rev}];"all_docs"===n.style&&(i=Me(t.rev_tree).map((function(e){return{rev:e.rev}})));var s={id:t.id,changes:i,doc:e};return Ze(t,e._rev)&&(s.deleted=!0),n.conflicts&&(s.doc._conflicts=qe(t),s.doc._conflicts.length||delete s.doc._conflicts),s}function Ye(e,t){return e<t?-1:e>t?1:0}function Xe(e,t){return function(n,i){n||i[0]&&i[0].error?((n=n||i[0]).docId=t,e(n)):e(null,i.length?i[0]:i)}}function Je(e,t){var n=Ye(e._id,t._id);return 0!==n?n:Ye(e._revisions?e._revisions.start:0,t._revisions?t._revisions.start:0)}function Qe(){for(var e in v.a.call(this),Qe.prototype)"function"==typeof this[e]&&(this[e]=this[e].bind(this))}function et(){this.isReady=!1,this.failed=!1,this.queue=[]}function tt(e,t){if(!(this instanceof tt))return new tt(e,t);var n=this;if(t=t||{},e&&"object"==typeof e&&(e=(t=e).name,delete t.name),void 0===t.deterministic_revs&&(t.deterministic_revs=!0),this.__opts=t=x(t),n.auto_compaction=t.auto_compaction,n.prefix=tt.prefix,"string"!=typeof e)throw new Error("Missing/invalid DB name");var i=function(e,t){var n=e.match(/([a-z-]*):\/\/(.*)/);if(n)return{name:/https?/.test(n[1])?n[1]+"://"+n[2]:n[2],adapter:n[1]};var i=tt.adapters,s=tt.preferredAdapters,r=tt.prefix,o=t.adapter;if(!o)for(var a=0;a<s.length&&("idb"===(o=s[a])&&"websql"in i&&N()&&localStorage["_pouch__websqldb_"+r+e]);++a)q("log",'PouchDB is downgrading "'+e+'" to WebSQL to avoid data loss, because it was already opened with WebSQL.');var c=i[o];return{name:!c||!("use_prefix"in c)||c.use_prefix?r+e:e,adapter:o}}((t.prefix||"")+e,t);if(t.name=i.name,t.adapter=t.adapter||i.adapter,n.name=e,n._adapter=t.adapter,tt.emit("debug",["adapter","Picked adapter: ",t.adapter]),!tt.adapters[t.adapter]||!tt.adapters[t.adapter].valid())throw new Error("Invalid Adapter: "+t.adapter);if(t.view_adapter&&(!tt.adapters[t.view_adapter]||!tt.adapters[t.view_adapter].valid()))throw new Error("Invalid View Adapter: "+t.view_adapter);Qe.call(n),n.taskqueue=new et,n.adapter=t.adapter,tt.adapters[t.adapter].call(n,t,(function(e){if(e)return n.taskqueue.fail(e);!function(e){function t(t){e.removeListener("closed",n),t||e.constructor.emit("destroyed",e.name)}function n(){e.removeListener("destroyed",t),e.constructor.emit("unref",e)}e.once("destroyed",t),e.once("closed",n),e.constructor.emit("ref",e)}(n),n.emit("created",n),tt.emit("created",n.name),n.taskqueue.ready(n)}))}p()(We,v.a),We.prototype.cancel=function(){this.isCancelled=!0,this.db.taskqueue.isReady&&this.emit("cancel")},We.prototype.validateChanges=function(e){var t=e.complete,n=this;tt._changesFilterPlugin?tt._changesFilterPlugin.validate(e,(function(i){if(i)return t(i);n.doChanges(e)})):n.doChanges(e)},We.prototype.doChanges=function(e){var t=this,n=e.complete;if("live"in(e=x(e))&&!("continuous"in e)&&(e.continuous=e.live),e.processChange=Ke,"latest"===e.since&&(e.since="now"),e.since||(e.since=0),"now"!==e.since){if(tt._changesFilterPlugin){if(tt._changesFilterPlugin.normalize(e),tt._changesFilterPlugin.shouldFilter(this,e))return tt._changesFilterPlugin.filter(this,e)}else["doc_ids","filter","selector","view"].forEach((function(t){t in e&&q("warn",'The "'+t+'" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.')}));"descending"in e||(e.descending=!1),e.limit=0===e.limit?1:e.limit,e.complete=n;var i=this.db._changes(e);if(i&&"function"==typeof i.cancel){var s=t.cancel;t.cancel=f()((function(e){i.cancel(),s.apply(this,e)}))}}else this.db.info().then((function(i){t.isCancelled?n(null,{status:"cancelled"}):(e.since=i.update_seq,t.doChanges(e))}),n)},p()(Qe,v.a),Qe.prototype.post=C("post",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(ne(J));this.bulkDocs({docs:[e]},t,Xe(n,e._id))})),Qe.prototype.put=C("put",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(ne(J));if(oe(e._id),Ge(e._id)&&"function"==typeof this._putLocal)return e._deleted?this._removeLocal(e,n):this._putLocal(e,n);var i,s,r,o,a=this;function c(n){"function"==typeof a._put&&!1!==t.new_edits?a._put(e,t,n):a.bulkDocs({docs:[e]},t,Xe(n,e._id))}t.force&&e._rev?(i=e._rev.split("-"),s=i[1],r=parseInt(i[0],10)+1,o=Pe(),e._revisions={start:r,ids:[o,s]},e._rev=r+"-"+o,t.new_edits=!1,c((function(t){var i=t?null:{ok:!0,id:e._id,rev:e._rev};n(t,i)}))):c(n)})),Qe.prototype.putAttachment=C("putAttachment",(function(e,t,n,i,s){var r=this;function o(e){var n="_rev"in e?parseInt(e._rev,10):0;return e._attachments=e._attachments||{},e._attachments[t]={content_type:s,data:i,revpos:++n},r.put(e)}return"function"==typeof s&&(s=i,i=n,n=null),void 0===s&&(s=i,i=n,n=null),s||q("warn","Attachment",t,"on document",e,"is missing content_type"),r.get(e).then((function(e){if(e._rev!==n)throw ne(H);return o(e)}),(function(t){if(t.reason===z.message)return o({_id:e});throw t}))})),Qe.prototype.removeAttachment=C("removeAttachment",(function(e,t,n,i){var s=this;s.get(e,(function(e,r){if(e)i(e);else if(r._rev===n){if(!r._attachments)return i();delete r._attachments[t],0===Object.keys(r._attachments).length&&delete r._attachments,s.put(r,i)}else i(ne(H))}))})),Qe.prototype.remove=C("remove",(function(e,t,n,i){var s;"string"==typeof t?(s={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(s=e,"function"==typeof t?(i=t,n={}):(i=n,n=t)),(n=n||{}).was_delete=!0;var r={_id:s._id,_rev:s._rev||n.rev,_deleted:!0};if(Ge(r._id)&&"function"==typeof this._removeLocal)return this._removeLocal(s,i);this.bulkDocs({docs:[r]},n,Xe(i,r._id))})),Qe.prototype.revsDiff=C("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={});var i=Object.keys(e);if(!i.length)return n(null,{});var r=0,o=new s;function a(e,t){o.has(e)||o.set(e,{missing:[]}),o.get(e).missing.push(t)}i.map((function(t){this._getRevisionTree(t,(function(s,c){if(s&&404===s.status&&"missing"===s.message)o.set(t,{missing:e[t]});else{if(s)return n(s);!function(t,n){var i=e[t].slice(0);Te(n,(function(e,n,s,r,o){var c=n+"-"+s,l=i.indexOf(c);-1!==l&&(i.splice(l,1),"available"!==o.status&&a(t,c))})),i.forEach((function(e){a(t,e)}))}(t,c)}if(++r===i.length){var l={};return o.forEach((function(e,t){l[t]=e})),n(null,l)}}))}),this)})),Qe.prototype.bulkGet=C("bulkGet",(function(e,t){T(this,e,t)})),Qe.prototype.compactDocument=C("compactDocument",(function(e,t,n){var i=this;this._getRevisionTree(e,(function(s,r){if(s)return n(s);var o=function(e){var t={},n=[];return Te(e,(function(e,i,s,r){var o=i+"-"+s;return e&&(t[o]=0),void 0!==r&&n.push({from:r,to:o}),o})),n.reverse(),n.forEach((function(e){void 0===t[e.from]?t[e.from]=1+t[e.to]:t[e.from]=Math.min(t[e.from],1+t[e.to])})),t}(r),a=[],c=[];Object.keys(o).forEach((function(e){o[e]>t&&a.push(e)})),Te(r,(function(e,t,n,i,s){var r=t+"-"+n;"available"===s.status&&-1!==a.indexOf(r)&&c.push(r)})),i._doCompaction(e,c,n)}))})),Qe.prototype.compact=C("compact",(function(e,t){"function"==typeof e&&(t=e,e={});e=e||{},this._compactionQueue=this._compactionQueue||[],this._compactionQueue.push({opts:e,callback:t}),1===this._compactionQueue.length&&function e(t){var n=t._compactionQueue[0],i=n.opts,s=n.callback;t.get("_local/compaction").catch((function(){return!1})).then((function(n){n&&n.last_seq&&(i.last_seq=n.last_seq),t._compact(i,(function(n,i){n?s(n):s(null,i),o()((function(){t._compactionQueue.shift(),t._compactionQueue.length&&e(t)}))}))}))}(this)})),Qe.prototype._compact=function(e,t){var n=this,i={return_docs:!1,last_seq:e.last_seq||0},s=[];n.changes(i).on("change",(function(e){s.push(n.compactDocument(e.id,0))})).on("complete",(function(e){var i=e.last_seq;Promise.all(s).then((function(){return pe(n,"_local/compaction",(function(e){return(!e.last_seq||e.last_seq<i)&&(e.last_seq=i,e)}))})).then((function(){t(null,{ok:!0})})).catch(t)})).on("error",t)},Qe.prototype.get=C("get",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"string"!=typeof e)return n(ne(U));if(Ge(e)&&"function"==typeof this._getLocal)return this._getLocal(e,n);var i=[],s=this;function r(){var r=[],o=i.length;if(!o)return n(null,r);i.forEach((function(i){s.get(e,{rev:i,revs:t.revs,latest:t.latest,attachments:t.attachments,binary:t.binary},(function(e,t){if(e)r.push({missing:i});else{for(var s,a=0,c=r.length;a<c;a++)if(r[a].ok&&r[a].ok._rev===t._rev){s=!0;break}s||r.push({ok:t})}--o||n(null,r)}))}))}if(!t.open_revs)return this._get(e,t,(function(i,r){if(i)return i.docId=e,n(i);var o=r.doc,a=r.metadata,c=r.ctx;if(t.conflicts){var l=qe(a);l.length&&(o._conflicts=l)}if(Ze(a,o._rev)&&(o._deleted=!0),t.revs||t.revs_info){for(var u=o._rev.split("-"),d=parseInt(u[0],10),h=u[1],f=je(a.rev_tree),g=null,p=0;p<f.length;p++){var m=f[p],v=m.ids.map((function(e){return e.id})).indexOf(h);(v===d-1||!g&&-1!==v)&&(g=m)}if(!g)return(i=new Error("invalid rev tree")).docId=e,n(i);var y=g.ids.map((function(e){return e.id})).indexOf(o._rev.split("-")[1])+1,b=g.ids.length-y;if(g.ids.splice(y,b),g.ids.reverse(),t.revs&&(o._revisions={start:g.pos+g.ids.length-1,ids:g.ids.map((function(e){return e.id}))}),t.revs_info){var w=g.pos+g.ids.length;o._revs_info=g.ids.map((function(e){return{rev:--w+"-"+e.id,status:e.opts.status}}))}}if(t.attachments&&o._attachments){var _=o._attachments,E=Object.keys(_).length;if(0===E)return n(null,o);Object.keys(_).forEach((function(e){this._getAttachment(o._id,e,_[e],{rev:o._rev,binary:t.binary,ctx:c},(function(t,i){var s=o._attachments[e];s.data=i,delete s.stub,delete s.length,--E||n(null,o)}))}),s)}else{if(o._attachments)for(var S in o._attachments)Object.prototype.hasOwnProperty.call(o._attachments,S)&&(o._attachments[S].stub=!0);n(null,o)}}));if("all"===t.open_revs)this._getRevisionTree(e,(function(e,t){if(e)return n(e);i=Me(t).map((function(e){return e.rev})),r()}));else{if(!Array.isArray(t.open_revs))return n(ne(G,"function_clause"));i=t.open_revs;for(var o=0;o<i.length;o++){var a=i[o];if("string"!=typeof a||!/^\d+-/.test(a))return n(ne(ee))}r()}})),Qe.prototype.getAttachment=C("getAttachment",(function(e,t,n,i){var s=this;n instanceof Function&&(i=n,n={}),this._get(e,n,(function(r,o){return r?i(r):o.doc._attachments&&o.doc._attachments[t]?(n.ctx=o.ctx,n.binary=!0,void s._getAttachment(e,t,o.doc._attachments[t],n,i)):i(ne(z))}))})),Qe.prototype.allDocs=C("allDocs",(function(e,t){if("function"==typeof e&&(t=e,e={}),e.skip=void 0!==e.skip?e.skip:0,e.start_key&&(e.startkey=e.start_key),e.end_key&&(e.endkey=e.end_key),"keys"in e){if(!Array.isArray(e.keys))return t(new TypeError("options.keys must be an array"));var n=["startkey","endkey","key"].filter((function(t){return t in e}))[0];if(n)return void t(ne(K,"Query parameter `"+n+"` is not compatible with multi-get"));if(!ae(this)&&(function(e){var t="limit"in e?e.keys.slice(e.skip,e.limit+e.skip):e.skip>0?e.keys.slice(e.skip):e.keys;e.keys=t,e.skip=0,delete e.limit,e.descending&&(t.reverse(),e.descending=!1)}(e),0===e.keys.length))return this._allDocs({limit:0},t)}return this._allDocs(e,t)})),Qe.prototype.changes=function(e,t){return"function"==typeof e&&(t=e,e={}),(e=e||{}).return_docs="return_docs"in e?e.return_docs:!e.live,new We(this,e,t)},Qe.prototype.close=C("close",(function(e){return this._closed=!0,this.emit("closed"),this._close(e)})),Qe.prototype.info=C("info",(function(e){var t=this;this._info((function(n,i){if(n)return e(n);i.db_name=i.db_name||t.name,i.auto_compaction=!(!t.auto_compaction||ae(t)),i.adapter=t.adapter,e(null,i)}))})),Qe.prototype.id=C("id",(function(e){return this._id(e)})),Qe.prototype.type=function(){return"function"==typeof this._type?this._type():this.adapter},Qe.prototype.bulkDocs=C("bulkDocs",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),t=t||{},Array.isArray(e)&&(e={docs:e}),!e||!e.docs||!Array.isArray(e.docs))return n(ne(R));for(var i=0;i<e.docs.length;++i)if("object"!=typeof e.docs[i]||Array.isArray(e.docs[i]))return n(ne(J));var s;if(e.docs.forEach((function(e){e._attachments&&Object.keys(e._attachments).forEach((function(t){s=s||function(e){return"_"===e.charAt(0)&&e+" is not a valid attachment name, attachment names cannot start with '_'"}(t),e._attachments[t].content_type||q("warn","Attachment",t,"on document",e._id,"is missing content_type")}))})),s)return n(ne(X,s));"new_edits"in t||(t.new_edits=!("new_edits"in e)||e.new_edits);var r=this;t.new_edits||ae(r)||e.docs.sort(Je),function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n._deleted)delete n._attachments;else if(n._attachments)for(var i=Object.keys(n._attachments),s=0;s<i.length;s++){var r=i[s];n._attachments[r]=I(n._attachments[r],["data","digest","content_type","length","revpos","stub"])}}}(e.docs);var o=e.docs.map((function(e){return e._id}));return this._bulkDocs(e,t,(function(e,i){if(e)return n(e);if(t.new_edits||(i=i.filter((function(e){return e.error}))),!ae(r))for(var s=0,a=i.length;s<a;s++)i[s].id=i[s].id||o[s];n(null,i)}))})),Qe.prototype.registerDependentDatabase=C("registerDependentDatabase",(function(e,t){var n=x(this.__opts);this.__opts.view_adapter&&(n.adapter=this.__opts.view_adapter);var i=new this.constructor(e,n);pe(this,"_local/_pouch_dependentDbs",(function(t){return t.dependentDbs=t.dependentDbs||{},!t.dependentDbs[e]&&(t.dependentDbs[e]=!0,t)})).then((function(){t(null,{db:i})})).catch(t)})),Qe.prototype.destroy=C("destroy",(function(e,t){"function"==typeof e&&(t=e,e={});var n=this,i=!("use_prefix"in n)||n.use_prefix;function s(){n._destroy(e,(function(e,i){if(e)return t(e);n._destroyed=!0,n.emit("destroyed"),t(null,i||{ok:!0})}))}if(ae(n))return s();n.get("_local/_pouch_dependentDbs",(function(e,r){if(e)return 404!==e.status?t(e):s();var o=r.dependentDbs,a=n.constructor,c=Object.keys(o).map((function(e){var t=i?e.replace(new RegExp("^"+a.prefix),""):e;return new a(t,n.__opts).destroy()}));Promise.all(c).then(s,t)}))})),et.prototype.execute=function(){var e;if(this.failed)for(;e=this.queue.shift();)e(this.failed);else for(;e=this.queue.shift();)e()},et.prototype.fail=function(e){this.failed=e,this.execute()},et.prototype.ready=function(e){this.isReady=!0,this.db=e,this.execute()},et.prototype.addTask=function(e){this.queue.push(e),this.failed&&this.execute()},p()(tt,Qe);var nt="undefined"!=typeof AbortController?AbortController:function(){return{abort:function(){}}},it=fetch,st=Headers;tt.adapters={},tt.preferredAdapters=[],tt.prefix="_pouch_";var rt=new v.a;!function(e){Object.keys(v.a.prototype).forEach((function(t){"function"==typeof v.a.prototype[t]&&(e[t]=rt[t].bind(rt))}));var t=e._destructionListeners=new s;e.on("ref",(function(e){t.has(e.name)||t.set(e.name,[]),t.get(e.name).push(e)})),e.on("unref",(function(e){if(t.has(e.name)){var n=t.get(e.name),i=n.indexOf(e);i<0||(n.splice(i,1),n.length>1?t.set(e.name,n):t.delete(e.name))}})),e.on("destroyed",(function(e){if(t.has(e)){var n=t.get(e);t.delete(e),n.forEach((function(e){e.emit("destroyed",!0)}))}}))}(tt),tt.adapter=function(e,t,n){t.valid()&&(tt.adapters[e]=t,n&&tt.preferredAdapters.push(e))},tt.plugin=function(e){if("function"==typeof e)e(tt);else{if("object"!=typeof e||0===Object.keys(e).length)throw new Error('Invalid plugin: got "'+e+'", expected an object or a function');Object.keys(e).forEach((function(t){tt.prototype[t]=e[t]}))}return this.__defaults&&(tt.__defaults=D({},this.__defaults)),tt},tt.defaults=function(e){function t(e,n){if(!(this instanceof t))return new t(e,n);n=n||{},e&&"object"==typeof e&&(e=(n=e).name,delete n.name),n=D({},t.__defaults,n),tt.call(this,e,n)}return p()(t,tt),t.preferredAdapters=tt.preferredAdapters.slice(),Object.keys(tt).forEach((function(e){e in t||(t[e]=tt[e])})),t.__defaults=D({},this.__defaults,e),t},tt.fetch=function(e,t){return it(e,t)};function ot(e,t){for(var n=e,i=0,s=t.length;i<s;i++){if(!(n=n[t[i]]))break}return n}function at(e){for(var t=[],n="",i=0,s=e.length;i<s;i++){var r=e[i];i>0&&"\\"===e[i-1]&&("$"===r||"."===r)?n=n.substring(0,n.length-1)+r:"."===r?(t.push(n),n=""):n+=r}return t.push(n),t}var ct=["$or","$nor","$not"];function lt(e){return ct.indexOf(e)>-1}function ut(e){return Object.keys(e)[0]}function dt(e){var t={},n={$or:!0,$nor:!0};return e.forEach((function(e){Object.keys(e).forEach((function(i){var s=e[i];if("object"!=typeof s&&(s={$eq:s}),lt(i))if(s instanceof Array){if(n[i])return n[i]=!1,void(t[i]=s);var r=[];t[i].forEach((function(e){Object.keys(s).forEach((function(t){var n=s[t],i=Math.max(Object.keys(e).length,Object.keys(n).length),o=dt([e,n]);Object.keys(o).length<=i||r.push(o)}))})),t[i]=r}else t[i]=dt([s]);else{var o=t[i]=t[i]||{};Object.keys(s).forEach((function(e){var t=s[e];return"$gt"===e||"$gte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$gte?"$gte"===e?t>n.$gte&&(n.$gte=t):t>=n.$gte&&(delete n.$gte,n.$gt=t):void 0!==n.$gt?"$gte"===e?t>n.$gt&&(delete n.$gt,n.$gte=t):t>n.$gt&&(n.$gt=t):n[e]=t}(e,t,o):"$lt"===e||"$lte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$lte?"$lte"===e?t<n.$lte&&(n.$lte=t):t<=n.$lte&&(delete n.$lte,n.$lt=t):void 0!==n.$lt?"$lte"===e?t<n.$lt&&(delete n.$lt,n.$lte=t):t<n.$lt&&(n.$lt=t):n[e]=t}(e,t,o):"$ne"===e?function(e,t){"$ne"in t?t.$ne.push(e):t.$ne=[e]}(t,o):"$eq"===e?function(e,t){delete t.$gt,delete t.$gte,delete t.$lt,delete t.$lte,delete t.$ne,t.$eq=e}(t,o):"$regex"===e?function(e,t){"$regex"in t?t.$regex.push(e):t.$regex=[e]}(t,o):void(o[e]=t)}))}}))})),t}function ht(e){var t=x(e),n=!1;(function e(t,n){for(var i in t){"$and"===i&&(n=!0);var s=t[i];"object"==typeof s&&(n=e(s,n))}return n})(t,!1)&&("$and"in(t=function e(t){for(var n in t){if(Array.isArray(t))for(var i in t)t[i].$and&&(t[i]=dt(t[i].$and));var s=t[n];"object"==typeof s&&e(s)}return t}(t))&&(t=dt(t.$and)),n=!0),["$or","$nor"].forEach((function(e){e in t&&t[e].forEach((function(e){for(var t=Object.keys(e),n=0;n<t.length;n++){var i=t[n],s=e[i];"object"==typeof s&&null!==s||(e[i]={$eq:s})}}))})),"$not"in t&&(t.$not=dt([t.$not]));for(var i=Object.keys(t),s=0;s<i.length;s++){var r=i[s],o=t[r];"object"!=typeof o||null===o?o={$eq:o}:n||("$ne"in o&&(o.$ne=[o.$ne]),"$regex"in o&&(o.$regex=[o.$regex])),t[r]=o}return t}function ft(e,t){if(e===t)return 0;e=gt(e),t=gt(t);var n=bt(e),i=bt(t);if(n-i!=0)return n-i;switch(typeof e){case"number":return e-t;case"boolean":return e<t?-1:1;case"string":return function(e,t){return e===t?0:e>t?1:-1}(e,t)}return Array.isArray(e)?function(e,t){for(var n=Math.min(e.length,t.length),i=0;i<n;i++){var s=ft(e[i],t[i]);if(0!==s)return s}return e.length===t.length?0:e.length>t.length?1:-1}(e,t):function(e,t){for(var n=Object.keys(e),i=Object.keys(t),s=Math.min(n.length,i.length),r=0;r<s;r++){var o=ft(n[r],i[r]);if(0!==o)return o;if(0!==(o=ft(e[n[r]],t[i[r]])))return o}return n.length===i.length?0:n.length>i.length?1:-1}(e,t)}function gt(e){switch(typeof e){case"undefined":return null;case"number":return e===1/0||e===-1/0||isNaN(e)?null:e;case"object":var t=e;if(Array.isArray(e)){var n=e.length;e=new Array(n);for(var i=0;i<n;i++)e[i]=gt(t[i])}else{if(e instanceof Date)return e.toJSON();if(null!==e)for(var s in e={},t)if(Object.prototype.hasOwnProperty.call(t,s)){var r=t[s];void 0!==r&&(e[s]=gt(r))}}}return e}function pt(e){if(null!==e)switch(typeof e){case"boolean":return e?1:0;case"number":return function(e){if(0===e)return"1";var t=e.toExponential().split(/e\+?/),n=parseInt(t[1],10),i=e<0,s=i?"0":"2",r=(o=((i?-n:n)- -324).toString(),a="0",c=3,function(e,t,n){for(var i="",s=n-e.length;i.length<s;)i+=t;return i}(o,a,c)+o);var o,a,c;s+=""+r;var l=Math.abs(parseFloat(t[0]));i&&(l=10-l);var u=l.toFixed(20);return u=u.replace(/\.?0+$/,""),s+=""+u}(e);case"string":return e.replace(/\u0002/g,"").replace(/\u0001/g,"").replace(/\u0000/g,"");case"object":var t=Array.isArray(e),n=t?e:Object.keys(e),i=-1,s=n.length,r="";if(t)for(;++i<s;)r+=mt(n[i]);else for(;++i<s;){var o=n[i];r+=mt(o)+mt(e[o])}return r}return""}function mt(e){return bt(e=gt(e))+""+pt(e)+"\0"}function vt(e,t){var n,i=t;if("1"===e[t])n=0,t++;else{var s="0"===e[t];t++;var r="",o=e.substring(t,t+3),a=parseInt(o,10)+-324;for(s&&(a=-a),t+=3;;){var c=e[t];if("\0"===c)break;r+=c,t++}n=1===(r=r.split(".")).length?parseInt(r,10):parseFloat(r[0]+"."+r[1]),s&&(n-=10),0!==a&&(n=parseFloat(n+"e"+a))}return{num:n,length:t-i}}function yt(e,t){var n=e.pop();if(t.length){var i=t[t.length-1];n===i.element&&(t.pop(),i=t[t.length-1]);var s=i.element,r=i.index;if(Array.isArray(s))s.push(n);else if(r===e.length-2){s[e.pop()]=n}else e.push(n)}}function bt(e){var t=["boolean","number","string","object"].indexOf(typeof e);return~t?null===e?1:Array.isArray(e)?5:t<3?t+2:t+3:Array.isArray(e)?5:void 0}function wt(e,t,n){if(e=e.filter((function(e){return _t(e.doc,t.selector,n)})),t.sort){var i=function(e){function t(t){return e.map((function(e){var n=at(ut(e));return ot(t,n)}))}return function(e,n){var i,s,r=ft(t(e.doc),t(n.doc));return 0!==r?r:(i=e.doc._id,s=n.doc._id,i<s?-1:i>s?1:0)}}(t.sort);e=e.sort(i),"string"!=typeof t.sort[0]&&"desc"===(s=t.sort[0])[ut(s)]&&(e=e.reverse())}var s;if("limit"in t||"skip"in t){var r=t.skip||0,o=("limit"in t?t.limit:e.length)+r;e=e.slice(r,o)}return e}function _t(e,t,n){return n.every((function(n){var i=t[n],s=at(n),r=ot(e,s);return lt(n)?function(e,t,n){if("$or"===e)return t.some((function(e){return _t(n,e,Object.keys(e))}));if("$not"===e)return!_t(n,t,Object.keys(t));return!t.find((function(e){return _t(n,e,Object.keys(e))}))}(n,i,e):Et(i,e,s,r)}))}function Et(e,t,n,i){return!e||("object"==typeof e?Object.keys(e).every((function(s){var r=e[s];if(0===s.indexOf("$"))return St(s,t,r,n,i);var o=at(s);if(void 0===i&&"object"!=typeof r&&o.length>0)return!1;var a=ot(i,o);return"object"==typeof r?Et(r,t,n,a):St("$eq",t,r,o,a)})):e===i)}function St(e,t,n,i,s){if(!At[e])throw new Error('unknown operator "'+e+'" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');return At[e](t,n,i,s)}function Lt(e){return null!=e}function xt(e){return void 0!==e}function kt(e,t){return t.some((function(t){return e instanceof Array?e.some((function(e){return 0===ft(t,e)})):0===ft(t,e)}))}var At={$elemMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]?i.some((function(e){return _t(e,t,Object.keys(t))})):i.some((function(i){return Et(t,e,n,i)}))))},$allMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]?i.every((function(e){return _t(e,t,Object.keys(t))})):i.every((function(i){return Et(t,e,n,i)}))))},$eq:function(e,t,n,i){return xt(i)&&0===ft(i,t)},$gte:function(e,t,n,i){return xt(i)&&ft(i,t)>=0},$gt:function(e,t,n,i){return xt(i)&&ft(i,t)>0},$lte:function(e,t,n,i){return xt(i)&&ft(i,t)<=0},$lt:function(e,t,n,i){return xt(i)&&ft(i,t)<0},$exists:function(e,t,n,i){return t?xt(i):!xt(i)},$mod:function(e,t,n,i){return Lt(i)&&function(e,t){return"number"==typeof e&&parseInt(e,10)===e&&e%t[0]===t[1]}(i,t)},$ne:function(e,t,n,i){return t.every((function(e){return 0!==ft(i,e)}))},$in:function(e,t,n,i){return Lt(i)&&kt(i,t)},$nin:function(e,t,n,i){return Lt(i)&&!kt(i,t)},$size:function(e,t,n,i){return Lt(i)&&Array.isArray(i)&&function(e,t){return e.length===t}(i,t)},$all:function(e,t,n,i){return Array.isArray(i)&&function(e,t){return t.every((function(t){return e.some((function(e){return 0===ft(t,e)}))}))}(i,t)},$regex:function(e,t,n,i){return Lt(i)&&"string"==typeof i&&t.every((function(e){return function(e,t){return new RegExp(t).test(e)}(i,e)}))},$type:function(e,t,n,i){return function(e,t){switch(t){case"null":return null===e;case"boolean":return"boolean"==typeof e;case"number":return"number"==typeof e;case"string":return"string"==typeof e;case"array":return e instanceof Array;case"object":return"[object Object]"==={}.toString.call(e)}}(i,t)}};function Ct(e,t){if(e.selector&&e.filter&&"_selector"!==e.filter){var n="string"==typeof e.filter?e.filter:"function";return t(new Error('selector invalid for filter "'+n+'"'))}t()}function It(e){e.view&&!e.filter&&(e.filter="_view"),e.selector&&!e.filter&&(e.filter="_selector"),e.filter&&"string"==typeof e.filter&&("_view"===e.filter?e.view=le(e.view):e.filter=le(e.filter))}function Pt(e,t){return t.filter&&"string"==typeof t.filter&&!t.doc_ids&&!ae(e.db)}function Ot(e,t){var n=t.complete;if("_view"===t.filter){if(!t.view||"string"!=typeof t.view){var i=ne(X,"`view` filter parameter not found or invalid.");return n(i)}var s=ce(t.view);e.db.get("_design/"+s[0],(function(i,r){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(ie(i));var o=r&&r.views&&r.views[s[1]]&&r.views[s[1]].map;if(!o)return n(ne(z,r.views?"missing json key: "+s[1]:"missing json key: views"));t.filter=ge(["return function(doc) {",'  "use strict";',"  var emitted = false;","  var emit = function (a, b) {","    emitted = true;","  };","  var view = "+o+";","  view(doc);","  if (emitted) {","    return true;","  }","};"].join("\n"),{}),e.doChanges(t)}))}else if(t.selector)t.filter=function(e){return function(e,t){if("object"!=typeof t)throw new Error("Selector error: expected a JSON object");var n=wt([{doc:e}],{selector:t=ht(t)},Object.keys(t));return n&&1===n.length}(e,t.selector)},e.doChanges(t);else{var r=ce(t.filter);e.db.get("_design/"+r[0],(function(i,s){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(ie(i));var o=s&&s.filters&&s.filters[r[1]];if(!o)return n(ne(z,s&&s.filters?"missing json key: "+r[1]:"missing json key: filters"));t.filter=ge('"use strict";\nreturn '+o+";",{}),e.doChanges(t)}))}}function Bt(e){return e.reduce((function(e,t){return e[t]=!0,e}),{})}tt.plugin((function(e){e._changesFilterPlugin={validate:Ct,normalize:It,shouldFilter:Pt,filter:Ot}})),tt.version="7.3.0";var Tt=Bt(["_id","_rev","_access","_attachments","_deleted","_revisions","_revs_info","_conflicts","_deleted_conflicts","_local_seq","_rev_tree","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats","_removed"]),Nt=Bt(["_access","_attachments","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats"]);function Mt(e){if(!/^\d+-/.test(e))return ne(ee);var t=e.indexOf("-"),n=e.substring(0,t),i=e.substring(t+1);return{prefix:parseInt(n,10),id:i}}function qt(e,t,n){var i,s,r;n||(n={deterministic_revs:!0});var o={status:"available"};if(e._deleted&&(o.deleted=!0),t)if(e._id||(e._id=Oe()),s=Pe(e,n.deterministic_revs),e._rev){if((r=Mt(e._rev)).error)return r;e._rev_tree=[{pos:r.prefix,ids:[r.id,{status:"missing"},[[s,o,[]]]]}],i=r.prefix+1}else e._rev_tree=[{pos:1,ids:[s,o,[]]}],i=1;else if(e._revisions&&(e._rev_tree=function(e,t){for(var n=e.start-e.ids.length+1,i=e.ids,s=[i[0],t,[]],r=1,o=i.length;r<o;r++)s=[i[r],{status:"missing"},[s]];return[{pos:n,ids:s}]}(e._revisions,o),i=e._revisions.start,s=e._revisions.ids[0]),!e._rev_tree){if((r=Mt(e._rev)).error)return r;i=r.prefix,s=r.id,e._rev_tree=[{pos:i,ids:[s,o,[]]}]}oe(e._id),e._rev=i+"-"+s;var a={metadata:{},data:{}};for(var c in e)if(Object.prototype.hasOwnProperty.call(e,c)){var l="_"===c[0];if(l&&!Tt[c]){var u=ne(Y,c);throw u.message=Y.message+": "+c,u}l&&!Nt[c]?a.metadata[c.slice(1)]=e[c]:a.data[c]=e[c]}return a}function jt(e,t,n){var i=function(e){try{return me(e)}catch(e){return{error:ne(W,"Attachment is not a valid base64 string")}}}(e.data);if(i.error)return n(i.error);e.length=i.length,e.data="blob"===t?we(i,e.content_type):"base64"===t?ve(i):i,Ce(i,(function(t){e.digest="md5-"+t,n()}))}function Ft(e,t,n){if(e.stub)return n();"string"==typeof e.data?jt(e,t,n):function(e,t,n){Ce(e.data,(function(i){e.digest="md5-"+i,e.length=e.data.size||e.data.length||0,"binary"===t?Se(e.data,(function(t){e.data=t,n()})):"base64"===t?Le(e.data,(function(t){e.data=t,n()})):n()}))}(e,t,n)}function Dt(e,t,n,i,s,r,o,a){if(function(e,t){for(var n,i=e.slice(),s=t.split("-"),r=parseInt(s[0],10),o=s[1];n=i.pop();){if(n.pos===r&&n.ids[0]===o)return!0;for(var a=n.ids[2],c=0,l=a.length;c<l;c++)i.push({pos:n.pos+1,ids:a[c]})}return!1}(t.rev_tree,n.metadata.rev)&&!a)return i[s]=n,r();var c=t.winningRev||Be(t),l="deleted"in t?t.deleted:Ze(t,c),u="deleted"in n.metadata?n.metadata.deleted:Ze(n.metadata),d=/^1-/.test(n.metadata.rev);if(l&&!u&&a&&d){var h=n.data;h._rev=c,h._id=n.metadata.id,n=qt(h,a)}var f=Ue(t.rev_tree,n.metadata.rev_tree[0],e);if(a&&(l&&u&&"new_leaf"!==f.conflicts||!l&&"new_leaf"!==f.conflicts||l&&!u&&"new_branch"===f.conflicts)){var g=ne(H);return i[s]=g,r()}var p=n.metadata.rev;n.metadata.rev_tree=f.tree,n.stemmedRevs=f.stemmedRevs||[],t.rev_map&&(n.metadata.rev_map=t.rev_map);var m=Be(n.metadata),v=Ze(n.metadata,m),y=l===v?0:l<v?-1:1;o(n,m,v,p===m?v:Ze(n.metadata,p),!0,y,s,r)}function Vt(e,t,n,i,r,o,a,c,l){e=e||1e3;var u=c.new_edits,d=new s,h=0,f=t.length;function g(){++h===f&&l&&l()}t.forEach((function(e,t){if(e._id&&Ge(e._id)){var i=e._deleted?"_removeLocal":"_putLocal";n[i](e,{ctx:r},(function(e,n){o[t]=e||n,g()}))}else{var s=e.metadata.id;d.has(s)?(f--,d.get(s).push([e,t])):d.set(s,[[e,t]])}})),d.forEach((function(t,n){var s=0;function r(){++s<t.length?l():g()}function l(){var l=t[s],d=l[0],h=l[1];if(i.has(n))Dt(e,i.get(n),d,o,h,r,a,u);else{var f=Ue([],d.metadata.rev_tree[0],e);d.metadata.rev_tree=f.tree,d.stemmedRevs=f.stemmedRevs||[],function(e,t,n){var i=Be(e.metadata),s=Ze(e.metadata,i);if("was_delete"in c&&s)return o[t]=ne(z,"deleted"),n();if(u&&function(e){return"missing"===e.metadata.rev_tree[0].ids[1].status}(e)){var r=ne(H);return o[t]=r,n()}a(e,i,s,s,!1,s?0:1,t,n)}(d,h,r)}}l()}))}var Rt="document-store",zt="meta-store";function Ht(e){try{return JSON.stringify(e)}catch(t){return d.a.stringify(e)}}function Ut(e){return function(t){var n="unknown_error";t.target&&t.target.error&&(n=t.target.error.name||t.target.error.message),e(ne(Q,n,t.type))}}function $t(e,t,n){return{data:Ht(e),winningRev:t,deletedOrLocal:n?"1":"0",seq:e.seq,id:e.id}}function Zt(e){if(!e)return null;var t=function(e){try{return JSON.parse(e)}catch(t){return d.a.parse(e)}}(e.data);return t.winningRev=e.winningRev,t.deleted="1"===e.deletedOrLocal,t.seq=e.seq,t}function Gt(e){if(!e)return e;var t=e._doc_id_rev.lastIndexOf(":");return e._id=e._doc_id_rev.substring(0,t-1),e._rev=e._doc_id_rev.substring(t+1),delete e._doc_id_rev,e}function Wt(e,t,n,i){n?i(e?"string"!=typeof e?e:_e(e,t):ye([""],{type:t})):e?"string"!=typeof e?Ee(e,(function(e){i(ve(e))})):i(e):i("")}function Kt(e,t,n,i){var s=Object.keys(e._attachments||{});if(!s.length)return i&&i();var r=0;function o(){++r===s.length&&i&&i()}s.forEach((function(i){t.attachments&&t.include_docs?function(e,t){var i=e._attachments[t],s=i.digest;n.objectStore("attach-store").get(s).onsuccess=function(e){i.body=e.target.result.body,o()}}(e,i):(e._attachments[i].stub=!0,o())}))}function Yt(e,t){return Promise.all(e.map((function(e){if(e.doc&&e.doc._attachments){var n=Object.keys(e.doc._attachments);return Promise.all(n.map((function(n){var i=e.doc._attachments[n];if("body"in i){var s=i.body,r=i.content_type;return new Promise((function(o){Wt(s,r,t,(function(t){e.doc._attachments[n]=D(I(i,["digest","content_type"]),{data:t}),o()}))}))}})))}})))}function Xt(e,t,n){var i=[],s=n.objectStore("by-sequence"),r=n.objectStore("attach-store"),o=n.objectStore("attach-seq-store"),a=e.length;function c(){--a||function(){if(!i.length)return;i.forEach((function(e){o.index("digestSeq").count(IDBKeyRange.bound(e+"::",e+"::￿",!1,!1)).onsuccess=function(t){t.target.result||r.delete(e)}}))}()}e.forEach((function(e){var n=s.index("_doc_id_rev"),r=t+"::"+e;n.getKey(r).onsuccess=function(e){var t=e.target.result;if("number"!=typeof t)return c();s.delete(t),o.index("seq").openCursor(IDBKeyRange.only(t)).onsuccess=function(e){var t=e.target.result;if(t){var n=t.value.digestSeq.split("::")[0];i.push(n),o.delete(t.primaryKey),t.continue()}else c()}}}))}function Jt(e,t,n){try{return{txn:e.transaction(t,n)}}catch(e){return{error:e}}}var Qt=new M;function en(e,t,n,i,r,o){for(var a,c,l,u,d,h,f,g,p=t.docs,m=0,v=p.length;m<v;m++){var y=p[m];y._id&&Ge(y._id)||(y=p[m]=qt(y,n.new_edits,e)).error&&!f&&(f=y)}if(f)return o(f);var b=!1,w=0,_=new Array(p.length),E=new s,S=!1,L=i._meta.blobSupport?"blob":"base64";function x(){b=!0,k()}function k(){g&&b&&(g.docCount+=w,h.put(g))}function A(){S||(Qt.notify(i._meta.name),o(null,_))}function C(e,t,n,i,s,r,o,a){e.metadata.winningRev=t,e.metadata.deleted=n;var c=e.data;if(c._id=e.metadata.id,c._rev=e.metadata.rev,i&&(c._deleted=!0),c._attachments&&Object.keys(c._attachments).length)return function(e,t,n,i,s,r){var o=e.data,a=0,c=Object.keys(o._attachments);function l(){a===c.length&&I(e,t,n,i,s,r)}function d(){a++,l()}c.forEach((function(n){var i=e.data._attachments[n];if(i.stub)a++,l();else{var s=i.data;delete i.data,i.revpos=parseInt(t,10),function(e,t,n){u.count(e).onsuccess=function(i){if(i.target.result)return n();var s={digest:e,body:t};u.put(s).onsuccess=n}}(i.digest,s,d)}}))}(e,t,n,s,o,a);w+=r,k(),I(e,t,n,s,o,a)}function I(e,t,n,s,r,o){var u=e.data,h=e.metadata;function f(r){var o=e.stemmedRevs||[];s&&i.auto_compaction&&(o=o.concat(function(e){var t=[];return Te(e.rev_tree,(function(e,n,i,s,r){"available"!==r.status||e||(t.push(n+"-"+i),r.status="missing")})),t}(e.metadata))),o&&o.length&&Xt(o,e.metadata.id,a),h.seq=r.target.result;var l=$t(h,t,n);c.put(l).onsuccess=g}function g(){_[r]={ok:!0,id:h.id,rev:h.rev},E.set(e.metadata.id,e.metadata),function(e,t,n){var i=0,s=Object.keys(e.data._attachments||{});if(!s.length)return n();function r(){++i===s.length&&n()}function o(n){var i=e.data._attachments[n].digest,s=d.put({seq:t,digestSeq:i+"::"+t});s.onsuccess=r,s.onerror=function(e){e.preventDefault(),e.stopPropagation(),r()}}for(var a=0;a<s.length;a++)o(s[a])}(e,h.seq,o)}u._doc_id_rev=h.id+"::"+h.rev,delete u._id,delete u._rev;var p=l.put(u);p.onsuccess=f,p.onerror=function(e){e.preventDefault(),e.stopPropagation(),l.index("_doc_id_rev").getKey(u._doc_id_rev).onsuccess=function(e){l.put(u,e.target.result).onsuccess=f}}}!function(e,t,n){if(!e.length)return n();var i,s=0;function r(){s++,e.length===s&&(i?n(i):n())}e.forEach((function(e){var n=e.data&&e.data._attachments?Object.keys(e.data._attachments):[],s=0;if(!n.length)return r();function o(e){i=e,++s===n.length&&r()}for(var a in e.data._attachments)Object.prototype.hasOwnProperty.call(e.data._attachments,a)&&Ft(e.data._attachments[a],t,o)}))}(p,L,(function(t){if(t)return o(t);!function(){var t=Jt(r,[Rt,"by-sequence","attach-store","local-store","attach-seq-store",zt],"readwrite");if(t.error)return o(t.error);(a=t.txn).onabort=Ut(o),a.ontimeout=Ut(o),a.oncomplete=A,c=a.objectStore(Rt),l=a.objectStore("by-sequence"),u=a.objectStore("attach-store"),d=a.objectStore("attach-seq-store"),(h=a.objectStore(zt)).get(zt).onsuccess=function(e){g=e.target.result,k()},function(e){var t=[];if(p.forEach((function(e){e.data&&e.data._attachments&&Object.keys(e.data._attachments).forEach((function(n){var i=e.data._attachments[n];i.stub&&t.push(i.digest)}))})),!t.length)return e();var n,i=0;t.forEach((function(s){!function(e,t){u.get(e).onsuccess=function(n){if(n.target.result)t();else{var i=ne(te,"unknown stub attachment with digest "+e);i.status=412,t(i)}}}(s,(function(s){s&&!n&&(n=s),++i===t.length&&e(n)}))}))}((function(t){if(t)return S=!0,o(t);!function(){if(!p.length)return;var t=0;function s(){++t===p.length&&Vt(e.revs_limit,p,i,E,a,_,C,n,x)}function r(e){var t=Zt(e.target.result);t&&E.set(t.id,t),s()}for(var o=0,l=p.length;o<l;o++){var u=p[o];if(u._id&&Ge(u._id))s();else c.get(u.metadata.id).onsuccess=r}}()}))}()}))}function tn(e,t,n,i,s){var r,o,a;function c(e){o=e.target.result,r&&s(r,o,a)}function l(e){r=e.target.result,o&&s(r,o,a)}function u(e){var t=e.target.result;if(!t)return s();s([t.key],[t.value],t)}-1===i&&(i=1e3),"function"==typeof e.getAll&&"function"==typeof e.getAllKeys&&i>1&&!n?(a={continue:function(){if(!r.length)return s();var n,a=r[r.length-1];if(t&&t.upper)try{n=IDBKeyRange.bound(a,t.upper,!0,t.upperOpen)}catch(e){if("DataError"===e.name&&0===e.code)return s()}else n=IDBKeyRange.lowerBound(a,!0);t=n,r=null,o=null,e.getAll(t,i).onsuccess=c,e.getAllKeys(t,i).onsuccess=l}},e.getAll(t,i).onsuccess=c,e.getAllKeys(t,i).onsuccess=l):n?e.openCursor(t,"prev").onsuccess=u:e.openCursor(t).onsuccess=u}function nn(e,t,n){var i,s,r="startkey"in e&&e.startkey,o="endkey"in e&&e.endkey,a="key"in e&&e.key,c="keys"in e&&e.keys,l=e.skip||0,u="number"==typeof e.limit?e.limit:-1,d=!1!==e.inclusive_end;if(!c&&(s=(i=function(e,t,n,i,s){try{if(e&&t)return s?IDBKeyRange.bound(t,e,!n,!1):IDBKeyRange.bound(e,t,!1,!n);if(e)return s?IDBKeyRange.upperBound(e):IDBKeyRange.lowerBound(e);if(t)return s?IDBKeyRange.lowerBound(t,!n):IDBKeyRange.upperBound(t,!n);if(i)return IDBKeyRange.only(i)}catch(e){return{error:e}}return null}(r,o,d,a,e.descending))&&i.error)&&("DataError"!==s.name||0!==s.code))return n(ne(Q,s.name,s.message));var h=[Rt,"by-sequence",zt];e.attachments&&h.push("attach-store");var f=Jt(t,h,"readonly");if(f.error)return n(f.error);var g=f.txn;g.oncomplete=function(){e.attachments?Yt(E,e.binary).then(k):k()},g.onabort=Ut(n);var p,m,v,y=g.objectStore(Rt),b=g.objectStore("by-sequence"),w=g.objectStore(zt),_=b.index("_doc_id_rev"),E=[];function S(t,n){var i={id:n.id,key:n.id,value:{rev:t}};n.deleted?c&&(E.push(i),i.value.deleted=!0,i.doc=null):l--<=0&&(E.push(i),e.include_docs&&function(t,n,i){var s=t.id+"::"+i;_.get(s).onsuccess=function(i){if(n.doc=Gt(i.target.result)||{},e.conflicts){var s=qe(t);s.length&&(n.doc._conflicts=s)}Kt(n.doc,e,g)}}(n,i,t))}function L(e){for(var t=0,n=e.length;t<n&&E.length!==u;t++){var i=e[t];if(i.error&&c)E.push(i);else{var s=Zt(i);S(s.winningRev,s)}}}function x(e,t,n){n&&(L(t),E.length<u&&n.continue())}function k(){var t={total_rows:p,offset:e.skip,rows:E};e.update_seq&&void 0!==m&&(t.update_seq=m),n(null,t)}return w.get(zt).onsuccess=function(e){p=e.target.result.docCount},e.update_seq&&(v=function(e){e.target.result&&e.target.result.length>0&&(m=e.target.result[0])},b.openCursor(null,"prev").onsuccess=function(e){var t=e.target.result,n=void 0;return t&&t.key&&(n=t.key),v({target:{result:[n]}})}),s||0===u?void 0:c?function(e,t,n){var i=new Array(e.length),s=0;e.forEach((function(r,o){t.get(r).onsuccess=function(t){t.target.result?i[o]=t.target.result:i[o]={key:r,error:"not_found"},++s===e.length&&n(e,i,{})}}))}(e.keys,y,x):-1===u?function(e,t,n){if("function"!=typeof e.getAll){var i=[];e.openCursor(t).onsuccess=function(e){var t=e.target.result;t?(i.push(t.value),t.continue()):n({target:{result:i}})}}else e.getAll(t).onsuccess=n}(y,i,(function(t){var n=t.target.result;e.descending&&(n=n.reverse()),L(n)})):void tn(y,i,e.descending,u+l,x)}var sn=!1,rn=[];function on(){!sn&&rn.length&&(sn=!0,rn.shift()())}function an(e,t,n,r){if((e=x(e)).continuous){var o=n+":"+Oe();return Qt.addListener(n,o,t,e),Qt.notify(n),{cancel:function(){Qt.removeListener(n,o)}}}var a=e.doc_ids&&new i(e.doc_ids);e.since=e.since||0;var c=e.since,l="limit"in e?e.limit:-1;0===l&&(l=1);var u,d,h,f,g=[],p=0,m=se(e),v=new s;function y(e,t,n,i){if(n.seq!==t)return i();if(n.winningRev===e._rev)return i(n,e);var s=e._id+"::"+n.winningRev;f.get(s).onsuccess=function(e){i(n,Gt(e.target.result))}}function b(){e.complete(null,{results:g,last_seq:c})}var w=[Rt,"by-sequence"];e.attachments&&w.push("attach-store");var _=Jt(r,w,"readonly");if(_.error)return e.complete(_.error);(u=_.txn).onabort=Ut(e.complete),u.oncomplete=function(){!e.continuous&&e.attachments?Yt(g).then(b):b()},d=u.objectStore("by-sequence"),h=u.objectStore(Rt),f=d.index("_doc_id_rev"),tn(d,e.since&&!e.descending?IDBKeyRange.lowerBound(e.since,!0):null,e.descending,l,(function(t,n,i){if(i&&t.length){var s=new Array(t.length),r=new Array(t.length),o=0;n.forEach((function(n,c){!function(e,t,n){if(a&&!a.has(e._id))return n();var i=v.get(e._id);if(i)return y(e,t,i,n);h.get(e._id).onsuccess=function(s){i=Zt(s.target.result),v.set(e._id,i),y(e,t,i,n)}}(Gt(n),t[c],(function(n,a){r[c]=n,s[c]=a,++o===t.length&&function(){for(var t=[],n=0,o=s.length;n<o&&p!==l;n++){var a=s[n];if(a){var c=r[n];t.push(d(c,a))}}Promise.all(t).then((function(t){for(var n=0,i=t.length;n<i;n++)t[n]&&e.onChange(t[n])})).catch(e.complete),p!==l&&i.continue()}()}))}))}function d(t,n){var i=e.processChange(n,t,e);c=i.seq=t.seq;var s=m(i);return"object"==typeof s?Promise.reject(s):s?(p++,e.return_docs&&g.push(i),e.attachments&&e.include_docs?new Promise((function(t){Kt(n,e,u,(function(){Yt([i],e.binary).then((function(){t(i)}))}))})):Promise.resolve(i)):Promise.resolve()}}))}var cn,ln=new s,un=new s;function dn(e,t){var n=this;!function(e,t,n){rn.push((function(){e((function(e,i){!function(e,t,n,i){try{e(t,n)}catch(t){i.emit("error",t)}}(t,e,i,n),sn=!1,o()((function(){on()}))}))})),on()}((function(t){!function(e,t,n){var i=t.name,s=null,r=null;function a(e){return function(t,n){t&&t instanceof Error&&!t.reason&&r&&(t.reason=r),e(t,n)}}function c(e,t){var n=e.objectStore(Rt);n.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var s=i.value,r=Ze(s);s.deletedOrLocal=r?"1":"0",n.put(s),i.continue()}else t()}}function l(e,t){var n=e.objectStore("local-store"),i=e.objectStore(Rt),s=e.objectStore("by-sequence");i.openCursor().onsuccess=function(e){var r=e.target.result;if(r){var o=r.value,a=o.id,c=Ge(a),l=Be(o);if(c){var u=a+"::"+l,d=a+"::",h=a+"::~",f=s.index("_doc_id_rev"),g=IDBKeyRange.bound(d,h,!1,!1),p=f.openCursor(g);p.onsuccess=function(e){if(p=e.target.result){var t=p.value;t._doc_id_rev===u&&n.put(t),s.delete(p.primaryKey),p.continue()}else i.delete(r.primaryKey),r.continue()}}else r.continue()}else t&&t()}}function u(e,t){var n=e.objectStore("by-sequence"),i=e.objectStore("attach-store"),s=e.objectStore("attach-seq-store");i.count().onsuccess=function(e){if(!e.target.result)return t();n.openCursor().onsuccess=function(e){var n=e.target.result;if(!n)return t();for(var i=n.value,r=n.primaryKey,o=Object.keys(i._attachments||{}),a={},c=0;c<o.length;c++){a[i._attachments[o[c]].digest]=!0}var l=Object.keys(a);for(c=0;c<l.length;c++){var u=l[c];s.put({seq:r,digestSeq:u+"::"+r})}n.continue()}}}function d(e){var t=e.objectStore("by-sequence"),n=e.objectStore(Rt);n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var s,r=(s=i.value).data?Zt(s):(s.deleted="1"===s.deletedOrLocal,s);if(r.winningRev=r.winningRev||Be(r),r.seq)return o();!function(){var e=r.id+"::",n=r.id+"::￿",i=t.index("_doc_id_rev").openCursor(IDBKeyRange.bound(e,n)),s=0;i.onsuccess=function(e){var t=e.target.result;if(!t)return r.seq=s,o();var n=t.primaryKey;n>s&&(s=n),t.continue()}}()}function o(){var e=$t(r,r.winningRev,r.deleted);n.put(e).onsuccess=function(){i.continue()}}}}e._meta=null,e._remote=!1,e.type=function(){return"idb"},e._id=A((function(t){t(null,e._meta.instanceId)})),e._bulkDocs=function(n,i,r){en(t,n,i,e,s,a(r))},e._get=function(e,t,n){var i,r,o,a=t.ctx;if(!a){var c=Jt(s,[Rt,"by-sequence","attach-store"],"readonly");if(c.error)return n(c.error);a=c.txn}function l(){n(o,{doc:i,metadata:r,ctx:a})}a.objectStore(Rt).get(e).onsuccess=function(e){if(!(r=Zt(e.target.result)))return o=ne(z,"missing"),l();var n;if(t.rev)n=t.latest?function(e,t){for(var n,i=t.rev_tree.slice();n=i.pop();){var s=n.pos,r=n.ids,o=r[0],a=r[1],c=r[2],l=0===c.length,u=n.history?n.history.slice():[];if(u.push({id:o,pos:s,opts:a}),l)for(var d=0,h=u.length;d<h;d++){var f=u[d];if(f.pos+"-"+f.id===e)return s+"-"+o}for(var g=0,p=c.length;g<p;g++)i.push({pos:s+1,ids:c[g],history:u})}throw new Error("Unable to resolve latest revision for id "+t.id+", rev "+e)}(t.rev,r):t.rev;else if(n=r.winningRev,Ze(r))return o=ne(z,"deleted"),l();var s=a.objectStore("by-sequence"),c=r.id+"::"+n;s.index("_doc_id_rev").get(c).onsuccess=function(e){if((i=e.target.result)&&(i=Gt(i)),!i)return o=ne(z,"missing"),l();l()}}},e._getAttachment=function(e,t,n,i,r){var o;if(i.ctx)o=i.ctx;else{var a=Jt(s,[Rt,"by-sequence","attach-store"],"readonly");if(a.error)return r(a.error);o=a.txn}var c=n.digest,l=n.content_type;o.objectStore("attach-store").get(c).onsuccess=function(e){Wt(e.target.result.body,l,i.binary,(function(e){r(null,e)}))}},e._info=function(t){var n,i,r=Jt(s,[zt,"by-sequence"],"readonly");if(r.error)return t(r.error);var o=r.txn;o.objectStore(zt).get(zt).onsuccess=function(e){i=e.target.result.docCount},o.objectStore("by-sequence").openCursor(null,"prev").onsuccess=function(e){var t=e.target.result;n=t?t.key:0},o.oncomplete=function(){t(null,{doc_count:i,update_seq:n,idb_attachment_format:e._meta.blobSupport?"binary":"base64"})}},e._allDocs=function(e,t){nn(e,s,a(t))},e._changes=function(t){return an(t,e,i,s)},e._close=function(e){s.close(),ln.delete(i),e()},e._getRevisionTree=function(e,t){var n=Jt(s,[Rt],"readonly");if(n.error)return t(n.error);n.txn.objectStore(Rt).get(e).onsuccess=function(e){var n=Zt(e.target.result);n?t(null,n.rev_tree):t(ne(z))}},e._doCompaction=function(e,t,n){var i=Jt(s,[Rt,"by-sequence","attach-store","attach-seq-store"],"readwrite");if(i.error)return n(i.error);var r=i.txn;r.objectStore(Rt).get(e).onsuccess=function(n){var i=Zt(n.target.result);Te(i.rev_tree,(function(e,n,i,s,r){var o=n+"-"+i;-1!==t.indexOf(o)&&(r.status="missing")})),Xt(t,e,r);var s=i.winningRev,o=i.deleted;r.objectStore(Rt).put($t(i,s,o))},r.onabort=Ut(n),r.oncomplete=function(){n()}},e._getLocal=function(e,t){var n=Jt(s,["local-store"],"readonly");if(n.error)return t(n.error);var i=n.txn.objectStore("local-store").get(e);i.onerror=Ut(t),i.onsuccess=function(e){var n=e.target.result;n?(delete n._doc_id_rev,t(null,n)):t(ne(z))}},e._putLocal=function(e,t,n){"function"==typeof t&&(n=t,t={}),delete e._revisions;var i=e._rev,r=e._id;e._rev=i?"0-"+(parseInt(i.split("-")[1],10)+1):"0-1";var o,a=t.ctx;if(!a){var c=Jt(s,["local-store"],"readwrite");if(c.error)return n(c.error);(a=c.txn).onerror=Ut(n),a.oncomplete=function(){o&&n(null,o)}}var l,u=a.objectStore("local-store");i?(l=u.get(r)).onsuccess=function(s){var r=s.target.result;r&&r._rev===i?u.put(e).onsuccess=function(){o={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,o)}:n(ne(H))}:((l=u.add(e)).onerror=function(e){n(ne(H)),e.preventDefault(),e.stopPropagation()},l.onsuccess=function(){o={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,o)})},e._removeLocal=function(e,t,n){"function"==typeof t&&(n=t,t={});var i,r=t.ctx;if(!r){var o=Jt(s,["local-store"],"readwrite");if(o.error)return n(o.error);(r=o.txn).oncomplete=function(){i&&n(null,i)}}var a=e._id,c=r.objectStore("local-store"),l=c.get(a);l.onerror=Ut(n),l.onsuccess=function(s){var r=s.target.result;r&&r._rev===e._rev?(c.delete(a),i={ok:!0,id:a,rev:"0-0"},t.ctx&&n(null,i)):n(ne(z))}},e._destroy=function(e,t){Qt.removeAllListeners(i);var n=un.get(i);n&&n.result&&(n.result.close(),ln.delete(i));var s=indexedDB.deleteDatabase(i);s.onsuccess=function(){un.delete(i),N()&&i in localStorage&&delete localStorage[i],t(null,{ok:!0})},s.onerror=Ut(t)};var h=ln.get(i);if(h)return s=h.idb,e._meta=h.global,o()((function(){n(null,e)}));var f=indexedDB.open(i,5);un.set(i,f),f.onupgradeneeded=function(e){var t=e.target.result;if(e.oldVersion<1)return function(e){var t=e.createObjectStore(Rt,{keyPath:"id"});e.createObjectStore("by-sequence",{autoIncrement:!0}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0}),e.createObjectStore("attach-store",{keyPath:"digest"}),e.createObjectStore(zt,{keyPath:"id",autoIncrement:!1}),e.createObjectStore("detect-blob-support"),t.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),e.createObjectStore("local-store",{keyPath:"_id"});var n=e.createObjectStore("attach-seq-store",{autoIncrement:!0});n.createIndex("seq","seq"),n.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var n=e.currentTarget.transaction;e.oldVersion<3&&function(e){e.createObjectStore("local-store",{keyPath:"_id"}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0})}(t),e.oldVersion<4&&function(e){var t=e.createObjectStore("attach-seq-store",{autoIncrement:!0});t.createIndex("seq","seq"),t.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var i=[c,l,u,d],s=e.oldVersion;!function e(){var t=i[s-1];s++,t&&t(n,e)}()},f.onsuccess=function(t){(s=t.target.result).onversionchange=function(){s.close(),ln.delete(i)},s.onabort=function(e){q("error","Database has a global failure",e.target.error),r=e.target.error,s.close(),ln.delete(i)};var o,a,c,l,u=s.transaction([zt,"detect-blob-support",Rt],"readwrite"),d=!1;function h(){void 0!==c&&d&&(e._meta={name:i,instanceId:l,blobSupport:c},ln.set(i,{idb:s,global:e._meta}),n(null,e))}function f(){if(void 0!==a&&void 0!==o){var e=i+"_id";e in o?l=o[e]:o[e]=l=Oe(),o.docCount=a,u.objectStore(zt).put(o)}}u.objectStore(zt).get(zt).onsuccess=function(e){o=e.target.result||{id:zt},f()},function(e,t){e.objectStore(Rt).index("deletedOrLocal").count(IDBKeyRange.only("0")).onsuccess=function(e){t(e.target.result)}}(u,(function(e){a=e,f()})),cn||(cn=function(e){return new Promise((function(t){var n=ye([""]),i=e.objectStore("detect-blob-support").put(n,"key");i.onsuccess=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)},i.onerror=e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)}})).catch((function(){return!1}))}(u)),cn.then((function(e){c=e,h()})),u.oncomplete=function(){d=!0,h()},u.onabort=Ut(n)},f.onerror=function(e){var t=e.target.error&&e.target.error.message;t?-1!==t.indexOf("stored database is a higher version")&&(t=new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')):t="Failed to open indexedDB, are you in private browsing mode?",q("error",t),n(ne(Q,t))}}(n,e,t)}),t,n.constructor)}dn.valid=function(){try{return"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}};var hn={};function fn(e){var t=e.doc||e.ok,n=t&&t._attachments;n&&Object.keys(n).forEach((function(e){var t=n[e];t.data=_e(t.data,t.content_type)}))}function gn(e){return/^_design/.test(e)?"_design/"+encodeURIComponent(e.slice(8)):/^_local/.test(e)?"_local/"+encodeURIComponent(e.slice(7)):encodeURIComponent(e)}function pn(e){return e._attachments&&Object.keys(e._attachments)?Promise.all(Object.keys(e._attachments).map((function(t){var n=e._attachments[t];if(n.data&&"string"!=typeof n.data)return new Promise((function(e){Le(n.data,e)})).then((function(e){n.data=e}))}))):Promise.resolve()}function mn(e,t){if(function(e){if(!e.prefix)return!1;var t=fe(e.prefix).protocol;return"http"===t||"https"===t}(t)){var n=t.name.substr(t.prefix.length);e=t.prefix.replace(/\/?$/,"/")+encodeURIComponent(n)}var i=fe(e);(i.user||i.password)&&(i.auth={username:i.user,password:i.password});var s=i.path.replace(/(^\/|\/$)/g,"").split("/");return i.db=s.pop(),-1===i.db.indexOf("%")&&(i.db=encodeURIComponent(i.db)),i.path=s.join("/"),i}function vn(e,t){return yn(e,e.db+"/"+t)}function yn(e,t){var n=e.path?"/":"";return e.protocol+"://"+e.host+(e.port?":"+e.port:"")+"/"+e.path+n+t}function bn(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}function wn(t,n){var i=this,s=mn(t.name,t),r=vn(s,"");t=x(t);var a,c=function(e,n){if((n=n||{}).headers=n.headers||new st,n.credentials="include",t.auth||s.auth){var i=t.auth||s.auth,r=i.username+":"+i.password,o=ve(unescape(encodeURIComponent(r)));n.headers.set("Authorization","Basic "+o)}var a=t.headers||{};return Object.keys(a).forEach((function(e){n.headers.append(e,a[e])})),function(e){var t="undefined"!=typeof navigator&&navigator.userAgent?navigator.userAgent.toLowerCase():"",n=-1!==t.indexOf("msie"),i=-1!==t.indexOf("trident"),s=-1!==t.indexOf("edge"),r=!("method"in e)||"GET"===e.method;return(n||i||s)&&r}(n)&&(e+=(-1===e.indexOf("?")?"?":"&")+"_nonce="+Date.now()),(t.fetch||it)(e,n)};function l(e,t){return C(e,f()((function(e){d().then((function(){return t.apply(this,e)})).catch((function(t){e.pop()(t)}))}))).bind(i)}function u(e,t,n){var i={};return(t=t||{}).headers=t.headers||new st,t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json"),t.headers.get("Accept")||t.headers.set("Accept","application/json"),c(e,t).then((function(e){return i.ok=e.ok,i.status=e.status,e.json()})).then((function(e){if(i.data=e,!i.ok){i.data.status=i.status;var t=ie(i.data);if(n)return n(t);throw t}if(Array.isArray(i.data)&&(i.data=i.data.map((function(e){return e.error||e.missing?ie(e):e}))),!n)return i;n(null,i.data)}))}function d(){return t.skip_setup?Promise.resolve():a||((a=u(r).catch((function(e){return e&&e.status&&404===e.status?(F(404,"PouchDB is just detecting if the remote exists."),u(r,{method:"PUT"})):Promise.reject(e)})).catch((function(e){return!(!e||!e.status||412!==e.status)||Promise.reject(e)}))).catch((function(){a=null})),a)}function h(e){return e.split("/").map(encodeURIComponent).join("/")}o()((function(){n(null,i)})),i._remote=!0,i.type=function(){return"http"},i.id=l("id",(function(e){c(yn(s,"")).then((function(e){return e.json()})).catch((function(){return{}})).then((function(t){var n=t&&t.uuid?t.uuid+s.db:vn(s,"");e(null,n)}))})),i.compact=l("compact",(function(e,t){"function"==typeof e&&(t=e,e={}),e=x(e),u(vn(s,"_compact"),{method:"POST"}).then((function(){!function n(){i.info((function(i,s){s&&!s.compact_running?t(null,{ok:!0}):setTimeout(n,e.interval||200)}))}()}))})),i.bulkGet=C("bulkGet",(function(e,t){var n=this;function i(t){var n={};e.revs&&(n.revs=!0),e.attachments&&(n.attachments=!0),e.latest&&(n.latest=!0),u(vn(s,"_bulk_get"+bn(n)),{method:"POST",body:JSON.stringify({docs:e.docs})}).then((function(n){e.attachments&&e.binary&&n.data.results.forEach((function(e){e.docs.forEach(fn)})),t(null,n.data)})).catch(t)}function r(){var i=Math.ceil(e.docs.length/50),s=0,r=new Array(i);function o(e){return function(n,o){r[e]=o.results,++s===i&&t(null,{results:re(r)})}}for(var a=0;a<i;a++){var c=I(e,["revs","attachments","binary","latest"]);c.docs=e.docs.slice(50*a,Math.min(e.docs.length,50*(a+1))),T(n,c,o(a))}}var o=yn(s,""),a=hn[o];"boolean"!=typeof a?i((function(e,n){e?(hn[o]=!1,F(e.status,"PouchDB is just detecting if the remote supports the _bulk_get API."),r()):(hn[o]=!0,t(null,n))})):a?i(t):r()})),i._info=function(e){d().then((function(){return c(vn(s,""))})).then((function(e){return e.json()})).then((function(t){t.host=vn(s,""),e(null,t)})).catch(e)},i.fetch=function(e,t){return d().then((function(){var n="/"===e.substring(0,1)?yn(s,e.substring(1)):vn(s,e);return c(n,t)}))},i.get=l("get",(function(e,t,n){"function"==typeof t&&(n=t,t={});var i={};function r(e){var n=e._attachments,i=n&&Object.keys(n);if(n&&i.length)return function(e,t){return new Promise((function(n,i){var s,r=0,o=0,a=0,c=e.length;function l(){++a===c?s?i(s):n():h()}function u(){r--,l()}function d(e){r--,s=s||e,l()}function h(){for(;r<t&&o<c;)r++,e[o++]().then(u,d)}h()}))}(i.map((function(i){return function(){return function(i){var r=n[i],o=gn(e._id)+"/"+h(i)+"?rev="+e._rev;return c(vn(s,o)).then((function(e){return"buffer"in e?e.buffer():e.blob()})).then((function(e){if(t.binary){var n=Object.getOwnPropertyDescriptor(e.__proto__,"type");return n&&!n.set||(e.type=r.content_type),e}return new Promise((function(t){Le(e,t)}))})).then((function(e){delete r.stub,delete r.length,r.data=e}))}(i)}})),5)}(t=x(t)).revs&&(i.revs=!0),t.revs_info&&(i.revs_info=!0),t.latest&&(i.latest=!0),t.open_revs&&("all"!==t.open_revs&&(t.open_revs=JSON.stringify(t.open_revs)),i.open_revs=t.open_revs),t.rev&&(i.rev=t.rev),t.conflicts&&(i.conflicts=t.conflicts),t.update_seq&&(i.update_seq=t.update_seq),e=gn(e),u(vn(s,e+bn(i))).then((function(e){return Promise.resolve().then((function(){if(t.attachments)return n=e.data,Array.isArray(n)?Promise.all(n.map((function(e){if(e.ok)return r(e.ok)}))):r(n);var n})).then((function(){n(null,e.data)}))})).catch((function(t){t.docId=e,n(t)}))})),i.remove=l("remove",(function(e,t,n,i){var r;"string"==typeof t?(r={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(r=e,"function"==typeof t?(i=t,n={}):(i=n,n=t));var o=r._rev||n.rev;u(vn(s,gn(r._id))+"?rev="+o,{method:"DELETE"},i).catch(i)})),i.getAttachment=l("getAttachment",(function(t,n,i,r){"function"==typeof i&&(r=i,i={});var o,a=i.rev?"?rev="+i.rev:"",l=vn(s,gn(t))+"/"+h(n)+a;c(l,{method:"GET"}).then((function(t){if(o=t.headers.get("content-type"),t.ok)return void 0===e||e.browser||"function"!=typeof t.buffer?t.blob():t.buffer();throw t})).then((function(t){void 0===e||e.browser||(t.type=o),r(null,t)})).catch((function(e){r(e)}))})),i.removeAttachment=l("removeAttachment",(function(e,t,n,i){u(vn(s,gn(e)+"/"+h(t))+"?rev="+n,{method:"DELETE"},i).catch(i)})),i.putAttachment=l("putAttachment",(function(e,t,n,i,r,o){"function"==typeof r&&(o=r,r=i,i=n,n=null);var a=gn(e)+"/"+h(t),c=vn(s,a);if(n&&(c+="?rev="+n),"string"==typeof i){var l;try{l=me(i)}catch(e){return o(ne(W,"Attachment is not a valid base64 string"))}i=l?we(l,r):""}u(c,{headers:new st({"Content-Type":r}),method:"PUT",body:i},o).catch(o)})),i._bulkDocs=function(e,t,n){e.new_edits=t.new_edits,d().then((function(){return Promise.all(e.docs.map(pn))})).then((function(){return u(vn(s,"_bulk_docs"),{method:"POST",body:JSON.stringify(e)},n)})).catch(n)},i._put=function(e,t,n){d().then((function(){return pn(e)})).then((function(){return u(vn(s,gn(e._id)),{method:"PUT",body:JSON.stringify(e)})})).then((function(e){n(null,e.data)})).catch((function(t){t.docId=e&&e._id,n(t)}))},i.allDocs=l("allDocs",(function(e,t){"function"==typeof e&&(t=e,e={});var n,i={},r="GET";(e=x(e)).conflicts&&(i.conflicts=!0),e.update_seq&&(i.update_seq=!0),e.descending&&(i.descending=!0),e.include_docs&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.key&&(i.key=JSON.stringify(e.key)),e.start_key&&(e.startkey=e.start_key),e.startkey&&(i.startkey=JSON.stringify(e.startkey)),e.end_key&&(e.endkey=e.end_key),e.endkey&&(i.endkey=JSON.stringify(e.endkey)),void 0!==e.inclusive_end&&(i.inclusive_end=!!e.inclusive_end),void 0!==e.limit&&(i.limit=e.limit),void 0!==e.skip&&(i.skip=e.skip);var o=bn(i);void 0!==e.keys&&(r="POST",n={keys:e.keys}),u(vn(s,"_all_docs"+o),{method:r,body:JSON.stringify(n)}).then((function(n){e.include_docs&&e.attachments&&e.binary&&n.data.rows.forEach(fn),t(null,n.data)})).catch(t)})),i._changes=function(e){var t="batch_size"in e?e.batch_size:25;(e=x(e)).continuous&&!("heartbeat"in e)&&(e.heartbeat=1e4);var n="timeout"in e?e.timeout:3e4;"timeout"in e&&e.timeout&&n-e.timeout<5e3&&(n=e.timeout+5e3),"heartbeat"in e&&e.heartbeat&&n-e.heartbeat<5e3&&(n=e.heartbeat+5e3);var i={};"timeout"in e&&e.timeout&&(i.timeout=e.timeout);var r=void 0!==e.limit&&e.limit,a=r;if(e.style&&(i.style=e.style),(e.include_docs||e.filter&&"function"==typeof e.filter)&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.continuous&&(i.feed="longpoll"),e.seq_interval&&(i.seq_interval=e.seq_interval),e.conflicts&&(i.conflicts=!0),e.descending&&(i.descending=!0),e.update_seq&&(i.update_seq=!0),"heartbeat"in e&&e.heartbeat&&(i.heartbeat=e.heartbeat),e.filter&&"string"==typeof e.filter&&(i.filter=e.filter),e.view&&"string"==typeof e.view&&(i.filter="_view",i.view=e.view),e.query_params&&"object"==typeof e.query_params)for(var c in e.query_params)Object.prototype.hasOwnProperty.call(e.query_params,c)&&(i[c]=e.query_params[c]);var l,h="GET";e.doc_ids?(i.filter="_doc_ids",h="POST",l={doc_ids:e.doc_ids}):e.selector&&(i.filter="_selector",h="POST",l={selector:e.selector});var f,g=new nt,p=function(n,o){if(!e.aborted){i.since=n,"object"==typeof i.since&&(i.since=JSON.stringify(i.since)),e.descending?r&&(i.limit=a):i.limit=!r||a>t?t:a;var c=vn(s,"_changes"+bn(i)),p={signal:g.signal,method:h,body:JSON.stringify(l)};f=n,e.aborted||d().then((function(){return u(c,p,o)})).catch(o)}},m={results:[]},v=function(n,i){if(!e.aborted){var s=0;if(i&&i.results){s=i.results.length,m.last_seq=i.last_seq;var c=null,l=null;"number"==typeof i.pending&&(c=i.pending),"string"!=typeof m.last_seq&&"number"!=typeof m.last_seq||(l=m.last_seq);e.query_params,i.results=i.results.filter((function(t){a--;var n=se(e)(t);return n&&(e.include_docs&&e.attachments&&e.binary&&fn(t),e.return_docs&&m.results.push(t),e.onChange(t,c,l)),n}))}else if(n)return e.aborted=!0,void e.complete(n);i&&i.last_seq&&(f=i.last_seq);var u=r&&a<=0||i&&s<t||e.descending;(!e.continuous||r&&a<=0)&&u?e.complete(null,m):o()((function(){p(f,v)}))}};return p(e.since||0,v),{cancel:function(){e.aborted=!0,g.abort()}}},i.revsDiff=l("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={}),u(vn(s,"_revs_diff"),{method:"POST",body:JSON.stringify(e)},n).catch(n)})),i._close=function(e){e()},i._destroy=function(e,t){u(vn(s,""),{method:"DELETE"}).then((function(e){t(null,e)})).catch((function(e){404===e.status?t(null,{ok:!0}):t(e)}))}}function _n(e){this.status=400,this.name="query_parse_error",this.message=e,this.error=!0;try{Error.captureStackTrace(this,_n)}catch(e){}}function En(e){this.status=404,this.name="not_found",this.message=e,this.error=!0;try{Error.captureStackTrace(this,En)}catch(e){}}function Sn(e){this.status=500,this.name="invalid_value",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Sn)}catch(e){}}function Ln(e,t){return t&&e.then((function(e){o()((function(){t(null,e)}))}),(function(e){o()((function(){t(e)}))})),e}function xn(e,t){return function(){var n=arguments,i=this;return e.add((function(){return t.apply(i,n)}))}}function kn(e){var t=new i(e),n=new Array(t.size),s=-1;return t.forEach((function(e){n[++s]=e})),n}function An(e){var t=new Array(e.size),n=-1;return e.forEach((function(e,i){t[++n]=i})),t}function Cn(e){return new Sn("builtin "+e+" function requires map values to be numbers or number arrays")}function In(e){for(var t=0,n=0,i=e.length;n<i;n++){var s=e[n];if("number"!=typeof s){if(!Array.isArray(s))throw Cn("_sum");t="number"==typeof t?[t]:t;for(var r=0,o=s.length;r<o;r++){var a=s[r];if("number"!=typeof a)throw Cn("_sum");void 0===t[r]?t.push(a):t[r]+=a}}else"number"==typeof t?t+=s:t[0]+=s}return t}wn.valid=function(){return!0},p()(_n,Error),p()(En,Error),p()(Sn,Error);var Pn=q.bind(null,"log"),On=Array.isArray,Bn=JSON.parse;function Tn(e,t){return ge("return ("+e.replace(/;\s*$/,"")+");",{emit:t,sum:In,log:Pn,isArray:On,toJSON:Bn})}function Nn(){this.promise=new Promise((function(e){e()}))}function Mn(e){if(!e)return"undefined";switch(typeof e){case"function":case"string":return e.toString();default:return JSON.stringify(e)}}function qn(e,t,n,i,s,r){var o,a=function(e,t){return Mn(e)+Mn(t)+"undefined"}(n,i);if(!s&&(o=e._cachedViews=e._cachedViews||{})[a])return o[a];var c=e.info().then((function(c){var l=c.db_name+"-mrview-"+(s?"temp":Ie(a));return pe(e,"_local/"+r,(function(e){e.views=e.views||{};var n=t;-1===n.indexOf("/")&&(n=t+"/"+t);var i=e.views[n]=e.views[n]||{};if(!i[l])return i[l]=!0,e})).then((function(){return e.registerDependentDatabase(l).then((function(t){var s=t.db;s.auto_compaction=!0;var r={name:l,db:s,sourceDB:e,adapter:e.adapter,mapFun:n,reduceFun:i};return r.db.get("_local/lastSeq").catch((function(e){if(404!==e.status)throw e})).then((function(e){return r.seq=e?e.seq:0,o&&r.db.once("destroyed",(function(){delete o[a]})),r}))}))}))}));return o&&(o[a]=c),c}Nn.prototype.add=function(e){return this.promise=this.promise.catch((function(){})).then((function(){return e()})),this.promise},Nn.prototype.finish=function(){return this.promise};var jn={},Fn=new Nn;function Dn(e){return-1===e.indexOf("/")?[e,e]:e.split("/")}function Vn(e,t){try{e.emit("error",t)}catch(e){q("error","The user's map/reduce function threw an uncaught error.\nYou can debug this error by doing:\nmyDatabase.on('error', function (err) { debugger; });\nPlease double-check your map/reduce function."),q("error",t)}}var Rn=function(e,t){return In(t)},zn=function(e,t){return t.length},Hn=function(e,t){return{sum:In(t),min:Math.min.apply(null,t),max:Math.max.apply(null,t),count:t.length,sumsqr:function(e){for(var t=0,n=0,i=e.length;n<i;n++){var s=e[n];t+=s*s}return t}(t)}};var Un=function(e,t,n,r){function a(e,t,n){try{t(n)}catch(t){Vn(e,t)}}function c(e,t,n,i,s){try{return{output:t(n,i,s)}}catch(t){return Vn(e,t),{error:t}}}function l(e,t){var n=ft(e.key,t.key);return 0!==n?n:ft(e.value,t.value)}function u(e,t,n){return n=n||0,"number"==typeof t?e.slice(n,t+n):n>0?e.slice(n):e}function d(e){var t=e.value;return t&&"object"==typeof t&&t._id||e.id}function h(e){return function(t){return e.include_docs&&e.attachments&&e.binary&&function(e){e.rows.forEach((function(e){var t=e.doc&&e.doc._attachments;t&&Object.keys(t).forEach((function(e){var n=t[e];t[e].data=_e(n.data,n.content_type)}))}))}(t),t}}function g(e,t,n,i){var s=t[e];void 0!==s&&(i&&(s=encodeURIComponent(JSON.stringify(s))),n.push(e+"="+s))}function p(e){if(void 0!==e){var t=Number(e);return isNaN(t)||t!==parseInt(e,10)?e:t}}function m(e,t){var n=e.descending?"endkey":"startkey",i=e.descending?"startkey":"endkey";if(void 0!==e[n]&&void 0!==e[i]&&ft(e[n],e[i])>0)throw new _n("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");if(t.reduce&&!1!==e.reduce){if(e.include_docs)throw new _n("{include_docs:true} is invalid for reduce");if(e.keys&&e.keys.length>1&&!e.group&&!e.group_level)throw new _n("Multi-key fetches for reduce views must use {group: true}")}["group_level","limit","skip"].forEach((function(t){var n=function(e){if(e){if("number"!=typeof e)return new _n('Invalid value for integer: "'+e+'"');if(e<0)return new _n('Invalid value for positive integer: "'+e+'"')}}(e[t]);if(n)throw n}))}function v(e){return function(t){if(404===t.status)return e;throw t}}function y(e,t,n){var s="_local/doc_"+e,r={_id:s,keys:[]},o=n.get(e),a=o[0];return(function(e){return 1===e.length&&/^1-/.test(e[0].rev)}(o[1])?Promise.resolve(r):t.db.get(s).catch(v(r))).then((function(e){return function(e){return e.keys.length?t.db.allDocs({keys:e.keys,include_docs:!0}):Promise.resolve({rows:[]})}(e).then((function(t){return function(e,t){for(var n=[],s=new i,r=0,o=t.rows.length;r<o;r++){var c=t.rows[r].doc;if(c&&(n.push(c),s.add(c._id),c._deleted=!a.has(c._id),!c._deleted)){var l=a.get(c._id);"value"in l&&(c.value=l.value)}}var u=An(a);return u.forEach((function(e){if(!s.has(e)){var t={_id:e},i=a.get(e);"value"in i&&(t.value=i.value),n.push(t)}})),e.keys=kn(u.concat(e.keys)),n.push(e),n}(e,t)}))}))}function b(e){var t="string"==typeof e?e:e.name,n=jn[t];return n||(n=jn[t]=new Nn),n}function w(e,n){return xn(b(e),(function(){return function(e,n){var i,r;var o=t(e.mapFun,(function(e,t){var n={id:r._id,key:gt(e)};null!=t&&(n.value=gt(t)),i.push(n)})),c=e.seq||0;function u(t,n){return function(){return function(e,t,n){return e.db.get("_local/lastSeq").catch(v({_id:"_local/lastSeq",seq:0})).then((function(i){var s=An(t);return Promise.all(s.map((function(n){return y(n,e,t)}))).then((function(t){var s=re(t);return i.seq=n,s.push(i),e.db.bulkDocs({docs:s})}))}))}(e,t,n)}}let d=0,h={view:e.name,indexed_docs:d};e.sourceDB.emit("indexing",h);var f=new Nn;function g(){return e.sourceDB.changes({return_docs:!0,conflicts:!0,include_docs:!0,style:"all_docs",since:c,limit:n.changes_batch_size}).then(p)}function p(t){var h=t.results;if(!h.length)return;var p=function(t){for(var n=new s,u=0,d=t.length;u<d;u++){var h=t[u];if("_"!==h.doc._id[0]){i=[],(r=h.doc)._deleted||a(e.sourceDB,o,r),i.sort(l);var f=m(i);n.set(h.doc._id,[f,h.changes])}c=h.seq}return n}(h);f.add(u(p,c)),d+=h.length;let v={view:e.name,last_seq:t.last_seq,results_count:h.length,indexed_docs:d};return e.sourceDB.emit("indexing",v),h.length<n.changes_batch_size?void 0:g()}function m(e){for(var t,n=new s,i=0,r=e.length;i<r;i++){var o=e[i],a=[o.key,o.id];i>0&&0===ft(o.key,t)&&a.push(i),n.set(mt(a),o),t=o.key}return n}return g().then((function(){return f.finish()})).then((function(){e.seq=c}))}(e,n)}))()}function _(e,t){return xn(b(e),(function(){return function(e,t){var i,r=e.reduceFun&&!1!==t.reduce,o=t.skip||0;void 0===t.keys||t.keys.length||(t.limit=0,delete t.keys);function a(t){return t.include_docs=!0,e.db.allDocs(t).then((function(e){return i=e.total_rows,e.rows.map((function(e){if("value"in e.doc&&"object"==typeof e.doc.value&&null!==e.doc.value){var t=Object.keys(e.doc.value).sort(),n=["id","key","value"];if(!(t<n||t>n))return e.doc.value}var i=function(e){for(var t=[],n=[],i=0;;){var s=e[i++];if("\0"!==s)switch(s){case"1":t.push(null);break;case"2":t.push("1"===e[i]),i++;break;case"3":var r=vt(e,i);t.push(r.num),i+=r.length;break;case"4":for(var o="";;){var a=e[i];if("\0"===a)break;o+=a,i++}o=o.replace(/\u0001\u0001/g,"\0").replace(/\u0001\u0002/g,"").replace(/\u0002\u0002/g,""),t.push(o);break;case"5":var c={element:[],index:t.length};t.push(c.element),n.push(c);break;case"6":var l={element:{},index:t.length};t.push(l.element),n.push(l);break;default:throw new Error("bad collationIndex or unexpectedly reached end of input: "+s)}else{if(1===t.length)return t.pop();yt(t,n)}}}(e.doc._id);return{key:i[0],id:i[1],value:"value"in e.doc?e.doc.value:null}}))}))}function l(a){var l;if(l=r?function(e,t,i){0===i.group_level&&delete i.group_level;var s=i.group||i.group_level,r=n(e.reduceFun),o=[],a=isNaN(i.group_level)?Number.POSITIVE_INFINITY:i.group_level;t.forEach((function(e){var t=o[o.length-1],n=s?e.key:null;if(s&&Array.isArray(n)&&(n=n.slice(0,a)),t&&0===ft(t.groupKey,n))return t.keys.push([e.key,e.id]),void t.values.push(e.value);o.push({keys:[[e.key,e.id]],values:[e.value],groupKey:n})})),t=[];for(var l=0,d=o.length;l<d;l++){var h=o[l],f=c(e.sourceDB,r,h.keys,h.values,!1);if(f.error&&f.error instanceof Sn)throw f.error;t.push({value:f.error?null:f.output,key:h.groupKey})}return{rows:u(t,i.limit,i.skip)}}(e,a,t):void 0===t.keys?{total_rows:i,offset:o,rows:a}:{total_rows:i,offset:o,rows:u(a,t.limit,t.skip)},t.update_seq&&(l.update_seq=e.seq),t.include_docs){var h=kn(a.map(d));return e.sourceDB.allDocs({keys:h,include_docs:!0,conflicts:t.conflicts,attachments:t.attachments,binary:t.binary}).then((function(e){var t=new s;return e.rows.forEach((function(e){t.set(e.id,e.doc)})),a.forEach((function(e){var n=d(e),i=t.get(n);i&&(e.doc=i)})),l}))}return l}if(void 0!==t.keys){var h=t.keys.map((function(e){var n={startkey:mt([e]),endkey:mt([e,{}])};return t.update_seq&&(n.update_seq=!0),a(n)}));return Promise.all(h).then(re).then(l)}var f,g,p={descending:t.descending};if(t.update_seq&&(p.update_seq=!0),"start_key"in t&&(f=t.start_key),"startkey"in t&&(f=t.startkey),"end_key"in t&&(g=t.end_key),"endkey"in t&&(g=t.endkey),void 0!==f&&(p.startkey=t.descending?mt([f,{}]):mt([f])),void 0!==g){var m=!1!==t.inclusive_end;t.descending&&(m=!m),p.endkey=mt(m?[g,{}]:[g])}if(void 0!==t.key){var v=mt([t.key]),y=mt([t.key,{}]);p.descending?(p.endkey=v,p.startkey=y):(p.startkey=v,p.endkey=y)}return r||("number"==typeof t.limit&&(p.limit=t.limit),p.skip=o),a(p).then(l)}(e,t)}))()}function E(t,n,i){if("function"==typeof t._query)return function(e,t,n){return new Promise((function(i,s){e._query(t,n,(function(e,t){if(e)return s(e);i(t)}))}))}(t,n,i);if(ae(t))return function(e,t,n){var i,s,r,o=[],a="GET";if(g("reduce",n,o),g("include_docs",n,o),g("attachments",n,o),g("limit",n,o),g("descending",n,o),g("group",n,o),g("group_level",n,o),g("skip",n,o),g("stale",n,o),g("conflicts",n,o),g("startkey",n,o,!0),g("start_key",n,o,!0),g("endkey",n,o,!0),g("end_key",n,o,!0),g("inclusive_end",n,o),g("key",n,o,!0),g("update_seq",n,o),o=""===(o=o.join("&"))?"":"?"+o,void 0!==n.keys){var c="keys="+encodeURIComponent(JSON.stringify(n.keys));c.length+o.length+1<=2e3?o+=("?"===o[0]?"&":"?")+c:(a="POST","string"==typeof t?i={keys:n.keys}:t.keys=n.keys)}if("string"==typeof t){var l=Dn(t);return e.fetch("_design/"+l[0]+"/_view/"+l[1]+o,{headers:new st({"Content-Type":"application/json"}),method:a,body:JSON.stringify(i)}).then((function(e){return s=e.ok,r=e.status,e.json()})).then((function(e){if(!s)throw e.status=r,ie(e);return e.rows.forEach((function(e){if(e.value&&e.value.error&&"builtin_reduce_error"===e.value.error)throw new Error(e.reason)})),e})).then(h(n))}return i=i||{},Object.keys(t).forEach((function(e){Array.isArray(t[e])?i[e]=t[e]:i[e]=t[e].toString()})),e.fetch("_temp_view"+o,{headers:new st({"Content-Type":"application/json"}),method:"POST",body:JSON.stringify(i)}).then((function(e){return s=e.ok,r=e.status,e.json()})).then((function(e){if(!s)throw e.status=r,ie(e);return e})).then(h(n))}(t,n,i);var s={changes_batch_size:t.__opts.view_update_changes_batch_size||50};if("string"!=typeof n)return m(i,n),Fn.add((function(){return qn(t,"temp_view/temp_view",n.map,n.reduce,!0,e).then((function(e){return t=w(e,s).then((function(){return _(e,i)})),n=function(){return e.db.destroy()},t.then((function(e){return n().then((function(){return e}))}),(function(e){return n().then((function(){throw e}))}));var t,n}))})),Fn.finish();var a=n,c=Dn(a),l=c[0],u=c[1];return t.get("_design/"+l).then((function(n){var c=n.views&&n.views[u];if(!c)throw new En("ddoc "+n._id+" has no view named "+u);return r(n,u),m(i,c),qn(t,a,c.map,c.reduce,!1,e).then((function(e){return"ok"===i.stale||"update_after"===i.stale?("update_after"===i.stale&&o()((function(){w(e,s)})),_(e,i)):w(e,s).then((function(){return _(e,i)}))}))}))}var S;return{query:function(e,t,n){var i=this;"function"==typeof t&&(n=t,t={}),t=t?function(e){return e.group_level=p(e.group_level),e.limit=p(e.limit),e.skip=p(e.skip),e}(t):{},"function"==typeof e&&(e={map:e});var s=Promise.resolve().then((function(){return E(i,e,t)}));return Ln(s,n),s},viewCleanup:(S=function(){var t=this;return"function"==typeof t._viewCleanup?function(e){return new Promise((function(t,n){e._viewCleanup((function(e,i){if(e)return n(e);t(i)}))}))}(t):ae(t)?function(e){return e.fetch("_view_cleanup",{headers:new st({"Content-Type":"application/json"}),method:"POST"}).then((function(e){return e.json()}))}(t):function(t){return t.get("_local/"+e).then((function(e){var n=new s;Object.keys(e.views).forEach((function(e){var t=Dn(e),s="_design/"+t[0],r=t[1],o=n.get(s);o||(o=new i,n.set(s,o)),o.add(r)}));var r={keys:An(n),include_docs:!0};return t.allDocs(r).then((function(i){var s={};i.rows.forEach((function(t){var i=t.key.substring(8);n.get(t.key).forEach((function(n){var r=i+"/"+n;e.views[r]||(r=n);var o=Object.keys(e.views[r]),a=t.doc&&t.doc.views&&t.doc.views[n];o.forEach((function(e){s[e]=s[e]||a}))}))}));var r=Object.keys(s).filter((function(e){return!s[e]})).map((function(e){return xn(b(e),(function(){return new t.constructor(e,t.__opts).destroy()}))()}));return Promise.all(r).then((function(){return{ok:!0}}))}))}),v({ok:!0}))}(t)},f()((function(e){var t=e.pop(),n=S.apply(this,e);return"function"==typeof t&&Ln(n,t),n})))}}("mrviews",(function(e,t){if("function"==typeof e&&2===e.length){var n=e;return function(e){return n(e,t)}}return Tn(e.toString(),t)}),(function(e){var t=e.toString(),n=function(e){if(/^_sum/.test(e))return Rn;if(/^_count/.test(e))return zn;if(/^_stats/.test(e))return Hn;if(/^_/.test(e))throw new Error(e+" is not a supported reduce function.")}(t);return n||Tn(t)}),(function(e,t){var n=e.views&&e.views[t];if("string"!=typeof n.map)throw new En("ddoc "+e._id+" has no string view named "+t+", instead found object of type: "+typeof n.map)}));var $n={query:function(e,t,n){return Un.query.call(this,e,t,n)},viewCleanup:function(e){return Un.viewCleanup.call(this,e)}};function Zn(e){return/^1-/.test(e)}function Gn(e,t){var n=Object.keys(t._attachments);return Promise.all(n.map((function(n){return e.getAttachment(t._id,n,{rev:t._rev})})))}function Wn(e,t,n,i){n=x(n);var s=[],r=!0;function o(t){return e.allDocs({keys:t,include_docs:!0,conflicts:!0}).then((function(e){if(i.cancelled)throw new Error("cancelled");e.rows.forEach((function(e){var t;e.deleted||!e.doc||!Zn(e.value.rev)||(t=e.doc,t._attachments&&Object.keys(t._attachments).length>0)||function(e){return e._conflicts&&e._conflicts.length>0}(e.doc)||(e.doc._conflicts&&delete e.doc._conflicts,s.push(e.doc),delete n[e.id])}))}))}return Promise.resolve().then((function(){var e=Object.keys(n).filter((function(e){var t=n[e].missing;return 1===t.length&&Zn(t[0])}));if(e.length>0)return o(e)})).then((function(){var o=function(e){var t=[];return Object.keys(e).forEach((function(n){e[n].missing.forEach((function(e){t.push({id:n,rev:e})}))})),{docs:t,revs:!0,latest:!0}}(n);if(o.docs.length)return e.bulkGet(o).then((function(n){if(i.cancelled)throw new Error("cancelled");return Promise.all(n.results.map((function(n){return Promise.all(n.docs.map((function(n){var i=n.ok;return n.error&&(r=!1),i&&i._attachments?function(e,t,n){var i=ae(t)&&!ae(e),s=Object.keys(n._attachments);return i?e.get(n._id).then((function(i){return Promise.all(s.map((function(s){return function(e,t,n){return!e._attachments||!e._attachments[n]||e._attachments[n].digest!==t._attachments[n].digest}(i,n,s)?t.getAttachment(n._id,s):e.getAttachment(i._id,s)})))})).catch((function(e){if(404!==e.status)throw e;return Gn(t,n)})):Gn(t,n)}(t,e,i).then((function(e){var t=Object.keys(i._attachments);return e.forEach((function(e,n){var s=i._attachments[t[n]];delete s.stub,delete s.length,s.data=e})),i})):i})))}))).then((function(e){s=s.concat(re(e).filter(Boolean))}))}))})).then((function(){return{ok:r,docs:s}}))}function Kn(e,t,n,i,s){return e.get(t).catch((function(n){if(404===n.status)return"http"!==e.adapter&&"https"!==e.adapter||F(404,"PouchDB is just checking if a remote checkpoint exists."),{session_id:i,_id:t,history:[],replicator:"pouchdb",version:1};throw n})).then((function(r){if(!s.cancelled&&r.last_seq!==n)return r.history=(r.history||[]).filter((function(e){return e.session_id!==i})),r.history.unshift({last_seq:n,session_id:i}),r.history=r.history.slice(0,5),r.version=1,r.replicator="pouchdb",r.session_id=i,r.last_seq=n,e.put(r).catch((function(r){if(409===r.status)return Kn(e,t,n,i,s);throw r}))}))}function Yn(e,t,n,i,s){this.src=e,this.target=t,this.id=n,this.returnValue=i,this.opts=s||{}}Yn.prototype.writeCheckpoint=function(e,t){var n=this;return this.updateTarget(e,t).then((function(){return n.updateSource(e,t)}))},Yn.prototype.updateTarget=function(e,t){return this.opts.writeTargetCheckpoint?Kn(this.target,this.id,e,t,this.returnValue):Promise.resolve(!0)},Yn.prototype.updateSource=function(e,t){if(this.opts.writeSourceCheckpoint){var n=this;return Kn(this.src,this.id,e,t,this.returnValue).catch((function(e){if(Qn(e))return n.opts.writeSourceCheckpoint=!1,!0;throw e}))}return Promise.resolve(!0)};var Xn={undefined:function(e,t){return 0===ft(e.last_seq,t.last_seq)?t.last_seq:0},1:function(e,t){return function(e,t){if(e.session_id===t.session_id)return{last_seq:e.last_seq,history:e.history};return function e(t,n){var i=t[0],s=t.slice(1),r=n[0],o=n.slice(1);if(!i||0===n.length)return{last_seq:0,history:[]};if(Jn(i.session_id,n))return{last_seq:i.last_seq,history:t};if(Jn(r.session_id,s))return{last_seq:r.last_seq,history:o};return e(s,o)}(e.history,t.history)}(t,e).last_seq}};function Jn(e,t){var n=t[0],i=t.slice(1);return!(!e||0===t.length)&&(e===n.session_id||Jn(e,i))}function Qn(e){return"number"==typeof e.status&&4===Math.floor(e.status/100)}Yn.prototype.getCheckpoint=function(){var e=this;return e.opts&&e.opts.writeSourceCheckpoint&&!e.opts.writeTargetCheckpoint?e.src.get(e.id).then((function(e){return e.last_seq||0})).catch((function(e){if(404!==e.status)throw e;return 0})):e.target.get(e.id).then((function(t){return e.opts&&e.opts.writeTargetCheckpoint&&!e.opts.writeSourceCheckpoint?t.last_seq||0:e.src.get(e.id).then((function(e){return t.version!==e.version?0:(n=t.version?t.version.toString():"undefined")in Xn?Xn[n](t,e):0;var n}),(function(n){if(404===n.status&&t.last_seq)return e.src.put({_id:e.id,last_seq:0}).then((function(){return 0}),(function(n){return Qn(n)?(e.opts.writeSourceCheckpoint=!1,t.last_seq):0}));throw n}))})).catch((function(e){if(404!==e.status)throw e;return 0}))};function ei(e,t,n){var i=n.doc_ids?n.doc_ids.sort(ft):"",s=n.filter?n.filter.toString():"",r="",o="",a="";return n.selector&&(a=JSON.stringify(n.selector)),n.filter&&n.query_params&&(r=JSON.stringify(function(e){return Object.keys(e).sort(ft).reduce((function(t,n){return t[n]=e[n],t}),{})}(n.query_params))),n.filter&&"_view"===n.filter&&(o=n.view.toString()),Promise.all([e.id(),t.id()]).then((function(e){var t=e[0]+e[1]+s+o+r+i+a;return new Promise((function(e){Ce(t,e)}))})).then((function(e){return"_local/"+(e=e.replace(/\//g,".").replace(/\+/g,"_"))}))}function ti(e,t,n,i,s){var r,a,c,l=[],u={seq:0,changes:[],docs:[]},d=!1,h=!1,f=!1,g=0,p=n.continuous||n.live||!1,m=n.batch_size||100,v=n.batches_limit||10,y=n.style||"all_docs",b=!1,w=n.doc_ids,_=n.selector,E=[],S=Oe();s=s||{ok:!0,start_time:(new Date).toISOString(),docs_read:0,docs_written:0,doc_write_failures:0,errors:[]};var L={};function k(){return c?Promise.resolve():ei(e,t,n).then((function(s){a=s;var r={};r=!1===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!1}:"source"===n.checkpoint?{writeSourceCheckpoint:!0,writeTargetCheckpoint:!1}:"target"===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!0}:{writeSourceCheckpoint:!0,writeTargetCheckpoint:!0},c=new Yn(e,t,a,i,r)}))}function A(){if(E=[],0!==r.docs.length){var e=r.docs,o={timeout:n.timeout};return t.bulkDocs({docs:e,new_edits:!1},o).then((function(t){if(i.cancelled)throw T(),new Error("cancelled");var n=Object.create(null);t.forEach((function(e){e.error&&(n[e.id]=e)}));var r=Object.keys(n).length;s.doc_write_failures+=r,s.docs_written+=e.length-r,e.forEach((function(e){var t=n[e._id];if(t){s.errors.push(t);var r=(t.name||"").toLowerCase();if("unauthorized"!==r&&"forbidden"!==r)throw t;i.emit("denied",x(t))}else E.push(e)}))}),(function(t){throw s.doc_write_failures+=e.length,t}))}}function C(){if(r.error)throw new Error("There was a problem getting docs.");s.last_seq=g=r.seq;var e=x(s);return E.length&&(e.docs=E,"number"==typeof r.pending&&(e.pending=r.pending,delete r.pending),i.emit("change",e)),d=!0,c.writeCheckpoint(r.seq,S).then((function(){if(i.emit("checkpoint",{checkpoint:r.seq}),d=!1,i.cancelled)throw T(),new Error("cancelled");r=void 0,F()})).catch((function(e){throw V(e),e}))}function I(){return Wn(e,t,r.diffs,i).then((function(e){r.error=!e.ok,e.docs.forEach((function(e){delete r.diffs[e._id],s.docs_read++,r.docs.push(e)}))}))}function P(){var e;i.cancelled||r||(0!==l.length?(r=l.shift(),i.emit("checkpoint",{start_next_batch:r.seq}),(e={},r.changes.forEach((function(t){i.emit("checkpoint",{revs_diff:t}),"_user/"!==t.id&&(e[t.id]=t.changes.map((function(e){return e.rev})))})),t.revsDiff(e).then((function(e){if(i.cancelled)throw T(),new Error("cancelled");r.diffs=e}))).then(I).then(A).then(C).then(P).catch((function(e){B("batch processing terminated with error",e)}))):O(!0))}function O(e){0!==u.changes.length?(e||h||u.changes.length>=m)&&(l.push(u),u={seq:0,changes:[],docs:[]},"pending"!==i.state&&"stopped"!==i.state||(i.state="active",i.emit("active")),P()):0!==l.length||r||((p&&L.live||h)&&(i.state="pending",i.emit("paused")),h&&T())}function B(e,t){f||(t.message||(t.message=e),s.ok=!1,s.status="aborting",l=[],u={seq:0,changes:[],docs:[]},T(t))}function T(r){if(!(f||i.cancelled&&(s.status="cancelled",d)))if(s.status=s.status||"complete",s.end_time=(new Date).toISOString(),s.last_seq=g,f=!0,r){(r=ne(r)).result=s;var o=(r.name||"").toLowerCase();"unauthorized"===o||"forbidden"===o?(i.emit("error",r),i.removeAllListeners()):function(e,t,n,i){if(!1===e.retry)return t.emit("error",n),void t.removeAllListeners();if("function"!=typeof e.back_off_function&&(e.back_off_function=j),t.emit("requestError",n),"active"===t.state||"pending"===t.state){t.emit("paused",n),t.state="stopped";var s=function(){e.current_back_off=0};t.once("paused",(function(){t.removeListener("active",s)})),t.once("active",s)}e.current_back_off=e.current_back_off||0,e.current_back_off=e.back_off_function(e.current_back_off),setTimeout(i,e.current_back_off)}(n,i,r,(function(){ti(e,t,n,i)}))}else i.emit("complete",s),i.removeAllListeners()}function N(e,t,s){if(i.cancelled)return T();"number"==typeof t&&(u.pending=t),se(n)(e)&&(u.seq=e.seq||s,u.changes.push(e),i.emit("checkpoint",{pending_batch:u.seq}),o()((function(){O(0===l.length&&L.live)})))}function M(e){if(b=!1,i.cancelled)return T();if(e.results.length>0)L.since=e.results[e.results.length-1].seq,F(),O(!0);else{var t=function(){p?(L.live=!0,F()):h=!0,O(!0)};r||0!==e.results.length?t():(d=!0,c.writeCheckpoint(e.last_seq,S).then((function(){d=!1,s.last_seq=g=e.last_seq,t()})).catch(V))}}function q(e){if(b=!1,i.cancelled)return T();B("changes rejected",e)}function F(){if(!b&&!h&&l.length<v){b=!0,i._changes&&(i.removeListener("cancel",i._abortChanges),i._changes.cancel()),i.once("cancel",s);var t=e.changes(L).on("change",N);t.then(r,r),t.then(M).catch(q),n.retry&&(i._changes=t,i._abortChanges=s)}function s(){t.cancel()}function r(){i.removeListener("cancel",s)}}function D(){k().then((function(){if(!i.cancelled)return c.getCheckpoint().then((function(e){L={since:g=e,limit:m,batch_size:m,style:y,doc_ids:w,selector:_,return_docs:!0},n.filter&&("string"!=typeof n.filter?L.include_docs=!0:L.filter=n.filter),"heartbeat"in n&&(L.heartbeat=n.heartbeat),"timeout"in n&&(L.timeout=n.timeout),n.query_params&&(L.query_params=n.query_params),n.view&&(L.view=n.view),F()}));T()})).catch((function(e){B("getCheckpoint rejected with ",e)}))}function V(e){d=!1,B("writeCheckpoint completed with error",e)}i.ready(e,t),i.cancelled?T():(i._addedListeners||(i.once("cancel",T),"function"==typeof n.complete&&(i.once("error",n.complete),i.once("complete",(function(e){n.complete(null,e)}))),i._addedListeners=!0),void 0===n.since?D():k().then((function(){return d=!0,c.writeCheckpoint(n.since,S)})).then((function(){d=!1,i.cancelled?T():(g=n.since,D())})).catch(V))}function ni(){v.a.call(this),this.cancelled=!1,this.state="pending";var e=this,t=new Promise((function(t,n){e.once("complete",t),e.once("error",n)}));e.then=function(e,n){return t.then(e,n)},e.catch=function(e){return t.catch(e)},e.catch((function(){}))}function ii(e,t){var n=t.PouchConstructor;return"string"==typeof e?new n(e,t):e}function si(e,t,n,i){if("function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),n.doc_ids&&!Array.isArray(n.doc_ids))throw ne(X,"`doc_ids` filter parameter is not a list.");n.complete=i,(n=x(n)).continuous=n.continuous||n.live,n.retry="retry"in n&&n.retry,n.PouchConstructor=n.PouchConstructor||this;var s=new ni(n);return ti(ii(e,n),ii(t,n),n,s),s}function ri(e,t,n,i){return"function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),(n=x(n)).PouchConstructor=n.PouchConstructor||this,new oi(e=ii(e,n),t=ii(t,n),n,i)}function oi(e,t,n,i){var s=this;this.canceled=!1;var r=n.push?D({},n,n.push):n,o=n.pull?D({},n,n.pull):n;function a(e){s.emit("change",{direction:"pull",change:e})}function c(e){s.emit("change",{direction:"push",change:e})}function l(e){s.emit("denied",{direction:"push",doc:e})}function u(e){s.emit("denied",{direction:"pull",doc:e})}function d(){s.pushPaused=!0,s.pullPaused&&s.emit("paused")}function h(){s.pullPaused=!0,s.pushPaused&&s.emit("paused")}function f(){s.pushPaused=!1,s.pullPaused&&s.emit("active",{direction:"push"})}function g(){s.pullPaused=!1,s.pushPaused&&s.emit("active",{direction:"pull"})}this.push=si(e,t,r),this.pull=si(t,e,o),this.pushPaused=!0,this.pullPaused=!0;var p={};function m(e){return function(t,n){("change"===t&&(n===a||n===c)||"denied"===t&&(n===u||n===l)||"paused"===t&&(n===h||n===d)||"active"===t&&(n===g||n===f))&&(t in p||(p[t]={}),p[t][e]=!0,2===Object.keys(p[t]).length&&s.removeAllListeners(t))}}function v(e,t,n){-1==e.listeners(t).indexOf(n)&&e.on(t,n)}n.live&&(this.push.on("complete",s.pull.cancel.bind(s.pull)),this.pull.on("complete",s.push.cancel.bind(s.push))),this.on("newListener",(function(e){"change"===e?(v(s.pull,"change",a),v(s.push,"change",c)):"denied"===e?(v(s.pull,"denied",u),v(s.push,"denied",l)):"active"===e?(v(s.pull,"active",g),v(s.push,"active",f)):"paused"===e&&(v(s.pull,"paused",h),v(s.push,"paused",d))})),this.on("removeListener",(function(e){"change"===e?(s.pull.removeListener("change",a),s.push.removeListener("change",c)):"denied"===e?(s.pull.removeListener("denied",u),s.push.removeListener("denied",l)):"active"===e?(s.pull.removeListener("active",g),s.push.removeListener("active",f)):"paused"===e&&(s.pull.removeListener("paused",h),s.push.removeListener("paused",d))})),this.pull.on("removeListener",m("pull")),this.push.on("removeListener",m("push"));var y=Promise.all([this.push,this.pull]).then((function(e){var t={push:e[0],pull:e[1]};return s.emit("complete",t),i&&i(null,t),s.removeAllListeners(),t}),(function(e){if(s.cancel(),i?i(e):s.emit("error",e),s.removeAllListeners(),i)throw e}));this.then=function(e,t){return y.then(e,t)},this.catch=function(e){return y.catch(e)}}p()(ni,v.a),ni.prototype.cancel=function(){this.cancelled=!0,this.state="cancelled",this.emit("cancel")},ni.prototype.ready=function(e,t){var n=this;function i(){n.cancel()}function s(){e.removeListener("destroyed",i),t.removeListener("destroyed",i)}n._readyCalled||(n._readyCalled=!0,e.once("destroyed",i),t.once("destroyed",i),n.once("complete",s),n.once("error",s))},p()(oi,v.a),oi.prototype.cancel=function(){this.canceled||(this.canceled=!0,this.push.cancel(),this.pull.cancel())},tt.plugin((function(e){e.adapter("idb",dn,!0)})).plugin((function(e){e.adapter("http",wn,!1),e.adapter("https",wn,!1)})).plugin($n).plugin((function(e){e.replicate=si,e.sync=ri,Object.defineProperty(e.prototype,"replicate",{get:function(){var e=this;return void 0===this.replicateMethods&&(this.replicateMethods={from:function(t,n,i){return e.constructor.replicate(t,e,n,i)},to:function(t,n,i){return e.constructor.replicate(e,t,n,i)}}),this.replicateMethods}}),e.prototype.sync=function(e,t,n){return this.constructor.sync(this,e,t,n)}})),t.default=tt}.call(this,n(35))},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uploadAreaHTML=void 0,t.uploadAreaHTML='<div id="document-upload-container">\n\n    <div id="initial_upload_container">\n      <div id="initial_upload_area">\n        <div id="initial_upload_message">Upload Files</div>\n      </div>\n    </div>\n    \n    <div id="uploading_container">\n      <div class="file_container" id="unpaired_container">\n\n        <div class="file-container-title">Unpaired Documents</div>\n\n        <div id="files_container">\n\n          <div id="mei_container">\n            <div class="file_heading">MEI</div>\n            <div class="file_list" id="mei_list"></div>\n          </div>\n\n          <div id="image_container">\n            <div class="file_heading">Images</div>\n            <div class="file_list" id="image_list"></div>\n          </div>\n\n        </div>\n\n        <div id="generate-pair-button-container">\n          <div class="action_button" id="make_pair">Make Pair</div>\n        </div>\n      </div>\n\n      <div class="file_container" id="paired_container">\n\n        <div class="file-container-title">Paired Folios</div>\n        \n        <div class="tile_list" id="paired_list"></div>\n\n        <div id="upload_button_container">\n          <div class="action_button" id="upload_button">\n            Upload\n            <div id="uploading_spinner">↻</div>\n          </div>\n        </div>\n\n      </div>\n\n      \x3c!--\n      <div class="file_container" id="manuscripts_container">\n        <h2 class="file_heading">Manuscripts</h2>\n        <div class="tile_list" id="manuscript_list"></div>\n      </div>\n      --\x3e\n\n    </div>\n  </div>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groupingNotRecognized=void 0,t.groupingNotRecognized=function(){window.confirm("Neon does not recognize this neume grouping. Would you like to create a compound neume?")||document.getElementById("undo").click()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitStaffHandler=void 0;const i=n(4),s=n(3),r=n(18),o=n(11);t.SplitStaffHandler=class{constructor(e,t){this.handler=(e=>{const t=this.staff.id,n=(0,o.getSVGRelCoords)(e.clientX,e.clientY),a={action:"split",param:{elementId:t,x:n.x}};this.neonView.edit(a,this.neonView.view.getCurrentPageURI()).then(async e=>{e&&(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action successful","success"));const n=new r.default(this.neonView,".staff");this.splitDisable(),(0,s.selectAll)([document.querySelector("#"+t)],this.neonView,n);const o=document.getElementById("moreEdit");o&&(o.innerHTML="",o.parentElement.classList.add("hidden"))})}).bind(this),this.keydownListener=(e=>{"Escape"===e.key?this.splitDisable():"Shift"===e.key&&document.body.removeEventListener("click",this.handler,{capture:!0})}).bind(this),this.clickawayHandler=(e=>{null===e.target.closest(".active-page")&&(this.splitDisable(),document.body.removeEventListener("click",this.handler,{capture:!0}))}).bind(this),this.resetHandler=(e=>{"Shift"===e.key&&document.body.addEventListener("click",this.handler,{capture:!0})}).bind(this),this.neonView=e,this.staff=t}startSplit(){this.splitDisable(),document.body.addEventListener("click",this.handler,{capture:!0}),document.body.addEventListener("keydown",this.keydownListener),document.body.addEventListener("keyup",this.resetHandler),document.body.addEventListener("click",this.clickawayHandler),i.queueNotification("Click Where to Split")}splitDisable(){document.body.removeEventListener("keydown",this.keydownListener),document.body.removeEventListener("keyup",this.resetHandler),document.body.removeEventListener("click",this.clickawayHandler),document.body.removeEventListener("click",this.handler,{capture:!0})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitNeumeHandler=void 0;const i=n(4);t.SplitNeumeHandler=class{constructor(e,t){this.handler=(e=>{const t={action:"splitNeume",param:{elementId:this.neume.id,ncId:e.target.parentElement.id}};this.neonView.edit(t,this.neonView.view.getCurrentPageURI()).then(async e=>{e?(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action successful","success")):(await this.neonView.updateForCurrentPage(),i.queueNotification("Split action failed","error")),this.splitDisable()})}).bind(this),this.keydownListener=(e=>{"Escape"===e.key?this.splitDisable():"Shift"===e.key&&document.body.removeEventListener("click",this.handler,{capture:!0})}).bind(this),this.clickawayHandler=(e=>{null===e.target.closest(".active-page")&&(this.splitDisable(),document.body.removeEventListener("click",this.handler,{capture:!0}))}).bind(this),this.resetHandler=(e=>{"Shift"===e.key&&document.body.addEventListener("click",this.handler,{capture:!0})}).bind(this),this.neonView=e,this.neume=t}startSplit(){this.splitDisable(),document.body.addEventListener("click",this.handler,{capture:!0}),document.body.addEventListener("keydown",this.keydownListener),document.body.addEventListener("keyup",this.resetHandler),document.body.addEventListener("click",this.clickawayHandler),i.queueNotification("Click The Beginning of The Second Neume")}splitDisable(){document.body.removeEventListener("keydown",this.keydownListener),document.body.removeEventListener("keyup",this.resetHandler),document.body.removeEventListener("click",this.clickawayHandler),document.body.removeEventListener("click",this.handler,{capture:!0})}}},function(e,t){var n,i,s=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(e){i=o}}();var c,l=[],u=!1,d=-1;function h(){u&&c&&(u=!1,c.length?l=c.concat(l):d=-1,l.length&&f())}function f(){if(!u){var e=a(h);u=!0;for(var t=l.length;t;){for(c=l,l=[];++d<t;)c&&c[d].run();d=-1,t=l.length}c=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function p(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||u||a(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=p,s.addListener=p,s.once=p,s.off=p,s.removeListener=p,s.removeAllListeners=p,s.emit=p,s.prependListener=p,s.prependOnceListener=p,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";(function(e){t.test=function(){return"function"==typeof e.queueMicrotask},t.install=function(t){return function(){e.queueMicrotask(t)}}}).call(this,n(12))},function(e,t,n){"use strict";(function(e){var n=e.MutationObserver||e.WebKitMutationObserver;t.test=function(){return n},t.install=function(t){var i=0,s=new n(t),r=e.document.createTextNode("");return s.observe(r,{characterData:!0}),function(){r.data=i=++i%2}}}).call(this,n(12))},function(e,t,n){"use strict";(function(e){t.test=function(){return!e.setImmediate&&void 0!==e.MessageChannel},t.install=function(t){var n=new e.MessageChannel;return n.port1.onmessage=t,function(){n.port2.postMessage(0)}}}).call(this,n(12))},function(e,t,n){"use strict";(function(e){t.test=function(){return"document"in e&&"onreadystatechange"in e.document.createElement("script")},t.install=function(t){return function(){var n=e.document.createElement("script");return n.onreadystatechange=function(){t(),n.onreadystatechange=null,n.parentNode.removeChild(n),n=null},e.document.documentElement.appendChild(n),t}}}).call(this,n(12))},function(e,t,n){"use strict";t.test=function(){return!0},t.install=function(e){return function(){setTimeout(e,0)}}},function(e,t,n){"use strict";var i=n(68),s=n(70);function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){s.isString(e)&&(e=b(e));return e instanceof r?e.format():r.prototype.format.call(e)},t.Url=r;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),d=["%","/","?",";","#"].concat(u),h=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,g=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,p={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=n(71);function b(e,t,n){if(e&&s.isObject(e)&&e instanceof r)return e;var i=new r;return i.parse(e,t,n),i}r.prototype.parse=function(e,t,n){if(!s.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),a=-1!==r&&r<e.indexOf("#")?"?":"#",l=e.split(a);l[0]=l[0].replace(/\\/g,"/");var b=e=l.join(a);if(b=b.trim(),!n&&1===e.split("#").length){var w=c.exec(b);if(w)return this.path=b,this.href=b,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var _=o.exec(b);if(_){var E=(_=_[0]).toLowerCase();this.protocol=E,b=b.substr(_.length)}if(n||_||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===b.substr(0,2);!S||_&&m[_]||(b=b.substr(2),this.slashes=!0)}if(!m[_]&&(S||_&&!v[_])){for(var L,x,k=-1,A=0;A<h.length;A++){-1!==(C=b.indexOf(h[A]))&&(-1===k||C<k)&&(k=C)}-1!==(x=-1===k?b.lastIndexOf("@"):b.lastIndexOf("@",k))&&(L=b.slice(0,x),b=b.slice(x+1),this.auth=decodeURIComponent(L)),k=-1;for(A=0;A<d.length;A++){var C;-1!==(C=b.indexOf(d[A]))&&(-1===k||C<k)&&(k=C)}-1===k&&(k=b.length),this.host=b.slice(0,k),b=b.slice(k),this.parseHost(),this.hostname=this.hostname||"";var I="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!I)for(var P=this.hostname.split(/\./),O=(A=0,P.length);A<O;A++){var B=P[A];if(B&&!B.match(f)){for(var T="",N=0,M=B.length;N<M;N++)B.charCodeAt(N)>127?T+="x":T+=B[N];if(!T.match(f)){var q=P.slice(0,A),j=P.slice(A+1),F=B.match(g);F&&(q.push(F[1]),j.unshift(F[2])),j.length&&(b="/"+j.join(".")+b),this.hostname=q.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),I||(this.hostname=i.toASCII(this.hostname));var D=this.port?":"+this.port:"",V=this.hostname||"";this.host=V+D,this.href+=this.host,I&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!p[E])for(A=0,O=u.length;A<O;A++){var R=u[A];if(-1!==b.indexOf(R)){var z=encodeURIComponent(R);z===R&&(z=escape(R)),b=b.split(R).join(z)}}var H=b.indexOf("#");-1!==H&&(this.hash=b.substr(H),b=b.slice(0,H));var U=b.indexOf("?");if(-1!==U?(this.search=b.substr(U),this.query=b.substr(U+1),t&&(this.query=y.parse(this.query)),b=b.slice(0,U)):t&&(this.search="",this.query={}),b&&(this.pathname=b),v[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){D=this.pathname||"";var $=this.search||"";this.path=D+$}return this.href=this.format(),this},r.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",i=this.hash||"",r=!1,o="";this.host?r=e+this.host:this.hostname&&(r=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(o=y.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==r?(r="//"+(r||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):r||(r=""),i&&"#"!==i.charAt(0)&&(i="#"+i),a&&"?"!==a.charAt(0)&&(a="?"+a),t+r+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+i},r.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},r.prototype.resolveObject=function(e){if(s.isString(e)){var t=new r;t.parse(e,!1,!0),e=t}for(var n=new r,i=Object.keys(this),o=0;o<i.length;o++){var a=i[o];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),l=0;l<c.length;l++){var u=c[l];"protocol"!==u&&(n[u]=e[u])}return v[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!v[e.protocol]){for(var d=Object.keys(e),h=0;h<d.length;h++){var f=d[h];n[f]=e[f]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var g=(e.pathname||"").split("/");g.length&&!(e.host=g.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==g[0]&&g.unshift(""),g.length<2&&g.unshift(""),n.pathname=g.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var p=n.pathname||"",y=n.search||"";n.path=p+y}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),_=w||b||n.host&&e.pathname,E=_,S=n.pathname&&n.pathname.split("/")||[],L=(g=e.pathname&&e.pathname.split("/")||[],n.protocol&&!v[n.protocol]);if(L&&(n.hostname="",n.port=null,n.host&&(""===S[0]?S[0]=n.host:S.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===g[0]?g[0]=e.host:g.unshift(e.host)),e.host=null),_=_&&(""===g[0]||""===S[0])),w)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,S=g;else if(g.length)S||(S=[]),S.pop(),S=S.concat(g),n.search=e.search,n.query=e.query;else if(!s.isNullOrUndefined(e.search)){if(L)n.hostname=n.host=S.shift(),(I=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=I.shift(),n.host=n.hostname=I.shift());return n.search=e.search,n.query=e.query,s.isNull(n.pathname)&&s.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!S.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var x=S.slice(-1)[0],k=(n.host||e.host||S.length>1)&&("."===x||".."===x)||""===x,A=0,C=S.length;C>=0;C--)"."===(x=S[C])?S.splice(C,1):".."===x?(S.splice(C,1),A++):A&&(S.splice(C,1),A--);if(!_&&!E)for(;A--;A)S.unshift("..");!_||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),k&&"/"!==S.join("/").substr(-1)&&S.push("");var I,P=""===S[0]||S[0]&&"/"===S[0].charAt(0);L&&(n.hostname=n.host=P?"":S.length?S.shift():"",(I=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=I.shift(),n.host=n.hostname=I.shift()));return(_=_||n.host&&S.length)&&!P&&S.unshift(""),S.length?n.pathname=S.join("/"):(n.pathname=null,n.path=null),s.isNull(n.pathname)&&s.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},r.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){"use strict";var i=n(42),s=n(19);function r(e,t){this.id=e,this.ref=t}e.exports.SchemaScanResult=r,e.exports.scan=function(e,t){function n(e,t){if(t&&"object"==typeof t)if(t.$ref){var r=i.resolve(e,t.$ref);l[r]=l[r]?l[r]+1:0}else{var u=t.$id||t.id,d=u?i.resolve(e,u):e;if(d){if(d.indexOf("#")<0&&(d+="#"),c[d]){if(!s.deepCompareStrict(c[d],t))throw new Error("Schema <"+d+"> already exists with different definition");return c[d]}c[d]=t,"#"==d[d.length-1]&&(c[d.substring(0,d.length-1)]=t)}o(d+"/items",Array.isArray(t.items)?t.items:[t.items]),o(d+"/extends",Array.isArray(t.extends)?t.extends:[t.extends]),n(d+"/additionalItems",t.additionalItems),a(d+"/properties",t.properties),n(d+"/additionalProperties",t.additionalProperties),a(d+"/definitions",t.definitions),a(d+"/patternProperties",t.patternProperties),a(d+"/dependencies",t.dependencies),o(d+"/disallow",t.disallow),o(d+"/allOf",t.allOf),o(d+"/anyOf",t.anyOf),o(d+"/oneOf",t.oneOf),n(d+"/not",t.not)}}function o(e,t){if(Array.isArray(t))for(var i=0;i<t.length;i++)n(e+"/"+i,t[i])}function a(e,t){if(t&&"object"==typeof t)for(var i in t)n(e+"/"+i,t[i])}var c={},l={};return n(e,t),new r(c,l)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkOutOfBoundsGlyphs=t.convertSbToStaff=t.getSyllableText=t.convertStaffToSb=t.zip=void 0;const i=n(23),s=n(61),r=n(4);function o(e,t){for(const n of e.attributes)t.setAttribute(n.name,n.value)}function a(e){const t=e.getElementsByTagName("syl")[0].childNodes[0];let n;return n=t?t.nodeValue:"◊",n}t.zip=function(e,t){const n=[];for(let i=0;i<(e.length>t.length?t.length:e.length);i++)n.push([e[i],t[i]]);return n},t.convertStaffToSb=function(e){const t=new DOMParser,n=new XMLSerializer,i=t.parseFromString(e,"text/xml"),r=i.documentElement;for(const e of r.getElementsByTagName("section")){const t=i.createElementNS("http://www.music-encoding.org/ns/mei","staff"),n=i.createElementNS("http://www.music-encoding.org/ns/mei","layer");t.setAttribute("n","1"),n.setAttribute("n","1"),t.appendChild(n);const s=Array.from(e.getElementsByTagName("staff"));for(const e of s){const t=e.getElementsByTagName("layer")[0],s=i.createElementNS("http://www.music-encoding.org/ns/mei","sb");s.setAttribute("n",e.getAttribute("n")),s.setAttribute("facs",e.getAttribute("facs")),s.setAttribute("xml:id",e.getAttribute("xml:id"));let r=void 0;for(null!==n.lastElementChild&&"custos"===n.lastElementChild.tagName&&(r=n.removeChild(n.lastElementChild)),void 0!==r&&n.appendChild(r),n.appendChild(s);null!==t.firstElementChild;)n.appendChild(t.firstElementChild);e.remove()}e.appendChild(t)}return s.xml(n.serializeToString(i))},t.getSyllableText=a,t.convertSbToStaff=function(e){const t=(new DOMParser).parseFromString(e,"text/xml"),n=t.documentElement,c=Array.from(n.getElementsByTagName("neume"));for(const e of c)if(0===e.getElementsByTagName("nc").length){const t=e.getAttribute("xml:id");r.queueNotification("This file contains a neume without neume component!<br/>ID: "+t,"warning")}const l=Array.from(n.getElementsByTagName("syllable"));for(const e of l)if(0===e.getElementsByTagName("neume").length){const t=e.getAttribute("xml:id");r.queueNotification("This file contains a syllable without neume!<br/>ID: "+t,"warning")}for(const e of n.getElementsByTagName("section")){const n=Array.from(e.getElementsByTagName("staff"));for(const s of n){const n=s.getElementsByTagName("layer")[0],r=Array.from(n.getElementsByTagName("sb"));for(const e of r)if("layer"!==e.parentElement.tagName){const n=e.parentElement;let s=!1,r=!1;const o=Array.from(n.children),a=o.indexOf(e);for(const e of n.getElementsByTagName("neume")){const t=o.indexOf(e);t<a?s=!0:t>a&&(r=!0)}if(!s&&r)n.insertAdjacentElement("beforebegin",e);else if(s&&!r)n.insertAdjacentElement("afterend",e);else if(s&&r){const s=t.createElementNS("http://www.music-encoding.org/ns/mei","syllable");s.setAttribute("xml:id","m-"+(0,i.uuidv4)()),s.setAttribute("follows","#"+n.getAttribute("xml:id")),n.setAttribute("precedes","#"+s.getAttribute("xml:id"));const r=o.indexOf(e);for(const e of o){o.indexOf(e)>r&&s.appendChild(e)}n.insertAdjacentElement("afterend",e),e.insertAdjacentElement("afterend",s);for(const e of n.getElementsByTagName("custos"))n.insertAdjacentElement("afterend",e);for(const e of s.getElementsByTagName("clef"))s.insertAdjacentElement("beforebegin",e)}else console.warn("NONE BEHIND NONE AHEAD"),console.debug(n)}const a=Array.from(n.getElementsByTagName("sb"));for(let r=0;r<a.length;r++){const c=a[r],l=a.length>r+1?a[r+1]:void 0,u=t.createElementNS("http://www.music-encoding.org/ns/mei","staff");o(c,u);const d=t.createElementNS("http://www.music-encoding.org/ns/mei","layer");d.setAttribute("n","1"),d.setAttribute("xml:id","m-"+(0,i.uuidv4)()),u.appendChild(d);const h=Array.from(n.children),f=h.slice(h.indexOf(c)+1,h.indexOf(l));for(const e of f)d.appendChild(e);e.insertBefore(u,s)}s.remove()}}const u=Array.from(n.getElementsByTagName("syllable"));for(const e of n.querySelectorAll("syllable")){for(const t of e.querySelectorAll("clef"))e.insertAdjacentElement("beforebegin",t);for(const t of e.querySelectorAll("custos"))e.insertAdjacentElement("afterend",t);const t=u.indexOf(e);if(e.hasAttribute("precedes")&&e.hasAttribute("follows")){const t=e.getAttribute("xml:id");r.queueNotification("This file contains a syllable that has both @precedes and @follows!<br/>ID: "+t,"error")}else if(e.hasAttribute("precedes")){const n=e.getAttribute("precedes").replace("#","");let i;const s=u.find((e,t)=>e.getAttribute("xml:id")===n&&(i=t,!0));if(!s){const t=a(e),n=e.getAttribute("xml:id");r.queueNotification(`Missing the 2nd part of the toggle-linked syllable (${t})<br/>ID: ${n}`,"error");continue}if(!s.hasAttribute("follows")){const t=a(e),n=e.getAttribute("xml:id");r.queueNotification(`The 2nd part of the toggle-linked syllable (${t}) does not link to any syllable<br/>ID: ${n}`,"error");continue}if(s.getAttribute("follows")!="#"+e.getAttribute("xml:id")){const t=a(e),n=e.getAttribute("xml:id");r.queueNotification(`The 2nd part of the toggle-linked syllable (${t}) links to the wrong syllable<br/>ID: ${n}`,"error");continue}if(i!==t+1){const n=[a(e),...u.slice(t+1,i).map(e=>a(e))].join(" - "),s=e.getAttribute("xml:id");r.queueNotification(`Unexpected syllable(s) inside toggle-linked syllable: ${n}<br/>ID: ${s}`,"error")}}else if(e.hasAttribute("follows")){const t=e.getAttribute("follows").replace("#",""),n=u.find(e=>e.getAttribute("xml:id")===t);if(!n){const t=a(e),n=e.getAttribute("xml:id");r.queueNotification(`Missing the 1st part of the toggle-linked syllable (${t})<br/>ID: ${n}`,"error");continue}if(!n.hasAttribute("precedes")){const t=a(n),i=e.getAttribute("xml:id");r.queueNotification(`The 1st part of the toggle-linked syllable (${t}) does not link to any syllable<br/>ID: ${i}`,"error");continue}if(n.getAttribute("precedes")!="#"+e.getAttribute("xml:id")){const t=a(n),i=e.getAttribute("xml:id");r.queueNotification(`The 1st part of the toggle-linked syllable (${t}) links to the wrong syllable<br/>ID: ${i}`,"error")}}}const d=new XMLSerializer;return s.xml(d.serializeToString(t))},t.checkOutOfBoundsGlyphs=function(e){const t=(new DOMParser).parseFromString(e,"text/xml").documentElement,n=Array.from(t.querySelectorAll("zone")),i=t.querySelector("surface"),s=Number(i.getAttribute("lrx")),o=Number(i.getAttribute("lry"));n.some(e=>["ulx","uly","lrx","lry"].some(t=>function(e,t){const n=Number(e.getAttribute(t));return n<0||n>("lrx"==t||"ulx"==t?s:o)}(e,t)))&&r.queueNotification("This folio contains glyph(s) placed out-of-bounds!","warning")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.blankPage=t.sendForValidation=t.init=void 0;const i=n(17),s=fetch("/Neon/Neon-gh/assets/mei-all.rng");let r,o,a;function c(e){const t=e.data;if(null===t){a.textContent="VALID",a.style.color="#4bc14b";for(const e of a.children)e.remove()}else{let e="";t.forEach(t=>{e+=t+"\n"}),a.textContent="",a.style.color="red";const n=document.createElement("div");n.textContent="INVALID",n.style.cursor="pointer",a.appendChild(n),n.addEventListener("click",l.bind(this,e))}}function l(e){this.modal.setModalWindowView(i.ModalWindowView.VALIDATION_STATUS,e),this.modal.openModalWindow()}t.init=async function(e){const t=document.getElementById("file-status");if(null!==t){const n=document.createElement("div");n.textContent="MEI Status:",n.id="validation_status_title";const i=document.createElement("span");i.id="validation_status",i.textContent="unknown",t.appendChild(n),t.appendChild(i),a=document.getElementById("validation_status"),r=new Worker("/Neon/Neon-gh/workers/Worker.js"),r.onmessage=c.bind(e)}},t.sendForValidation=async function(e){if(void 0!==a){if(void 0===o){const e=await s;o=await e.text()}a.textContent="checking...",a.style.color="gray",r.postMessage({mei:e,schema:o})}},t.blankPage=function(){for(const e of a.children)e.remove();a.textContent="No MEI",a.style.color="color:gray"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listenUnsavedChanges=t.setSavedStatus=void 0;let i=!0;t.setSavedStatus=function(e=!1){i=e,function(){const e=document.querySelector("#file-saved"),t=i?"/Neon/Neon-gh/assets/img/saved-icon.svg":"/Neon/Neon-gh/assets/img/unsaved-icon.svg";e.setAttribute("src",t)}()},t.listenUnsavedChanges=function(){window.onbeforeunload=e=>{if(!i)return e.preventDefault(),"You have unsaved changes!"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initSelectionButtons=t.initInsertEditControls=t.bindInsertTabs=void 0;const i=n(7),s=n(15),r=n(3),o=n(6);function a(e,t){document.getElementById(e).classList.add("is-active"),document.getElementById(e).classList.contains("insertel")&&t.insertActive(e)}function c(e){document.querySelectorAll(e).forEach(e=>{e.classList.remove("is-active"),e.classList.remove("unfocused")})}t.bindInsertTabs=function(e){const t=Array.from(document.getElementsByClassName("insertTab")).map(e=>e.id);document.body.addEventListener("keydown",e=>{if(e.code.match(/^Digit\d$/)&&e.shiftKey)try{const t=Number(e.code[e.code.length-1])-1,n=document.getElementsByClassName("insertel");n[t].click()}catch(e){console.debug(e)}}),t.forEach(t=>{document.getElementById(t).addEventListener("click",()=>{c(".insertTab"),a(t,e),document.getElementById("insert_data").innerHTML=i.insertTabHtml[t],function(e){const t=Array.from(document.getElementsByClassName("insertel"));t.map(e=>e.id).forEach(t=>{document.getElementById(t).addEventListener("click",()=>{c(".insertel"),a(t,e)})})}(e),c(".insertel");a(document.getElementsByClassName("insertel")[0].id,e)})})},t.initInsertEditControls=function(){const e=document.getElementById("insert_controls"),t=document.getElementById("insertMenu"),n=t.querySelector(".panel-heading-title"),i=document.getElementById("insertContents"),s=t.querySelector("svg > use"),r=document.getElementById("edit_controls"),o=document.getElementById("editMenu"),a=o.querySelector(".panel-heading-title"),c=document.getElementById("editContents"),l=o.querySelector("svg > use");e.addEventListener("click",()=>{a.classList.remove("focused"),n.classList.add("focused"),document.querySelector(".insertel.is-active").click(),r.querySelector(".side-panel-btn.sel-by.is-active").classList.add("unfocused"),e.querySelector(".side-panel-btn.insertel.is-active").classList.remove("unfocused")}),r.addEventListener("click",()=>{n.classList.remove("focused"),a.classList.add("focused"),e.querySelector(".side-panel-btn.insertel.is-active").classList.add("unfocused"),r.querySelector(".side-panel-btn.sel-by.is-active").classList.remove("unfocused")}),t.addEventListener("click",e=>{e.stopPropagation(),i.classList.contains("closed")?(i.classList.remove("closed"),i.style.padding="0.5em 0.75em",setTimeout(()=>{i.style.overflow="visible"},200),s.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(i.classList.add("closed"),i.style.overflow="hidden",setTimeout(()=>{i.style.padding="0px"},200),s.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))}),o.addEventListener("click",e=>{e.stopPropagation(),c.classList.contains("closed")?(c.classList.remove("closed"),c.style.padding="0.5em 0.75em",setTimeout(()=>{c.style.overflow="visible"},200),l.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-down")):(c.classList.add("closed"),c.style.overflow="hidden",setTimeout(()=>{c.style.padding="0px"},200),l.setAttribute("xlink:href","/Neon/Neon-gh/assets/img/icons.svg#dropdown-side"))})},t.initSelectionButtons=function(){const e=document.getElementById("selBySyllable"),t=document.getElementById("selByNeume"),n=document.getElementById("selByNc"),i=document.getElementById("selByStaff"),a=document.getElementById("selByLayerElement");e.addEventListener("click",(function(){if(!e.classList.contains("is-active")){(0,o.setSettings)({selectionMode:"selBySyllable"}),(0,r.unselect)(),document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden"),e.classList.add("is-active"),t.classList.remove("is-active"),n.classList.remove("is-active"),i.classList.remove("is-active"),a.classList.remove("is-active");try{document.getElementById("selByBBox").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,s.setGroupingHighlight)("syllable")}catch(e){}}})),t.addEventListener("click",(function(){if(!t.classList.contains("is-active")){(0,o.setSettings)({selectionMode:"selByNeume"}),(0,r.unselect)(),document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden"),t.classList.add("is-active"),n.classList.remove("is-active"),e.classList.remove("is-active"),i.classList.remove("is-active"),a.classList.remove("is-active");try{document.getElementById("selByBBox").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,s.setGroupingHighlight)("neume")}catch(e){}}})),n.addEventListener("click",(function(){if(!n.classList.contains("is-active")){(0,o.setSettings)({selectionMode:"selByNc"}),(0,r.unselect)(),document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden"),n.classList.add("is-active"),t.classList.remove("is-active"),e.classList.remove("is-active"),i.classList.remove("is-active"),a.classList.remove("is-active");try{document.getElementById("selByBBox").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,s.setGroupingHighlight)("neume")}catch(e){}}})),i.addEventListener("click",(function(){if(!i.classList.contains("is-active")){(0,o.setSettings)({selectionMode:"selByStaff"}),(0,r.unselect)(),document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden"),i.classList.add("is-active"),t.classList.remove("is-active"),n.classList.remove("is-active"),e.classList.remove("is-active"),a.classList.remove("is-active");try{document.getElementById("selByBBox").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,s.setGroupingHighlight)("staff")}catch(e){}}})),a.addEventListener("click",(function(){if(!a.classList.contains("is-active")){(0,o.setSettings)({selectionMode:"selByLayerElement"}),(0,r.unselect)(),document.getElementById("moreEdit").innerHTML="",document.getElementById("extraEdit").innerHTML="",document.getElementById("moreEdit").parentElement.classList.add("hidden"),document.getElementById("extraEdit").parentElement.classList.add("hidden"),a.classList.add("is-active"),t.classList.remove("is-active"),n.classList.remove("is-active"),i.classList.remove("is-active"),e.classList.remove("is-active");try{document.getElementById("selByBBox").classList.remove("is-active")}catch(e){}try{"highlight-selection"===document.querySelector(".highlight-selected").id&&(0,s.setGroupingHighlight)("layerElement")}catch(e){}}})),document.body.addEventListener("keydown",s=>{"1"===s.key&&e.click(),"2"===s.key&&t.click(),"3"===s.key&&n.click(),"4"===s.key&&i.click(),"5"===s.key&&a.click()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(8),s=n(11),r=n(4);t.default=class{constructor(e,t){this.firstClick=!0,this.insertDisabled=function(){this.type="",this.removeInsertClickHandlers(),document.body.removeEventListener("keydown",this.keydownListener),document.body.removeEventListener("keyup",this.resetInsertHandler),document.body.removeEventListener("click",this.clickawayHandler),this.firstClick=!0;try{document.getElementById("returnToEditMode").remove()}catch(e){}const e=document.getElementById("insert_controls"),t=document.getElementById("insertMenu").querySelector(".panel-heading-title"),n=document.getElementById("edit_controls"),i=document.getElementById("editMenu").querySelector(".panel-heading-title");t.classList.remove("focused"),i.classList.add("focused"),e.querySelector(".side-panel-btn.insertel.is-active").classList.add("unfocused"),n.querySelector(".side-panel-btn.sel-by.is-active").classList.remove("unfocused")}.bind(this),this.clickawayHandler=function(e){const t=e.target;null===t.closest(".active-page")&&null===t.closest("#insert_controls")&&null===t.closest("#svg_group")&&(this.insertDisabled(),document.body.removeEventListener("keydown",this.staffHandler),document.body.removeEventListener("keydown",this.handler))}.bind(this),this.resetInsertHandler=function(e){"Shift"===e.key&&document.querySelector(this.selector).addEventListener("click","staff"===this.type?this.staffHandler:this.handler)}.bind(this),this.keydownListener=function(e){"Escape"===e.key?(this.insertDisabled(),document.body.removeEventListener("keydown",this.staffHandler),document.body.removeEventListener("keydown",this.handler)):"Shift"===e.key&&this.removeInsertClickHandlers()}.bind(this),this.handler=function(e){e.stopPropagation();const t=(0,s.getSVGRelCoords)(e.clientX,e.clientY);if((0,s.isOutOfSVGBounds)(t.x,t.y))return(0,r.queueNotification)("[FAIL] Glyph was placed out of bounds! Insertion failed.","error");const n={action:"insert",param:{elementType:this.type,staffId:"auto",ulx:t.x,uly:t.y}};null!==this.attributes&&(n.param.attributes=this.attributes,"F"===this.attributes.shape&&(n.param.ulx-=50)),this.neonView.edit(n,this.neonView.view.getCurrentPageURI()).then(()=>this.neonView.updateForCurrentPage()).then(()=>{document.querySelector(this.selector).addEventListener("click",this.handler)})}.bind(this),this.staffHandler=function(e){const t=(0,s.getSVGRelCoords)(e.clientX,e.clientY);if((0,s.isOutOfSVGBounds)(t.x,t.y))return(0,r.queueNotification)("Staff cannot be placed out of bounds!","error");const n=document.querySelector(".active-page > .definition-scale");if(this.firstClick)this.coord=t,i.select(n).append("circle").attr("cx",t.x).attr("cy",t.y).attr("r",10).attr("id","staff-circle").attr("fill","green"),this.firstClick=!1;else{let e,n;t.x<this.coord.x||t.y<this.coord.y?(e=t,n=this.coord):(e=this.coord,n=t),document.getElementById("staff-circle").remove();const i={action:"insert",param:{elementType:"staff",staffId:"auto",ulx:e.x,uly:e.y,lrx:n.x,lry:n.y}};this.neonView.edit(i,this.neonView.view.getCurrentPageURI()).then(()=>{this.neonView.updateForCurrentPage(),this.firstClick=!0})}}.bind(this),this.removeInsertClickHandlers=function(){try{document.querySelector(this.selector).removeEventListener("click",this.staffHandler),document.querySelector(this.selector).removeEventListener("click",this.handler)}catch(e){}}.bind(this),this.neonView=e,this.selector=t}insertActive(e){const t=this.isInsertMode();switch(e){case"punctum":this.type="nc",this.attributes=null;break;case"diamond":this.type="nc",this.attributes={tilt:"se"};break;case"virga":this.type="nc",this.attributes={tilt:"s"};break;case"liquescentA":this.type="nc",this.attributes={curve:"a"};break;case"liquescentC":this.type="nc",this.attributes={curve:"c"};break;case"virgaReversed":this.type="nc",this.attributes={tilt:"n"};break;case"pes":case"clivis":case"scandicus":case"climacus":case"torculus":case"porrectus":case"pressus":const t=this.neonView.info.getContourByValue(e.charAt(0).toUpperCase()+e.slice(1));this.type="grouping",this.attributes={contour:t};break;case"cClef":case"fClef":this.type="clef",this.attributes={shape:e.charAt(0).toUpperCase()};break;case"custos":this.type="custos",this.attributes=null;break;case"divLineMaxima":this.type="divLine",this.attributes={form:"maxima"};break;case"staff":this.type="staff",this.attributes=null;break;case"flat":this.type="accid",this.attributes={accid:"f"};break;case"natural":this.type="accid",this.attributes={accid:"n"};break;default:return this.type="",this.attributes=null,void console.error("Invalid button for insertion: "+e+".")}this.removeInsertClickHandlers();try{"staff"===this.type?document.querySelector(this.selector).addEventListener("click",this.staffHandler):document.querySelector(this.selector).addEventListener("click",this.handler)}catch(e){}if(document.body.addEventListener("keydown",this.keydownListener),document.body.addEventListener("keyup",this.resetInsertHandler),!t){const e=document.createElement("button");e.id="returnToEditMode",e.classList.add("side-panel-btn"),e.innerHTML="Return to Edit Mode",document.getElementById("redo").parentNode.appendChild(e),e.addEventListener("click",this.insertDisabled)}document.getElementById("editContents").addEventListener("click",this.clickawayHandler)}isInsertMode(){return""!==this.type}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.undoRedoPanel=t.navbarFinalize=t.navbarDropdownMEIActionsMenu=t.navbarDropdownFileMenu=void 0,t.navbarDropdownFileMenu=document.createElement("div"),t.navbarDropdownFileMenu.classList.add("navbar-item","has-dropdown","is-hoverable");const i=document.createElement("div");i.classList.add("navbar-btn"),i.innerHTML="<div>File</div>";const s=document.createElement("div");s.classList.add("navbar-dropdown"),s.id="navbar-dropdown-options";[["save","Save"],["export","Save and Export to File"],["getmei","Download MEI"]].forEach(e=>{const t=document.createElement("div");t.id=e[0],t.classList.add("navbar-dropdown-item"),t.textContent=e[1],s.appendChild(t)}),t.navbarDropdownFileMenu.appendChild(i),t.navbarDropdownFileMenu.appendChild(s),t.navbarDropdownMEIActionsMenu=document.createElement("div"),t.navbarDropdownMEIActionsMenu.classList.add("navbar-item","has-dropdown","is-hoverable");const r=document.createElement("div");r.classList.add("navbar-btn"),r.innerHTML="<div>MEI Actions</div>";const o=document.createElement("div");o.classList.add("navbar-dropdown"),o.id="navbar-dropdown-options";[["remove-empty-syls","Remove Empty Syllables"],["remove-empty-neumes","Remove Empty Neumes"],["revert","Revert"]].forEach(e=>{const t=document.createElement("div");t.id=e[0],t.classList.add("navbar-dropdown-item"),t.textContent=e[1],o.appendChild(t)}),t.navbarDropdownMEIActionsMenu.appendChild(r),t.navbarDropdownMEIActionsMenu.appendChild(o),t.navbarFinalize='<a id="finalize" class="navbar-item"> Finalize MEI </a>',t.undoRedoPanel='<button class="side-panel-btn" id="undo">Undo</button>\n  <button class="side-panel-btn" id="redo">Redo</button>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initUndoRedoPanel=t.initNavbar=void 0;const i=n(4),s=n(44);t.initNavbar=function(e){const t=document.querySelectorAll(".navbar-item.has-dropdown.is-hoverable");Array.from(t).forEach(e=>{e.addEventListener("mouseover",()=>{})}),document.getElementById("save").addEventListener("click",()=>{e.save().then(()=>{i.queueNotification("Saved","success")})}),document.body.addEventListener("keydown",t=>{"s"===t.key&&e.save().then(()=>{i.queueNotification("Saved","success")})}),document.getElementById("export").addEventListener("click",()=>{e.export().then(t=>{const n=document.createElement("a");n.href=t,n.download=e.name+".jsonld",document.body.appendChild(n),n.click(),n.remove(),i.queueNotification("Saved","success")})}),document.getElementById("getmei").addEventListener("click",()=>{const t=e.view.getCurrentPageURI();e.getPageMEI(t).then(t=>{const n="data:application/mei+xml;base64,"+window.btoa((0,s.convertStaffToSb)(t));document.getElementById("getmei").setAttribute("href",n),document.getElementById("getmei").setAttribute("download",e.view.getPageName()+".mei")})}),document.getElementById("remove-empty-syls").addEventListener("click",(function(){const t=e.view.getCurrentPageURI();e.getPageMEI(t).then(n=>{const s=(new DOMParser).parseFromString(n,"text/xml").documentElement,r=Array.from(s.getElementsByTagName("syllable"));let o=!1;const a=[];for(const e of r)if(0===e.getElementsByTagName("neume").length){const t={action:"remove",param:{elementId:e.getAttribute("xml:id")}};a.push(t),o=!0}if(o){const n={action:"chain",param:a};e.edit(n,t).then(t=>{t?(e.updateForCurrentPage(),i.queueNotification("Removed empty Syllables","success")):i.queueNotification("Failed to remove empty Syllables","error")})}else i.queueNotification("No empty syllables found","warning")})})),document.getElementById("remove-empty-neumes").addEventListener("click",(function(){const t=e.view.getCurrentPageURI();e.getPageMEI(t).then(n=>{const s=(new DOMParser).parseFromString(n,"text/xml").documentElement,r=Array.from(s.getElementsByTagName("neume"));let o=!1;const a=[];for(const e of r)if(0===e.getElementsByTagName("nc").length){const t={action:"remove",param:{elementId:e.getAttribute("xml:id")}};a.push(t),o=!0}if(o){const n={action:"chain",param:a};e.edit(n,t).then(t=>{t?(e.updateForCurrentPage(),i.queueNotification("Removed empty Neumes","success")):i.queueNotification("Failed to remove empty Neumes","error")})}else i.queueNotification("No empty Neumes found","warning")})})),document.getElementById("remove-out-of-bounds-glyphs").addEventListener("click",(function(){const t=e.view.getCurrentPageURI();e.getPageMEI(t).then(n=>{const s=(new DOMParser).parseFromString(n,"text/xml").documentElement,r=s.querySelector("surface"),o=Number(r.getAttribute("lrx")),a=Number(r.getAttribute("lry"));const c=Array.from(s.querySelectorAll("zone")).filter(e=>["ulx","uly","lrx","lry"].some(t=>function(e,t){const n=Number(e.getAttribute(t));return n<0||n>("lrx"==t||"ulx"==t?o:a)}(e,t))),l=new Map(c.map(e=>[e.getAttribute("xml:id"),e])),u=Array.from(s.querySelectorAll("nc, divLine, clef, accid")).filter(e=>{if(e.hasAttribute("facs")){const t=e.getAttribute("facs").slice(1);return l.has(t)}return!1});if(0===u.length)return i.queueNotification("There are no out-of-bound glyphs to remove.","warning");const d={action:"chain",param:u.map(e=>({action:"remove",param:{elementId:e.getAttribute("xml:id")}}))};e.edit(d,t).then(t=>{t?(e.updateForCurrentPage(),i.queueNotification("Successfully removed out-of-bounds syllables.","success")):i.queueNotification("Failed to remove out-of-bound syllables.","error")})})})),document.getElementById("revert").addEventListener("click",(function(){window.confirm("Reverting will cause all changes to be lost. Press OK to continue.")&&e.deleteDb().then(()=>{window.location.reload()})}))},t.initUndoRedoPanel=function(e){function t(){e.undo().then(t=>{t?e.updateForCurrentPage():(i.queueNotification("There is nothing left to undo."),console.warn("Failed to undo action"))})}function n(){e.redo().then(t=>{t?e.updateForCurrentPage():(i.queueNotification("There is nothing left to redo."),console.warn("Failed to redo action"))})}document.getElementById("undo").addEventListener("click",t),document.body.addEventListener("keydown",e=>{"z"===e.key&&(e.ctrlKey||e.metaKey)&&t()}),document.getElementById("redo").addEventListener("click",n),document.body.addEventListener("keydown",e=>{("Z"===e.key||"z"===e.key&&e.shiftKey)&&(e.ctrlKey||e.metaKey)&&n()})}},,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(59),s=n(76),r=n(77),o=n(79),a=n(81),c=n(82),l=n(83),u=n(84),d=n(28),h=n(29),f=p("manifest"),g=p("storage");if(f){const e=`./samples/manifests/${f}.jsonld`;window.fetch(e).then(e=>{if(e.ok)return e.text();throw new Error(e.statusText)}).then(async e=>{let t;try{t=JSON.parse(e)}catch(t){return console.error(t),void console.debug(e)}let n;n=(await new Promise((e,n)=>{window.fetch(t.image).then(t=>{e(t.headers.get("Content-Type"))}).catch(e=>{n(e)})})).match(/image\/*/)?{manifest:t,Display:s.default,Info:l.default,TextView:u.default,TextEdit:d.default,View:o.default,NeumeEdit:c.default}:{manifest:t,Display:s.default,Info:l.default,TextView:u.default,TextEdit:d.default,View:r.default,NeumeEdit:a.default};new i.default(n).start()})}else{new h.default("Neon-User-Storage").getAttachment(g,"manifest").then(e=>new window.Response(e).json()).then(async e=>{let t;t=(await new Promise((t,n)=>{window.fetch(e.image).then(e=>{t(e.headers.get("Content-Type"))}).catch(e=>{n(e)})})).match(/image\/*/)?{manifest:e,Display:s.default,Info:l.default,TextView:u.default,TextEdit:d.default,View:o.default,NeumeEdit:c.default}:{manifest:e,Display:s.default,Info:l.default,TextView:u.default,TextEdit:d.default,View:r.default,NeumeEdit:a.default};new i.default(t).start()})}function p(e){let t;return window.location.search.substr(1).split("&").forEach(n=>{const i=n.split("=");i[0]===e&&(t=decodeURIComponent(i[1]))}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(60),s=n(45),r=n(63),o=n(75),a=n(17),c=n(27),l=n(46),u=n(6);t.default=class{constructor(e){(0,r.parseManifest)(e.manifest)||console.error("Unable to parse the manifest"),this.params=e,this.manifest=e.manifest}setupEdit(e){void 0!==e.NeumeEdit&&(this.NeumeEdit=new e.NeumeEdit(this)),void 0!==e.TextView&&(this.textView=new e.TextView(this),void 0!==e.TextEdit&&(this.TextEdit=new e.TextEdit(this)))}start(){(0,o.default)(this).then(()=>(this.localSettings=new u.default(this.manifest["@id"]),this.view=new this.params.View(this,this.params.Display,this.manifest.image),this.name=this.manifest.title,this.core=new i.default(this.manifest),this.info=new this.params.Info(this),this.modal=new a.ModalWindow(this),s.init(this),(0,c.initErrorLog)(),(0,l.listenUnsavedChanges)(),this.setupEdit(this.params),this.core.initDb())).then(()=>this.updateForCurrentPage(!0)).then(()=>{this.view.onSVGLoad()})}updateForCurrentPage(e=!1){const t=this.view.getCurrentPage();return this.view.changePage(t,e)}redo(){return(0,l.setSavedStatus)(!1),this.core.redo(this.view.getCurrentPageURI())}undo(){return(0,l.setSavedStatus)(!1),this.core.undo(this.view.getCurrentPageURI())}getUserMode(){return void 0!==this.NeumeEdit?this.NeumeEdit.getUserMode():void 0!==this.TextEdit?"edit":"viewer"}edit(e,t){return this.core.edit(e,t)}getElementAttr(e,t){return this.core.getElementAttr(e,t)}export(){return new Promise((e,t)=>{this.core.updateDatabase().then(()=>{this.manifest.mei_annotations=this.core.getAnnotations(),this.manifest.timestamp=(new Date).toISOString();const t=new window.Blob([JSON.stringify(this.manifest,null,2)],{type:"application/ld+json"}),n=new FileReader;n.addEventListener("load",()=>{e(n.result)}),n.readAsDataURL(t)}).catch(e=>{t(e)})})}save(){return(0,l.setSavedStatus)(!0),this.core.updateDatabase()}deleteDb(){return this.core.deleteDb()}getPageURI(e){return void 0===e&&(e=this.view.getCurrentPageURI()),new Promise(t=>{this.core.getMEI(e).then(e=>{t("data:application/mei+xml;charset=utf-8,"+encodeURIComponent(e))})})}getPageMEI(e){return this.core.getMEI(e)}getPageSVG(e){return this.core.getSVG(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(44),s=n(45),r=n(62),o=n(23),a=n(29),c=n(46);t.default=class{constructor(e){this.verovioWrapper=new r.default,this.undoStacks=new Map,this.redoStacks=new Map,this.neonCache=new Map,this.parser=new DOMParser,this.db=new a.default("Neon"),this.blankPages=[],this.manifest=e,this.annotations=e.mei_annotations,this.lastPageLoaded=""}getAnnotations(){return this.annotations}async initDb(e=!1){return await new Promise((t,n)=>{this.db.get(this.manifest["@id"]).catch(e=>{if("not_found"===e.name){const e={_id:this.manifest["@id"],timestamp:this.manifest.timestamp,image:this.manifest.image,title:this.manifest.title,annotations:[]};return this.annotations.forEach(t=>{e.annotations.push(t.id)}),e}return console.error(e),n(e)}).then(async i=>{const s=/(.+[-+\u2212]\d\d)(\d\d)$/;if(new Date(i.timestamp).getTime()>(s.test(this.manifest.timestamp)?new Date(this.manifest.timestamp.replace(s,"$1:$2")).getTime():new Date(this.manifest.timestamp).getTime())&&!e){this.annotations=[];const e=i.annotations.map(e=>new Promise(t=>{this.db.get(e).then(e=>{this.annotations.push({id:e._id,type:"Annotation",body:e.body,target:e.target}),t("")}).catch(e=>{console.error(e),t("")})}));return await Promise.all(e),t(!1)}for(const e of this.annotations)await this.db.get(e.id).catch(t=>"not_found"===t.name?{_id:e.id}:(console.error(t),n(t))).then(t=>(t.body=e.body,t.target=e.target,this.db.put(t))).catch(e=>{n(e),console.error(e)});return this.db.put(i)}).then(()=>t(!0)).catch(e=>{n(e),console.error(e)})})}loadPage(e){return new Promise((t,n)=>{if(this.lastPageLoaded===e&&this.neonCache.has(e))t(this.neonCache.get(e));else if(this.neonCache.has(e))this.loadData(e,this.neonCache.get(e).mei).then(()=>{t(this.neonCache.get(e))});else if(this.blankPages.includes(e)){s.blankPage();const t=new Error("No MEI file for page "+e);t.name="missing_mei",n(t)}else{const r=this.annotations.find(t=>t.target===e);r?window.fetch(r.body).then(e=>{if(e.ok)return e.text();throw new Error(e.statusText)}).then(n=>{n.match(/<sb .+>/)&&(n=(0,i.convertSbToStaff)(n)),(0,i.checkOutOfBoundsGlyphs)(n),this.loadData(e,n).then(()=>{t(this.neonCache.get(e))})}).catch(e=>{n(e)}):(s.blankPage(),this.blankPages.push(e))}})}loadData(e,t,n=!1){return s.sendForValidation(t),this.lastPageLoaded=e,new Promise(i=>{const s={id:(0,o.uuidv4)(),action:"renderData",mei:t};this.verovioWrapper.addEventListener("message",function r(o){if(o.data.id===s.id){const s=this.parser.parseFromString(o.data.svg,"image/svg+xml").documentElement;this.neonCache.set(e,{svg:s,mei:t,dirty:n}),o.target.removeEventListener("message",r),i()}}.bind(this)),this.verovioWrapper.postMessage(s)})}getSVG(e){return new Promise((t,n)=>{this.loadPage(e).then(e=>{t(e.svg)}).catch(e=>{n(e)})})}getMEI(e){return new Promise((t,n)=>{this.loadPage(e).then(e=>{t(e.mei)}).catch(e=>{n(e)})})}getElementAttr(e,t){return new Promise(n=>{this.loadPage(t).then(()=>{const t={id:(0,o.uuidv4)(),action:"getElementAttr",elementId:e};this.verovioWrapper.addEventListener("message",(function e(i){i.data.id===t.id&&(i.target.removeEventListener("message",e),n(i.data.attributes))})),this.verovioWrapper.postMessage(t)})})}edit(e,t){let n;return n=this.lastPageLoaded===t?Promise.resolve(this.neonCache.get(t)):this.loadPage(t),new Promise(i=>{n.then(n=>{n.svg=null;const s=n.mei,r={id:(0,o.uuidv4)(),action:"edit",editorAction:e};this.verovioWrapper.addEventListener("message",function e(n){if(n.data.id===r.id){if(n.data.result){this.undoStacks.has(t)||this.undoStacks.set(t,[]);const e=this.undoStacks.get(t);e.push(s)>10&&this.undoStacks.set(t,e.slice(1)),this.redoStacks.set(t,[])}n.target.removeEventListener("message",e),this.updateCache(t,!0).then(()=>{i(n.data.result)}),(0,c.setSavedStatus)(!1)}}.bind(this)),this.verovioWrapper.postMessage(r)})})}updateCache(e,t){return new Promise(n=>{let i,r;const a=new Promise(e=>{const t={id:(0,o.uuidv4)(),action:"getMEI"};this.verovioWrapper.addEventListener("message",(function n(r){r.data.id===t.id&&(i=r.data.mei,r.target.removeEventListener("message",n),s.sendForValidation(i),e(""))})),this.verovioWrapper.postMessage(t)}),c=new Promise(e=>{const t={id:(0,o.uuidv4)(),action:"renderToSVG"};this.verovioWrapper.addEventListener("message",(function n(i){i.data.id===t.id&&(r=i.data.svg,i.target.removeEventListener("message",n),e(""))})),this.verovioWrapper.postMessage(t)});a.then(()=>c).then(()=>{const s=this.parser.parseFromString(r,"image/svg+xml").documentElement;this.neonCache.set(e,{mei:i,svg:s,dirty:t}),n()})})}info(e){let t;return t=this.lastPageLoaded===e?Promise.resolve():this.loadPage(e),new Promise(e=>{t.then(()=>{const t={id:(0,o.uuidv4)(),action:"editInfo"};this.verovioWrapper.addEventListener("message",(function n(i){i.data.id===t.id&&(i.target.removeEventListener("message",n),e(i.data.info))})),this.verovioWrapper.postMessage(t)})})}undo(e){return new Promise(async t=>{if(!this.undoStacks.has(e))return t(!1);const n=this.undoStacks.get(e).pop();if(!n)return t(!1);const i=await this.getMEI(e);return this.redoStacks.get(e).push(i),await this.loadData(e,n,!0),t(!0)})}redo(e){return new Promise(async t=>{if(!this.redoStacks.has(e))return t(!1);const n=this.redoStacks.get(e).pop();if(!n)return t(!1);const i=await this.getMEI(e);return this.undoStacks.get(e).push(i),await this.loadData(e,n,!0),t(!0)})}async updateDatabase(){let e=!1;for(const t of this.neonCache){const n=t[0],i=t[1];if(i.dirty){e=!0;const t=this.annotations.findIndex(e=>e.target===n);let s;this.annotations[t].body.match(/^data:/)?s="data:application/mei+xml;base64,"+window.btoa(i.mei):await window.fetch(this.annotations[t].body,{method:"PUT",headers:{"Content-Type":"application/mei+xml"},body:i.mei}).then(e=>{s=e.ok?this.annotations[t].body:"data:application/mei+xml;base64,"+window.btoa(i.mei)}).catch(e=>{console.error(e),console.warn("Falling back to data URI"),s="data:application/mei+xml;base64,"+window.btoa(i.mei)}),this.annotations[t].body=s,await this.db.get(this.annotations[t].id).then(e=>(e.body=s,this.db.put(e))).then(()=>{i.dirty=!1}).catch(e=>{console.error(e)})}}e&&await this.db.get(this.manifest["@id"]).then(e=>(e.timestamp=(new Date).toISOString(),this.db.put(e))).catch(e=>{console.error(e)})}async deleteDb(){const e=await this.db.get(this.manifest["@id"]).then(e=>e.annotations);e.push(this.manifest["@id"]);const t=e.map(e=>new Promise(t=>{this.db.get(e).then(e=>this.db.remove(e)).then(()=>t())}));return Promise.all(t)}}},function(e,t){
/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function n(e){var t="    ";if(isNaN(parseInt(e)))t=e;else switch(e){case 1:t=" ";break;case 2:t="  ";break;case 3:t="   ";break;case 4:t="    ";break;case 5:t="     ";break;case 6:t="      ";break;case 7:t="       ";break;case 8:t="        ";break;case 9:t="         ";break;case 10:t="          ";break;case 11:t="           ";break;case 12:t="            "}for(var n=["\n"],i=0;i<100;i++)n.push(n[i]+t);return n}function i(){this.step="    ",this.shift=n(this.step)}function s(e,t){return t-(e.replace(/\(/g,"").length-e.replace(/\)/g,"").length)}function r(e,t){return e.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+t+t+"AND ").replace(/ BETWEEN /gi,"~::~"+t+"BETWEEN ").replace(/ CASE /gi,"~::~"+t+"CASE ").replace(/ ELSE /gi,"~::~"+t+"ELSE ").replace(/ END /gi,"~::~"+t+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+t+"ON ").replace(/ OR /gi,"~::~"+t+t+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+t+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+t).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+t+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}i.prototype.xml=function(e,t){var i=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),s=i.length,r=!1,o=0,a="",c=0,l=t?n(t):this.shift;for(c=0;c<s;c++)i[c].search(/<!/)>-1?(a+=l[o]+i[c],r=!0,(i[c].search(/-->/)>-1||i[c].search(/\]>/)>-1||i[c].search(/!DOCTYPE/)>-1)&&(r=!1)):i[c].search(/-->/)>-1||i[c].search(/\]>/)>-1?(a+=i[c],r=!1):/^<\w/.exec(i[c-1])&&/^<\/\w/.exec(i[c])&&/^<[\w:\-\.\,]+/.exec(i[c-1])==/^<\/[\w:\-\.\,]+/.exec(i[c])[0].replace("/","")?(a+=i[c],r||o--):i[c].search(/<\w/)>-1&&-1==i[c].search(/<\//)&&-1==i[c].search(/\/>/)?a=a+=r?i[c]:l[o++]+i[c]:i[c].search(/<\w/)>-1&&i[c].search(/<\//)>-1?a=a+=r?i[c]:l[o]+i[c]:i[c].search(/<\//)>-1?a=a+=r?i[c]:l[--o]+i[c]:i[c].search(/\/>/)>-1?a=a+=r?i[c]:l[o]+i[c]:i[c].search(/<\?/)>-1||i[c].search(/xmlns\:/)>-1||i[c].search(/xmlns\=/)>-1?a+=l[o]+i[c]:a+=i[c];return"\n"==a[0]?a.slice(1):a},i.prototype.json=function(e,t){t=t||this.step;return"undefined"==typeof JSON?e:"string"==typeof e?JSON.stringify(JSON.parse(e),null,t):"object"==typeof e?JSON.stringify(e,null,t):e},i.prototype.css=function(e,t){var i=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),s=i.length,r=0,o="",a=0,c=t?n(t):this.shift;for(a=0;a<s;a++)/\{/.exec(i[a])?o+=c[r++]+i[a]:/\}/.exec(i[a])?o+=c[--r]+i[a]:(/\*\\/.exec(i[a]),o+=c[r]+i[a]);return o.replace(/^\n{1,}/,"")},i.prototype.sql=function(e,t){var i=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),o=i.length,a=[],c=0,l=this.step,u=0,d="",h=0,f=t?n(t):this.shift;for(h=0;h<o;h++)a=h%2?a.concat(i[h]):a.concat(r(i[h],l));for(o=a.length,h=0;h<o;h++){u=s(a[h],u),/\s{0,}\s{0,}SELECT\s{0,}/.exec(a[h])&&(a[h]=a[h].replace(/\,/g,",\n"+l+l)),/\s{0,}\s{0,}SET\s{0,}/.exec(a[h])&&(a[h]=a[h].replace(/\,/g,",\n"+l+l)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(a[h])?d+=f[++c]+a[h]:/\'/.exec(a[h])?(u<1&&c&&c--,d+=a[h]):(d+=f[c]+a[h],u<1&&c&&c--)}return d=d.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},i.prototype.xmlmin=function(e,t){return(t?e:e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns")).replace(/>\s{0,}</g,"><")},i.prototype.jsonmin=function(e){return"undefined"==typeof JSON?e:JSON.stringify(JSON.parse(e),null,0)},i.prototype.cssmin=function(e,t){return(t?e:e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"")).replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},i.prototype.sqlmin=function(e){return e.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")},e.exports=new i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.verovioWorker=new Worker("/Neon/Neon-gh/workers/VerovioWorker.js")}addEventListener(e,t){return this.verovioWorker.addEventListener(e,t)}postMessage(e){return this.verovioWorker.postMessage(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseManifest=void 0;const i=n(64),s=n(65),r=n(66);t.parseManifest=function(e){const t=(0,r.validate)(e,i),n=t.instance;if(t.errors.length>0)return console.error(t.errors),!1;const o=n["@context"];return"https://ddmal.music.mcgill.ca/Neon/contexts/1/manifest.jsonld"===o||(o[0]===s[0]&&o[1].schema===s[1].schema&&o[1].title===s[1].title&&o[1].timestamp===s[1].timestamp&&o[1].image["@id"]===s[1].image["@id"]&&o[1].image["@type"]===s[1].image["@type"]&&o[1].mei_annotations["@id"]===s[1].mei_annotations["@id"]&&o[1].mei_annotations["@type"]===s[1].mei_annotations["@type"]&&o[1].mei_annotations["@container"]===s[1].mei_annotations["@container"]||(console.error("Context mismatch"),console.error(o),console.error(s),!1))}},function(e){e.exports=JSON.parse('{"type":"object","required":["@context","title","timestamp","image","mei_annotations"],"properties":{"@context":{"type":["array","string"]},"title":{"type":"string"},"timestamp":{"type":"string"},"image":{"type":"string"},"mei_annotations":{"type":"array","items":{"type":"object","required":["id","type","body","target"],"properties":{"id":{"type":"string"},"type":{"type":"string"},"body":{"type":"string"},"target":{"type":"string"}}}}}}')},function(e){e.exports=JSON.parse('["http://www.w3.org/ns/anno.jsonld",{"schema":"http://schema.org/","title":"schema:name","timestamp":"schema:dateModified","image":{"@id":"schema:image","@type":"@id"},"mei_annotations":{"@id":"Annotation","@type":"@id","@container":"@list"}}]')},function(e,t,n){"use strict";var i=e.exports.Validator=n(67);e.exports.ValidatorResult=n(19).ValidatorResult,e.exports.ValidatorResultError=n(19).ValidatorResultError,e.exports.ValidationError=n(19).ValidationError,e.exports.SchemaError=n(19).SchemaError,e.exports.SchemaScanResult=n(43).SchemaScanResult,e.exports.scan=n(43).scan,e.exports.validate=function(e,t,n){return(new i).validate(e,t,n)}},function(e,t,n){"use strict";var i=n(42),s=n(74),r=n(19),o=n(43).scan,a=r.ValidatorResult,c=r.ValidatorResultError,l=r.SchemaError,u=r.SchemaContext,d=function e(){this.customFormats=Object.create(e.prototype.customFormats),this.schemas={},this.unresolvedRefs=[],this.types=Object.create(f),this.attributes=Object.create(s.validators)};function h(e){var t="string"==typeof e?e:e.$ref;return"string"==typeof t&&t}d.prototype.customFormats={},d.prototype.schemas=null,d.prototype.types=null,d.prototype.attributes=null,d.prototype.unresolvedRefs=null,d.prototype.addSchema=function(e,t){var n=this;if(!e)return null;var i=o(t||"/",e),s=t||e.$id||e.id;for(var r in i.id)this.schemas[r]=i.id[r];for(var r in i.ref)this.unresolvedRefs.push(r);return this.unresolvedRefs=this.unresolvedRefs.filter((function(e){return void 0===n.schemas[e]})),this.schemas[s]},d.prototype.addSubSchemaArray=function(e,t){if(Array.isArray(t))for(var n=0;n<t.length;n++)this.addSubSchema(e,t[n])},d.prototype.addSubSchemaObject=function(e,t){if(t&&"object"==typeof t)for(var n in t)this.addSubSchema(e,t[n])},d.prototype.setSchemas=function(e){this.schemas=e},d.prototype.getSchema=function(e){return this.schemas[e]},d.prototype.validate=function(e,t,n,s){if("boolean"!=typeof t&&"object"!=typeof t||null===t)throw new l("Expected `schema` to be an object or boolean");n||(n={});var r,d=t.$id||t.id,h=i.resolve(n.base||"/",d||"");if(!s){(s=new u(t,n,[],h,Object.create(this.schemas))).schemas[h]||(s.schemas[h]=t);var f=o(h,t);for(var g in f.id){var p=f.id[g];s.schemas[g]=p}}if(n.required&&void 0===e)return(r=new a(e,t,n,s)).addError("is required, but is undefined"),r;if(!(r=this.validateSchema(e,t,n,s)))throw new Error("Result undefined");if(n.throwAll&&r.errors.length)throw new c(r);return r},d.prototype.validateSchema=function(e,t,n,i){var o=new a(e,t,n,i);if("boolean"==typeof t)!0===t?t={}:!1===t&&(t={type:[]});else if(!t)throw new Error("schema is undefined");if(t.extends)if(Array.isArray(t.extends)){var c={schema:t,ctx:i};t.extends.forEach(this.schemaTraverser.bind(this,c)),t=c.schema,c.schema=null,c.ctx=null,c=null}else t=r.deepMerge(t,this.superResolve(t.extends,i));var d=h(t);if(d){var f=this.resolve(t,d,i),g=new u(f.subschema,n,i.path,f.switchSchema,i.schemas);return this.validateSchema(e,f.subschema,n,g)}var p=n&&n.skipAttributes||[];for(var m in t)if(!s.ignoreProperties[m]&&p.indexOf(m)<0){var v=null,y=this.attributes[m];if(y)v=y.call(this,e,t,n,i);else if(!1===n.allowUnknownAttributes)throw new l("Unsupported attribute: "+m,t);v&&o.importErrors(v)}if("function"==typeof n.rewrite){var b=n.rewrite.call(this,e,t,n,i);o.instance=b}return o},d.prototype.schemaTraverser=function(e,t){e.schema=r.deepMerge(e.schema,this.superResolve(t,e.ctx))},d.prototype.superResolve=function(e,t){var n=h(e);return n?this.resolve(e,n,t).subschema:e},d.prototype.resolve=function(e,t,n){if(t=n.resolve(t),n.schemas[t])return{subschema:n.schemas[t],switchSchema:t};var s=i.parse(t),o=s&&s.hash,a=o&&o.length&&t.substr(0,t.length-o.length);if(!a||!n.schemas[a])throw new l("no such schema <"+t+">",e);var c=r.objectGetPath(n.schemas[a],o.substr(1));if(void 0===c)throw new l("no such schema "+o+" located in <"+a+">",e);return{subschema:c,switchSchema:t}},d.prototype.testType=function(e,t,n,i,s){if(void 0!==s){if(null===s)throw new l('Unexpected null in "type" keyword');if("function"==typeof this.types[s])return this.types[s].call(this,e);if(s&&"object"==typeof s){var r=this.validateSchema(e,s,n,i);return void 0===r||!(r&&r.errors.length)}return!0}};var f=d.prototype.types={};f.string=function(e){return"string"==typeof e},f.number=function(e){return"number"==typeof e&&isFinite(e)},f.integer=function(e){return"number"==typeof e&&e%1==0},f.boolean=function(e){return"boolean"==typeof e},f.array=function(e){return Array.isArray(e)},f.null=function(e){return null===e},f.date=function(e){return e instanceof Date},f.any=function(e){return!0},f.object=function(e){return e&&"object"==typeof e&&!Array.isArray(e)&&!(e instanceof Date)},e.exports=d},function(e,t,n){(function(e,i){var s;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(r){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof i&&i;o.global!==o&&o.window!==o&&o.self;var a,c=2147483647,l=/^xn--/,u=/[^\x20-\x7E]/,d=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,g=String.fromCharCode;function p(e){throw new RangeError(h[e])}function m(e,t){for(var n=e.length,i=[];n--;)i[n]=t(e[n]);return i}function v(e,t){var n=e.split("@"),i="";return n.length>1&&(i=n[0]+"@",e=n[1]),i+m((e=e.replace(d,".")).split("."),t).join(".")}function y(e){for(var t,n,i=[],s=0,r=e.length;s<r;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<r?56320==(64512&(n=e.charCodeAt(s++)))?i.push(((1023&t)<<10)+(1023&n)+65536):(i.push(t),s--):i.push(t);return i}function b(e){return m(e,(function(e){var t="";return e>65535&&(t+=g((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=g(e)})).join("")}function w(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function _(e,t,n){var i=0;for(e=n?f(e/700):e>>1,e+=f(e/t);e>455;i+=36)e=f(e/35);return f(i+36*e/(e+38))}function E(e){var t,n,i,s,r,o,a,l,u,d,h,g=[],m=e.length,v=0,y=128,w=72;for((n=e.lastIndexOf("-"))<0&&(n=0),i=0;i<n;++i)e.charCodeAt(i)>=128&&p("not-basic"),g.push(e.charCodeAt(i));for(s=n>0?n+1:0;s<m;){for(r=v,o=1,a=36;s>=m&&p("invalid-input"),((l=(h=e.charCodeAt(s++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:36)>=36||l>f((c-v)/o))&&p("overflow"),v+=l*o,!(l<(u=a<=w?1:a>=w+26?26:a-w));a+=36)o>f(c/(d=36-u))&&p("overflow"),o*=d;w=_(v-r,t=g.length+1,0==r),f(v/t)>c-y&&p("overflow"),y+=f(v/t),v%=t,g.splice(v++,0,y)}return b(g)}function S(e){var t,n,i,s,r,o,a,l,u,d,h,m,v,b,E,S=[];for(m=(e=y(e)).length,t=128,n=0,r=72,o=0;o<m;++o)(h=e[o])<128&&S.push(g(h));for(i=s=S.length,s&&S.push("-");i<m;){for(a=c,o=0;o<m;++o)(h=e[o])>=t&&h<a&&(a=h);for(a-t>f((c-n)/(v=i+1))&&p("overflow"),n+=(a-t)*v,t=a,o=0;o<m;++o)if((h=e[o])<t&&++n>c&&p("overflow"),h==t){for(l=n,u=36;!(l<(d=u<=r?1:u>=r+26?26:u-r));u+=36)E=l-d,b=36-d,S.push(g(w(d+E%b,0))),l=f(E/b);S.push(g(w(l,0))),r=_(n,v,i==s),n=0,++i}++n,++t}return S.join("")}a={version:"1.4.1",ucs2:{decode:y,encode:b},decode:E,encode:S,toASCII:function(e){return v(e,(function(e){return u.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return v(e,(function(e){return l.test(e)?E(e.slice(4).toLowerCase()):e}))}},void 0===(s=function(){return a}.call(t,n,t,e))||(e.exports=s)}()}).call(this,n(69)(e),n(12))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";t.decode=t.parse=n(72),t.encode=t.stringify=n(73)},function(e,t,n){"use strict";function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,r){t=t||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var a=/\+/g;e=e.split(t);var c=1e3;r&&"number"==typeof r.maxKeys&&(c=r.maxKeys);var l=e.length;c>0&&l>c&&(l=c);for(var u=0;u<l;++u){var d,h,f,g,p=e[u].replace(a,"%20"),m=p.indexOf(n);m>=0?(d=p.substr(0,m),h=p.substr(m+1)):(d=p,h=""),f=decodeURIComponent(d),g=decodeURIComponent(h),i(o,f)?s(o[f])?o[f].push(g):o[f]=[o[f],g]:o[f]=g}return o};var s=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var i=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,a){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?r(o(e),(function(o){var a=encodeURIComponent(i(o))+n;return s(e[o])?r(e[o],(function(e){return a+encodeURIComponent(i(e))})).join(t):a+encodeURIComponent(i(e[o]))})).join(t):a?encodeURIComponent(i(a))+n+encodeURIComponent(i(e)):""};var s=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function r(e,t){if(e.map)return e.map(t);for(var n=[],i=0;i<e.length;i++)n.push(t(e[i],i));return n}var o=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){"use strict";var i=n(19),s=i.ValidatorResult,r=i.SchemaError,o={ignoreProperties:{id:!0,default:!0,description:!0,title:!0,additionalItems:!0,then:!0,else:!0,$schema:!0,$ref:!0,extends:!0}},a=o.validators={};function c(e,t,n,i,s){var r=t.throwError,o=t.throwAll;t.throwError=!1,t.throwAll=!1;var a=this.validateSchema(e,s,t,n);return t.throwError=r,t.throwAll=o,!a.valid&&i instanceof Function&&i(a),a.valid}function l(e,t){if(Object.hasOwnProperty.call(e,t))return e[t];if(t in e)for(;e=Object.getPrototypeOf(e);)if(Object.propertyIsEnumerable.call(e,t))return e[t]}function u(e,t,n,i,s,r){if(this.types.object(e)&&(!t.properties||void 0===t.properties[s]))if(!1===t.additionalProperties)r.addError({name:"additionalProperties",argument:s,message:"is not allowed to have the additional property "+JSON.stringify(s)});else{var o=t.additionalProperties||{};"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,s,o,n,i);var a=this.validateSchema(e[s],o,n,i.makeChild(o,s));a.instance!==r.instance[s]&&(r.instance[s]=a.instance),r.importErrors(a)}}a.type=function(e,t,n,i){if(void 0===e)return null;var r=new s(e,t,n,i),o=Array.isArray(t.type)?t.type:[t.type];if(!o.some(this.testType.bind(this,e,t,n,i))){var a=o.map((function(e){if(e){var t=e.$id||e.id;return t?"<"+t+">":e+""}}));r.addError({name:"type",argument:a,message:"is not of a type(s) "+a})}return r},a.anyOf=function(e,t,n,i){if(void 0===e)return null;var o=new s(e,t,n,i),a=new s(e,t,n,i);if(!Array.isArray(t.anyOf))throw new r("anyOf must be an array");if(!t.anyOf.some(c.bind(this,e,n,i,(function(e){a.importErrors(e)})))){var l=t.anyOf.map((function(e,t){var n=e.$id||e.id;return n?"<"+n+">":e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));n.nestedErrors&&o.importErrors(a),o.addError({name:"anyOf",argument:l,message:"is not any of "+l.join(",")})}return o},a.allOf=function(e,t,n,i){if(void 0===e)return null;if(!Array.isArray(t.allOf))throw new r("allOf must be an array");var o=new s(e,t,n,i),a=this;return t.allOf.forEach((function(t,s){var r=a.validateSchema(e,t,n,i);if(!r.valid){var c=t.$id||t.id||t.title&&JSON.stringify(t.title)||t.$ref&&"<"+t.$ref+">"||"[subschema "+s+"]";o.addError({name:"allOf",argument:{id:c,length:r.errors.length,valid:r},message:"does not match allOf schema "+c+" with "+r.errors.length+" error[s]:"}),o.importErrors(r)}})),o},a.oneOf=function(e,t,n,i){if(void 0===e)return null;if(!Array.isArray(t.oneOf))throw new r("oneOf must be an array");var o=new s(e,t,n,i),a=new s(e,t,n,i),l=t.oneOf.filter(c.bind(this,e,n,i,(function(e){a.importErrors(e)}))).length,u=t.oneOf.map((function(e,t){return e.$id||e.id||e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));return 1!==l&&(n.nestedErrors&&o.importErrors(a),o.addError({name:"oneOf",argument:u,message:"is not exactly one from "+u.join(",")})),o},a.if=function(e,t,n,r){if(void 0===e)return null;if(!i.isSchema(t.if))throw new Error('Expected "if" keyword to be a schema');var o,a=c.call(this,e,n,r,null,t.if),l=new s(e,t,n,r);if(a){if(void 0===t.then)return;if(!i.isSchema(t.then))throw new Error('Expected "then" keyword to be a schema');o=this.validateSchema(e,t.then,n,r.makeChild(t.then)),l.importErrors(o)}else{if(void 0===t.else)return;if(!i.isSchema(t.else))throw new Error('Expected "else" keyword to be a schema');o=this.validateSchema(e,t.else,n,r.makeChild(t.else)),l.importErrors(o)}return l},a.propertyNames=function(e,t,n,o){if(this.types.object(e)){var a=new s(e,t,n,o),c=void 0!==t.propertyNames?t.propertyNames:{};if(!i.isSchema(c))throw new r('Expected "propertyNames" to be a schema (object or boolean)');for(var u in e)if(void 0!==l(e,u)){var d=this.validateSchema(u,c,n,o.makeChild(c));a.importErrors(d)}return a}},a.properties=function(e,t,n,i){if(this.types.object(e)){var o=new s(e,t,n,i),a=t.properties||{};for(var c in a){var u=a[c];if(void 0!==u){if(null===u)throw new r('Unexpected null, expected schema in "properties"');"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,c,u,n,i);var d=l(e,c),h=this.validateSchema(d,u,n,i.makeChild(u,c));h.instance!==o.instance[c]&&(o.instance[c]=h.instance),o.importErrors(h)}}return o}},a.patternProperties=function(e,t,n,i){if(this.types.object(e)){var o=new s(e,t,n,i),a=t.patternProperties||{};for(var c in e){var l=!0;for(var d in a){var h=a[d];if(void 0!==h){if(null===h)throw new r('Unexpected null, expected schema in "patternProperties"');try{var f=new RegExp(d,"u")}catch(e){f=new RegExp(d)}if(f.test(c)){l=!1,"function"==typeof n.preValidateProperty&&n.preValidateProperty(e,c,h,n,i);var g=this.validateSchema(e[c],h,n,i.makeChild(h,c));g.instance!==o.instance[c]&&(o.instance[c]=g.instance),o.importErrors(g)}}}l&&u.call(this,e,t,n,i,c,o)}return o}},a.additionalProperties=function(e,t,n,i){if(this.types.object(e)){if(t.patternProperties)return null;var r=new s(e,t,n,i);for(var o in e)u.call(this,e,t,n,i,o,r);return r}},a.minProperties=function(e,t,n,i){if(this.types.object(e)){var r=new s(e,t,n,i);return Object.keys(e).length>=t.minProperties||r.addError({name:"minProperties",argument:t.minProperties,message:"does not meet minimum property length of "+t.minProperties}),r}},a.maxProperties=function(e,t,n,i){if(this.types.object(e)){var r=new s(e,t,n,i);return Object.keys(e).length<=t.maxProperties||r.addError({name:"maxProperties",argument:t.maxProperties,message:"does not meet maximum property length of "+t.maxProperties}),r}},a.items=function(e,t,n,i){var r=this;if(this.types.array(e)&&void 0!==t.items){var o=new s(e,t,n,i);return e.every((function(e,s){if(Array.isArray(t.items))var a=void 0===t.items[s]?t.additionalItems:t.items[s];else a=t.items;if(void 0===a)return!0;if(!1===a)return o.addError({name:"items",message:"additionalItems not permitted"}),!1;var c=r.validateSchema(e,a,n,i.makeChild(a,s));return c.instance!==o.instance[s]&&(o.instance[s]=c.instance),o.importErrors(c),!0})),o}},a.contains=function(e,t,n,r){var o=this;if(this.types.array(e)&&void 0!==t.contains){if(!i.isSchema(t.contains))throw new Error('Expected "contains" keyword to be a schema');var a=new s(e,t,n,r);return!1===e.some((function(e,i){return 0===o.validateSchema(e,t.contains,n,r.makeChild(t.contains,i)).errors.length}))&&a.addError({name:"contains",argument:t.contains,message:"must contain an item matching given schema"}),a}},a.minimum=function(e,t,n,i){if(this.types.number(e)){var r=new s(e,t,n,i);return t.exclusiveMinimum&&!0===t.exclusiveMinimum?e>t.minimum||r.addError({name:"minimum",argument:t.minimum,message:"must be greater than "+t.minimum}):e>=t.minimum||r.addError({name:"minimum",argument:t.minimum,message:"must be greater than or equal to "+t.minimum}),r}},a.maximum=function(e,t,n,i){if(this.types.number(e)){var r=new s(e,t,n,i);return t.exclusiveMaximum&&!0===t.exclusiveMaximum?e<t.maximum||r.addError({name:"maximum",argument:t.maximum,message:"must be less than "+t.maximum}):e<=t.maximum||r.addError({name:"maximum",argument:t.maximum,message:"must be less than or equal to "+t.maximum}),r}},a.exclusiveMinimum=function(e,t,n,i){if("boolean"!=typeof t.exclusiveMinimum&&this.types.number(e)){var r=new s(e,t,n,i);return e>t.exclusiveMinimum||r.addError({name:"exclusiveMinimum",argument:t.exclusiveMinimum,message:"must be strictly greater than "+t.exclusiveMinimum}),r}},a.exclusiveMaximum=function(e,t,n,i){if("boolean"!=typeof t.exclusiveMaximum&&this.types.number(e)){var r=new s(e,t,n,i);return e<t.exclusiveMaximum||r.addError({name:"exclusiveMaximum",argument:t.exclusiveMaximum,message:"must be strictly less than "+t.exclusiveMaximum}),r}};var d=function(e,t,n,o,a,c){if(this.types.number(e)){var l=t[a];if(0==l)throw new r(a+" cannot be zero");var u=new s(e,t,n,o),d=i.getDecimalPlaces(e),h=i.getDecimalPlaces(l),f=Math.max(d,h),g=Math.pow(10,f);return Math.round(e*g)%Math.round(l*g)!=0&&u.addError({name:a,argument:l,message:c+JSON.stringify(l)}),u}};function h(e,t,n){var s,r=n.length;for(s=t+1;s<r;s++)if(i.deepCompareStrict(e,n[s]))return!1;return!0}a.multipleOf=function(e,t,n,i){return d.call(this,e,t,n,i,"multipleOf","is not a multiple of (divisible by) ")},a.divisibleBy=function(e,t,n,i){return d.call(this,e,t,n,i,"divisibleBy","is not divisible by (multiple of) ")},a.required=function(e,t,n,i){var r=new s(e,t,n,i);return void 0===e&&!0===t.required?r.addError({name:"required",message:"is required"}):this.types.object(e)&&Array.isArray(t.required)&&t.required.forEach((function(t){void 0===l(e,t)&&r.addError({name:"required",argument:t,message:"requires property "+JSON.stringify(t)})})),r},a.pattern=function(e,t,n,i){if(this.types.string(e)){var r=new s(e,t,n,i),o=t.pattern;try{var a=new RegExp(o,"u")}catch(e){a=new RegExp(o)}return e.match(a)||r.addError({name:"pattern",argument:t.pattern,message:"does not match pattern "+JSON.stringify(t.pattern.toString())}),r}},a.format=function(e,t,n,r){if(void 0!==e){var o=new s(e,t,n,r);return o.disableFormat||i.isFormat(e,t.format,this)||o.addError({name:"format",argument:t.format,message:"does not conform to the "+JSON.stringify(t.format)+" format"}),o}},a.minLength=function(e,t,n,i){if(this.types.string(e)){var r=new s(e,t,n,i),o=e.match(/[\uDC00-\uDFFF]/g);return e.length-(o?o.length:0)>=t.minLength||r.addError({name:"minLength",argument:t.minLength,message:"does not meet minimum length of "+t.minLength}),r}},a.maxLength=function(e,t,n,i){if(this.types.string(e)){var r=new s(e,t,n,i),o=e.match(/[\uDC00-\uDFFF]/g);return e.length-(o?o.length:0)<=t.maxLength||r.addError({name:"maxLength",argument:t.maxLength,message:"does not meet maximum length of "+t.maxLength}),r}},a.minItems=function(e,t,n,i){if(this.types.array(e)){var r=new s(e,t,n,i);return e.length>=t.minItems||r.addError({name:"minItems",argument:t.minItems,message:"does not meet minimum length of "+t.minItems}),r}},a.maxItems=function(e,t,n,i){if(this.types.array(e)){var r=new s(e,t,n,i);return e.length<=t.maxItems||r.addError({name:"maxItems",argument:t.maxItems,message:"does not meet maximum length of "+t.maxItems}),r}},a.uniqueItems=function(e,t,n,i){if(!0===t.uniqueItems&&this.types.array(e)){var r=new s(e,t,n,i);return e.every(h)||r.addError({name:"uniqueItems",message:"contains duplicate item"}),r}},a.dependencies=function(e,t,n,i){if(this.types.object(e)){var r=new s(e,t,n,i);for(var o in t.dependencies)if(void 0!==e[o]){var a=t.dependencies[o],c=i.makeChild(a,o);if("string"==typeof a&&(a=[a]),Array.isArray(a))a.forEach((function(t){void 0===e[t]&&r.addError({name:"dependencies",argument:c.propertyPath,message:"property "+t+" not found, required by "+c.propertyPath})}));else{var l=this.validateSchema(e,a,n,c);r.instance!==l.instance&&(r.instance=l.instance),l&&l.errors.length&&(r.addError({name:"dependencies",argument:c.propertyPath,message:"does not meet dependency required by "+c.propertyPath}),r.importErrors(l))}}return r}},a.enum=function(e,t,n,o){if(void 0===e)return null;if(!Array.isArray(t.enum))throw new r("enum expects an array",t);var a=new s(e,t,n,o);return t.enum.some(i.deepCompareStrict.bind(null,e))||a.addError({name:"enum",argument:t.enum,message:"is not one of enum values: "+t.enum.map(String).join(",")}),a},a.const=function(e,t,n,r){if(void 0===e)return null;var o=new s(e,t,n,r);return i.deepCompareStrict(t.const,e)||o.addError({name:"const",argument:t.const,message:"does not exactly match expected constant: "+t.const}),o},a.not=a.disallow=function(e,t,n,i){var r=this;if(void 0===e)return null;var o=new s(e,t,n,i),a=t.not||t.disallow;return a?(Array.isArray(a)||(a=[a]),a.forEach((function(s){if(r.testType(e,t,n,i,s)){var a=s&&(s.$id||s.id)||s;o.addError({name:"not",argument:a,message:"is of prohibited type "+a})}})),o):null},e.exports=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(17);t.default=async function(e){const t=await fetch("/Neon/Neon-gh/assets/template.html");document.body.innerHTML=await t.text(),document.getElementById("home-link").href="https://ddmal.music.mcgill.ca/Neon",document.getElementById("neon-version").textContent="05bde194\n",document.getElementById("neon-main-icon").src="/Neon/Neon-gh/assets/img/Neon_Icon_3.svg",Array.from(document.getElementsByClassName("external-link-icon")).forEach(e=>{e.src="/Neon/Neon-gh/assets/img/external-link.svg"}),document.getElementById("filename").innerText=e.manifest.title,document.title=e.manifest.title,document.getElementById("navbar-item-hotkeys").addEventListener("click",(function(){e.modal.setModalWindowView(i.ModalWindowView.HOTKEYS),e.modal.openModalWindow()})),document.querySelector("#file-saved").setAttribute("src","/Neon/Neon-gh/assets/img/saved-icon.svg")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(16),s=n(6);t.default=class{constructor(e,t,n,i){this.view=e,this.meiClass=t,this.background=n,this.zoomHandler=i;document.getElementById("display_controls").innerHTML=function(e){let t='\n    <div class="panel-heading" id="displayHeader">\n      <div class="panel-heading-title">DISPLAY</div>\n      <svg class="icon is-pulled-right">\n        <use id="toggleDisplay" class="panel-dropdown-icon" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n      </svg>\n    </div>\n    <div id="displayContents" class="panel-contents">\n      <div class="panel-content-subsection first-subsection">\n  ';return void 0!==e&&(t+='\n        <div class="slider-and-slider-actions-container display-panel" style="cursor: default">\n          <div class="slider-actions-container">\n            <div class="display-slider-title">Zoom</div>\n            <button class="side-panel-btn slider-btn" id="reset-zoom">\n              <img class="slider-btn-img" src="/Neon/Neon-gh/assets/img/arrow-rotate-left-solid.svg">\n            </button>\n            <button class="side-panel-btn slider-btn" id="set-zoom-easy-edit">\n              <img class="slider-btn-img" src="/Neon/Neon-gh/assets/img/expand-icon.svg">\n            </button>\n          </div>\n          <div class="slider-container">\n            <input type="range"\n              step="5" min="25" max="400" value="100"\n              aria-labelledby="reset-zoom"\n              class="slider is-fullwidth is-large"\n              id="zoomSlider"\n              style="padding-left: 1rem; padding-right: 1rem;"\n              disabled="disabled"\n            />\n            <output id="zoomOutput" for="zoomSlider">100</output>\n          </div>\n        </div>'),t+='\n        <div class="slider-and-slider-actions-container display-panel" style="cursor: default">\n          <div class="slider-actions-container">\n          <div class="display-slider-title">Glyph Opacity</div>\n            <button class="side-panel-btn slider-btn" id="toggle-glyph-opacity">\n              <img class="slider-btn-img" src="/Neon/Neon-gh//assets/img/hide-icon.svg">\n            </button>   \n          </div>\n          <div class="slider-container">\n            <input type="range"\n              step="5" min="0" max="100" value="100"\n              aria-labelledby="toggle-glyph-opacity"\n              class="slider is-fullwidth is-large"\n              id="opacitySlider"\n              style="padding-left: 1rem; padding-right: 1rem;"\n            />\n            <output id="opacityOutput" for="opacitySlider">100</output>\n          </div>\n        </div>\n        \n        <div class="slider-and-slider-actions-container display-panel" style="cursor: default">\n          <div class="slider-actions-container">\n          <div class="display-slider-title">Image Opacity</div> \n            <button class="side-panel-btn slider-btn" id="toggle-bg-opacity">\n              <img class="slider-btn-img" src="/Neon/Neon-gh//assets/img/hide-icon.svg">\n            </button>   \n          </div>\n          <div class="slider-container">\n            <input type="range"\n              step="5" min="0" max="100" value="100"\n              aria-labelledby="toggle-bg-opacity"\n              class="slider is-fullwidth is-large"\n              id="bgOpacitySlider"\n              style="padding-left: 1rem; padding-right: 1rem;"\n            />\n            <output id="bgOpacityOutput" for="bgOpacitySlider">100</output>\n          </div>\n        </div>\n      </div>\n      \n      <div class="panel-content-subsection">\n\n        <div id="highlight-options-title" class="panel-sub-title">Highlight Options:</div>\n        <div class="dropdown" id="highlight-dropdown">\n          <div class="dropdown-trigger">\n            <button class="side-panel-btn" id="highlight-button" aria-haspopup="true" aria-controls="highlight-menu" style="width: auto">\n              <span>Highlight</span>\n              <span id="highlight-type">&nbsp;- Off</span>\n              <svg class="icon">\n                <use id="toggleDisplay" xlink:href="/Neon/Neon-gh/assets/img/icons.svg#dropdown-down"></use>\n              </svg>\n            </button>\n          </div>\n          <div class="dropdown-menu" id="highlight-menu" role="menu">\n            <div class="dropdown-content">\n              <a aria-role="menuitem" class="dropdown-item" id="highlight-staff">Staff</a>\n              <a aria-role="menuitem" class="dropdown-item" id="highlight-syllable">Syllable</a>\n              <a aria-role="menuitem" class="dropdown-item" id="highlight-neume">Neume</a>\n              <a aria-role="menuitem" class="dropdown-item" id="highlight-layerElement">LayerElement</a>\n              <hr class="dropdown-divider"/>\n              <a aria-role="menuitem" class="dropdown-item" id="highlight-none">None</a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class="panel-content-subsection">\n        <div id="display-options-container">\n          <div id="display-options-title" class="panel-sub-title">Display Options:</div>\n\n          <div id="display-options-items">\n\n            <div id="checkbox-display-options">\n\n              <div id="display-all-container">\n                <div id="display-options-separator">\n                <div class="side-panel-btn" id="display-all-btn">Display All</div>\n              </div>\n              <div id="display-single-container"></div>\n\n              \n            </div>\n\n          </div>\n\n        </div>\n      </div>\n      \n    </div>',t}(this.zoomHandler),this.loadSettings(),this.view.addUpdateCallback(this.updateVisualization.bind(this))}setDisplayListeners(){this.zoomHandler&&i.setZoomControls(this.zoomHandler),i.initDisplayControls(this.meiClass,this.background)}loadSettings(){const{zoom:e,glyphOpacity:t,imageOpacity:n,highlightMode:i}=(0,s.getSettings)();document.querySelector("#zoomOutput").value=String(e),document.querySelector("#zoomSlider").value=String(e),document.querySelector("#bgOpacityOutput").value=String(n),document.querySelector("#bgOpacitySlider").value=String(n),document.querySelector("#opacityOutput").value=String(t),document.querySelector("#opacitySlider").value=String(t);const r="none"===i?"Off":i[0].toUpperCase()+i.slice(1);document.querySelector("#highlight-type").textContent=" - "+r}updateVisualization(){i.setOpacityFromSlider(this.meiClass),i.setBgOpacityFromSlider(this.background),i.updateHighlight()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(78);t.default=class{constructor(e,t,n){this.neonView=e,this.updateCallbacks=[],this.divaReady=!1,this.diva=new i.default("container",{objectData:n}),document.getElementById("container").style.minHeight="100%",this.indexMap=new Map,this.diva.disableDragScrollable(),this.displayPanel=new t(this,"neon-container","diva-viewer-canvas"),this.loadDelay=500,this.initDivaEvents(),this.setViewEventHandlers(),window.onresize=()=>{const e=window.innerHeight,t=window.innerWidth;window.setTimeout(()=>{e===window.innerHeight&&t===window.innerWidth&&this.changePage(this.getCurrentPage(),!1)},this.loadDelay)}}initDivaEvents(){i.default.Events.subscribe("ManifestDidLoad",this.parseManifest.bind(this),this.diva.settings.ID),i.default.Events.subscribe("ObjectDidLoad",this.didLoad.bind(this),this.diva.settings.ID),i.default.Events.subscribe("ActivePageDidChange",this.changePage.bind(this),this.diva.settings.ID),i.default.Events.subscribe("ZoomLevelDidChange",this.adjustZoom.bind(this),this.diva.settings.ID)}async changePage(e,t=!0){function n(e){if(e===this.getCurrentPage()){const t=this.indexMap.get(e);this.neonView.getPageSVG(t).then(t=>{this.updateSVG(t,e);const n="neon-container-"+e,i=document.getElementById(n);null!==i&&i.classList.add("active-page"),this.updateCallbacks.forEach(e=>e())}).catch(e=>{"not_found"!==e.name&&"missing_mei"!==e.name&&console.error(e)})}}const i=[e];Array.from(document.getElementsByClassName("active-page")).forEach(e=>{e.classList.remove("active-page")});for(const e of i)t?window.setTimeout(n.bind(this),this.loadDelay,e):n.bind(this)(e)}getCurrentPage(){return this.diva.getActivePageIndex()}getCurrentPageURI(){return this.indexMap.get(this.getCurrentPage())}adjustZoom(){new Promise(e=>{Array.from(document.getElementsByClassName("neon-container")).forEach(e=>{e.style.display="none"}),setTimeout(e,this.diva.settings.zoomDuration+100)}).then(()=>{this.changePage(this.diva.getActivePageIndex(),!0),Array.from(document.getElementsByClassName("neon-container")).forEach(e=>{const t=e.firstChild,n=parseInt(e.id.match(/\d+/)[0]);this.updateSVG(t,n),e.style.display=""})})}updateSVG(e,t){const n=document.getElementById("diva-1-inner"),i=this.diva.getPageDimensionsAtCurrentZoomLevel(t),s=this.diva.settings.viewHandler._viewerCore.getPageRegion(t,{includePadding:!0,incorporateViewport:!0}),r=window.getComputedStyle(n,null).getPropertyValue("margin-left"),o="neon-container-"+t.toString();let a=document.getElementById(o);for(null===a&&(a=document.createElement("div"),a.id=o,a.classList.add("neon-container"),n.appendChild(a));a.firstChild;)a.removeChild(a.firstChild);e.setAttribute("width",i.width.toString()),e.setAttribute("height",i.height.toString()),a.style.position="absolute",a.style.top=s.top+"px",a.style.left=s.left-parseInt(r)+"px",a.appendChild(e)}didLoad(){this.divaReady=!0,this.displayPanel.setDisplayListeners(),document.getElementById("loading").style.display="none",console.log(this.diva)}addUpdateCallback(e){this.updateCallbacks.push(e)}removeUpdateCallback(e){const t=this.updateCallbacks.findIndex(t=>t===e);-1!==t&&this.updateCallbacks.splice(t,1)}setViewEventHandlers(){document.body.addEventListener("keydown",e=>{switch(e.key){case"h":for(const e of document.getElementsByClassName("neon-container"))e.style.visibility="hidden"}}),document.body.addEventListener("keyup",e=>{switch(e.key){case"h":for(const e of document.getElementsByClassName("neon-container"))e.style.visibility=""}})}parseManifest(e){this.indexMap.clear();for(const t of e.sequences)for(const e of t.canvases)this.indexMap.set(t.canvases.indexOf(e),e["@id"])}getPageName(){return this.diva.settings.manifest.itemTitle+" — "+this.diva.settings.manifest.pages[this.getCurrentPage()].l}}},function(e,t){!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/build/",n(n.s=2)}([function(e,t,n){(function(e,n){var i="__lodash_hash_undefined__",s=9007199254740991,r="[object Arguments]",o="[object Array]",a="[object Boolean]",c="[object Date]",l="[object Error]",u="[object Function]",d="[object Map]",h="[object Number]",f="[object Object]",g="[object RegExp]",p="[object Set]",m="[object String]",v="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",w=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,_=/^\w*$/,E=/^\./,S=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,L=/\\(\\)?/g,x=/^\[object .+?Constructor\]$/,k=/^(?:0|[1-9]\d*)$/,A={};A["[object Float32Array]"]=A["[object Float64Array]"]=A["[object Int8Array]"]=A["[object Int16Array]"]=A["[object Int32Array]"]=A["[object Uint8Array]"]=A["[object Uint8ClampedArray]"]=A["[object Uint16Array]"]=A["[object Uint32Array]"]=!0,A[r]=A[o]=A[y]=A[a]=A[b]=A[c]=A[l]=A[u]=A[d]=A[h]=A[f]=A[g]=A[p]=A[m]=A["[object WeakMap]"]=!1;var C="object"==typeof e&&e&&e.Object===Object&&e,I="object"==typeof self&&self&&self.Object===Object&&self,P=C||I||Function("return this")(),O="object"==typeof t&&t&&!t.nodeType&&t,B=O&&"object"==typeof n&&n&&!n.nodeType&&n,T=B&&B.exports===O&&C.process,N=function(){try{return T&&T.binding("util")}catch(e){}}(),M=N&&N.isTypedArray;function q(e,t){for(var n=-1,i=e?e.length:0;++n<i;)if(t(e[n],n,e))return!0;return!1}function j(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function F(e){var t=-1,n=Array(e.size);return e.forEach((function(e,i){n[++t]=[i,e]})),n}function D(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var V=Array.prototype,R=Function.prototype,z=Object.prototype,H=P["__core-js_shared__"],U=function(){var e=/[^.]+$/.exec(H&&H.keys&&H.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),$=R.toString,Z=z.hasOwnProperty,G=z.toString,W=RegExp("^"+$.call(Z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),K=P.Symbol,Y=P.Uint8Array,X=z.propertyIsEnumerable,J=V.splice,Q=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object),ee=Ae(P,"DataView"),te=Ae(P,"Map"),ne=Ae(P,"Promise"),ie=Ae(P,"Set"),se=Ae(P,"WeakMap"),re=Ae(Object,"create"),oe=Me(ee),ae=Me(te),ce=Me(ne),le=Me(ie),ue=Me(se),de=K?K.prototype:void 0,he=de?de.valueOf:void 0,fe=de?de.toString:void 0;function ge(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function pe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function me(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function ve(e){var t=-1,n=e?e.length:0;for(this.__data__=new me;++t<n;)this.add(e[t])}function ye(e){this.__data__=new pe(e)}function be(e,t){for(var n=e.length;n--;)if(je(e[n][0],t))return n;return-1}function we(e,t){for(var n=0,i=(t=Pe(t,e)?[t]:Le(t)).length;null!=e&&n<i;)e=e[Ne(t[n++])];return n&&n==i?e:void 0}function _e(e,t){return e>t}function Ee(e,t){return null!=e&&t in Object(e)}function Se(e,t,n,i,s){return e===t||(null==e||null==t||!He(e)&&!Ue(t)?e!=e&&t!=t:function(e,t,n,i,s,u){var w=De(e),_=De(t),E=o,S=o;w||(E=(E=Ce(e))==r?f:E),_||(S=(S=Ce(t))==r?f:S);var L=E==f&&!j(e),x=S==f&&!j(t),k=E==S;if(k&&!L)return u||(u=new ye),w||Ze(e)?xe(e,t,n,i,s,u):function(e,t,n,i,s,r,o){switch(n){case b:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case y:return!(e.byteLength!=t.byteLength||!i(new Y(e),new Y(t)));case a:case c:case h:return je(+e,+t);case l:return e.name==t.name&&e.message==t.message;case g:case m:return e==t+"";case d:var u=F;case p:var f=2&r;if(u||(u=D),e.size!=t.size&&!f)return!1;var w=o.get(e);if(w)return w==t;r|=1,o.set(e,t);var _=xe(u(e),u(t),i,s,r,o);return o.delete(e),_;case v:if(he)return he.call(e)==he.call(t)}return!1}(e,t,E,n,i,s,u);if(!(2&s)){var A=L&&Z.call(e,"__wrapped__"),C=x&&Z.call(t,"__wrapped__");if(A||C){var I=A?e.value():e,P=C?t.value():t;return u||(u=new ye),n(I,P,i,s,u)}}return!!k&&(u||(u=new ye),function(e,t,n,i,s,r){var o=2&s,a=Ge(e),c=a.length;if(c!=Ge(t).length&&!o)return!1;for(var l=c;l--;){var u=a[l];if(!(o?u in t:Z.call(t,u)))return!1}var d=r.get(e);if(d&&r.get(t))return d==t;var h=!0;r.set(e,t),r.set(t,e);for(var f=o;++l<c;){var g=e[u=a[l]],p=t[u];if(i)var m=o?i(p,g,u,t,e,r):i(g,p,u,e,t,r);if(!(void 0===m?g===p||n(g,p,i,s,r):m)){h=!1;break}f||(f="constructor"==u)}if(h&&!f){var v=e.constructor,y=t.constructor;v!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y)&&(h=!1)}return r.delete(e),r.delete(t),h}(e,t,n,i,s,u))}(e,t,Se,n,i,s))}function Le(e){return De(e)?e:Te(e)}function xe(e,t,n,i,s,r){var o=2&s,a=e.length,c=t.length;if(a!=c&&!(o&&c>a))return!1;var l=r.get(e);if(l&&r.get(t))return l==t;var u=-1,d=!0,h=1&s?new ve:void 0;for(r.set(e,t),r.set(t,e);++u<a;){var f=e[u],g=t[u];if(i)var p=o?i(g,f,u,t,e,r):i(f,g,u,e,t,r);if(void 0!==p){if(p)continue;d=!1;break}if(h){if(!q(t,(function(e,t){if(!h.has(t)&&(f===e||n(f,e,i,s,r)))return h.add(t)}))){d=!1;break}}else if(f!==g&&!n(f,g,i,s,r)){d=!1;break}}return r.delete(e),r.delete(t),d}function ke(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Ae(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!He(e)||function(e){return!!U&&U in e}(e))&&(Re(e)||j(e)?W:x).test(Me(e))}(n)?n:void 0}ge.prototype.clear=function(){this.__data__=re?re(null):{}},ge.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},ge.prototype.get=function(e){var t=this.__data__;if(re){var n=t[e];return n===i?void 0:n}return Z.call(t,e)?t[e]:void 0},ge.prototype.has=function(e){var t=this.__data__;return re?void 0!==t[e]:Z.call(t,e)},ge.prototype.set=function(e,t){return this.__data__[e]=re&&void 0===t?i:t,this},pe.prototype.clear=function(){this.__data__=[]},pe.prototype.delete=function(e){var t=this.__data__,n=be(t,e);return!(n<0||(n==t.length-1?t.pop():J.call(t,n,1),0))},pe.prototype.get=function(e){var t=this.__data__,n=be(t,e);return n<0?void 0:t[n][1]},pe.prototype.has=function(e){return be(this.__data__,e)>-1},pe.prototype.set=function(e,t){var n=this.__data__,i=be(n,e);return i<0?n.push([e,t]):n[i][1]=t,this},me.prototype.clear=function(){this.__data__={hash:new ge,map:new(te||pe),string:new ge}},me.prototype.delete=function(e){return ke(this,e).delete(e)},me.prototype.get=function(e){return ke(this,e).get(e)},me.prototype.has=function(e){return ke(this,e).has(e)},me.prototype.set=function(e,t){return ke(this,e).set(e,t),this},ve.prototype.add=ve.prototype.push=function(e){return this.__data__.set(e,i),this},ve.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.clear=function(){this.__data__=new pe},ye.prototype.delete=function(e){return this.__data__.delete(e)},ye.prototype.get=function(e){return this.__data__.get(e)},ye.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.set=function(e,t){var n=this.__data__;if(n instanceof pe){var i=n.__data__;if(!te||i.length<199)return i.push([e,t]),this;n=this.__data__=new me(i)}return n.set(e,t),this};var Ce=function(e){return G.call(e)};function Ie(e,t){return!!(t=null==t?s:t)&&("number"==typeof e||k.test(e))&&e>-1&&e%1==0&&e<t}function Pe(e,t){if(De(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!$e(e))||_.test(e)||!w.test(e)||null!=t&&e in Object(t)}function Oe(e){return e==e&&!He(e)}function Be(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}(ee&&Ce(new ee(new ArrayBuffer(1)))!=b||te&&Ce(new te)!=d||ne&&"[object Promise]"!=Ce(ne.resolve())||ie&&Ce(new ie)!=p||se&&"[object WeakMap]"!=Ce(new se))&&(Ce=function(e){var t=G.call(e),n=t==f?e.constructor:void 0,i=n?Me(n):void 0;if(i)switch(i){case oe:return b;case ae:return d;case ce:return"[object Promise]";case le:return p;case ue:return"[object WeakMap]"}return t});var Te=qe((function(e){e=function(e){return null==e?"":function(e){if("string"==typeof e)return e;if($e(e))return fe?fe.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(e)}(e);var t=[];return E.test(e)&&t.push(""),e.replace(S,(function(e,n,i,s){t.push(i?s.replace(L,"$1"):n||e)})),t}));function Ne(e){if("string"==typeof e||$e(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Me(e){if(null!=e){try{return $.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function qe(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var i=arguments,s=t?t.apply(this,i):i[0],r=n.cache;if(r.has(s))return r.get(s);var o=e.apply(this,i);return n.cache=r.set(s,o),o};return n.cache=new(qe.Cache||me),n}function je(e,t){return e===t||e!=e&&t!=t}function Fe(e){return function(e){return Ue(e)&&Ve(e)}(e)&&Z.call(e,"callee")&&(!X.call(e,"callee")||G.call(e)==r)}qe.Cache=me;var De=Array.isArray;function Ve(e){return null!=e&&ze(e.length)&&!Re(e)}function Re(e){var t=He(e)?G.call(e):"";return t==u||"[object GeneratorFunction]"==t}function ze(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function He(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ue(e){return!!e&&"object"==typeof e}function $e(e){return"symbol"==typeof e||Ue(e)&&G.call(e)==v}var Ze=M?function(e){return function(t){return e(t)}}(M):function(e){return Ue(e)&&ze(e.length)&&!!A[G.call(e)]};function Ge(e){return Ve(e)?function(e,t){var n=De(e)||Fe(e)?function(e,t){for(var n=-1,i=Array(e);++n<e;)i[n]=t(n);return i}(e.length,String):[],i=n.length,s=!!i;for(var r in e)!t&&!Z.call(e,r)||s&&("length"==r||Ie(r,i))||n.push(r);return n}(e):function(e){if(!function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||z)}(e))return Q(e);var t=[];for(var n in Object(e))Z.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}function We(e){return e}n.exports=function(e,t){return e&&e.length?function(e,t,n){for(var i=-1,s=e.length;++i<s;){var r=e[i],o=t(r);if(null!=o&&(void 0===a?o==o&&!$e(o):n(o,a)))var a=o,c=r}return c}(e,function(e){return"function"==typeof e?e:null==e?We:"object"==typeof e?De(e)?function(e,t){return Pe(e)&&Oe(t)?Be(Ne(e),t):function(n){var i=function(e,t,n){var i=null==e?void 0:we(e,t);return void 0===i?void 0:i}(n,e);return void 0===i&&i===t?function(e,t){return null!=e&&function(e,t,n){for(var i,s=-1,r=(t=Pe(t,e)?[t]:Le(t)).length;++s<r;){var o=Ne(t[s]);if(!(i=null!=e&&n(e,o)))break;e=e[o]}return i||!!(r=e?e.length:0)&&ze(r)&&Ie(o,r)&&(De(e)||Fe(e))}(e,t,Ee)}(n,e):Se(t,i,void 0,3)}}(e[0],e[1]):function(e){var t=function(e){for(var t=Ge(e),n=t.length;n--;){var i=t[n],s=e[i];t[n]=[i,s,Oe(s)]}return t}(e);return 1==t.length&&t[0][2]?Be(t[0][0],t[0][1]):function(n){return n===e||function(e,t,n,i){var s=n.length,r=s;if(null==e)return!r;for(e=Object(e);s--;){var o=n[s];if(o[2]?o[1]!==e[o[0]]:!(o[0]in e))return!1}for(;++s<r;){var a=(o=n[s])[0],c=e[a],l=o[1];if(o[2]){if(void 0===c&&!(a in e))return!1}else{var u,d=new ye;if(!(void 0===u?Se(l,c,i,3,d):u))return!1}}return!0}(n,0,t)}}(e):function(e){return Pe(e)?function(e){return function(t){return null==t?void 0:t[e]}}(Ne(e)):function(e){return function(t){return we(t,e)}}(e)}(e)}(t),_e):void 0}}).call(this,n(6),n(7)(e))},function(e,t,n){(function(i){function s(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==i&&"env"in i&&(e=i.env.DEBUG),e}(t=e.exports=n(9)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),n){var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var s=0,r=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&"%c"===e&&(r=++s)})),e.splice(r,0,i)}},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=s,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(s())}).call(this,n(8))},function(e,t,n){n(3),n(16),e.exports=n(11)},function(e,t){!function(){if(!Array.prototype.fill){var e=function(e){if(null==this)throw new TypeError("this is null or not defined");for(var t=Object(this),n=t.length>>>0,i=arguments[1]>>0,s=i<0?Math.max(n+i,0):Math.min(i,n),r=arguments[2],o=void 0===r?n:r>>0,a=o<0?Math.max(n+o,0):Math.min(o,n);s<a;)t[s]=e,s++;return t};if(Object.defineProperty)try{Object.defineProperty(Array.prototype,"fill",{value:e,configurable:!0,enumerable:!1,writable:!0})}catch(e){}Array.prototype.fill||(Array.prototype.fill=e)}}()},function(e,t){!function(){var e=window.requestAnimationFrame,t="ontouchend"in document,n=function(){for(var e=1;e<arguments.length;e++)for(var t in arguments[e])arguments[e].hasOwnProperty(t)&&(arguments[0][t]=arguments[e][t]);return arguments[0]},i=function(e,t){return this.settings=n({},i.DEFAULTS,t),this.el=e,this.ACTIVE_CLASS="kinetic-active",this._initElements(),this.el._VanillaKinetic=this,this};i.DEFAULTS={cursor:"move",decelerate:!0,triggerHardware:!1,threshold:0,y:!0,x:!0,slowdown:.9,maxvelocity:40,throttleFPS:60,invert:!1,movingClass:{up:"kinetic-moving-up",down:"kinetic-moving-down",left:"kinetic-moving-left",right:"kinetic-moving-right"},deceleratingClass:{up:"kinetic-decelerating-up",down:"kinetic-decelerating-down",left:"kinetic-decelerating-left",right:"kinetic-decelerating-right"}},i.prototype.start=function(e){this.settings=n(this.settings,e),this.velocity=e.velocity||this.velocity,this.velocityY=e.velocityY||this.velocityY,this.settings.decelerate=!1,this._move()},i.prototype.end=function(){this.settings.decelerate=!0},i.prototype.stop=function(){this.velocity=0,this.velocityY=0,this.settings.decelerate=!0,"function"==typeof this.settings.stopped&&this.settings.stopped.call(this)},i.prototype.detach=function(){this._detachListeners(),this.el.classList.remove(this.ACTIVE_CLASS),this.el.style.cursor=""},i.prototype.attach=function(){this.el.classList.contains(this.ACTIVE_CLASS)||(this._attachListeners(),this.el.classList.add(this.ACTIVE_CLASS),this.el.style.cursor=this.settings.cursor)},i.prototype._initElements=function(){this.el.classList.add(this.ACTIVE_CLASS),n(this,{xpos:null,prevXPos:!1,ypos:null,prevYPos:!1,mouseDown:!1,throttleTimeout:1e3/this.settings.throttleFPS,lastMove:null,elementFocused:null}),this.velocity=0,this.velocityY=0;var e=this;this.documentResetHandler=function(){e._resetMouse.apply(e)};var t=document.documentElement;if(t.addEventListener("mouseup",this.documentResetHandler,!1),t.addEventListener("click",this.documentResetHandler,!1),this._initEvents(),this.el.style.cursor=this.settings.cursor,this.settings.triggerHardware)for(var i=["","-ms-","-webkit-","-moz-"],s={transform:"translate3d(0,0,0)",perspective:"1000","backface-visibility":"hidden"},r=0;r<i.length;r++){var o=i[r];for(var a in s)s.hasOwnProperty(a)&&(this.el.style[o+a]=s[a])}},i.prototype._initEvents=function(){var e=this;this.settings.events={touchStart:function(t){var n;e._useTarget(t.target,t)&&(n=t.originalEvent.touches[0],e.threshold=e._threshold(t.target,t),e._start(n.clientX,n.clientY),t.stopPropagation())},touchMove:function(t){var n;e.mouseDown&&(n=t.originalEvent.touches[0],e._inputmove(n.clientX,n.clientY),t.preventDefault&&t.preventDefault())},inputDown:function(t){e._useTarget(t.target,t)&&(e.threshold=e._threshold(t.target,t),e._start(t.clientX,t.clientY),e.elementFocused=t.target,"IMG"===t.target.nodeName&&t.preventDefault(),t.stopPropagation())},inputEnd:function(t){e._useTarget(t.target,t)&&(e._end(),e.elementFocused=null,t.preventDefault&&t.preventDefault())},inputMove:function(t){e.mouseDown&&(e._inputmove(t.clientX,t.clientY),t.preventDefault&&t.preventDefault())},scroll:function(t){"function"==typeof e.settings.moved&&e.settings.moved.call(e,e.settings),t.preventDefault&&t.preventDefault()},inputClick:function(t){if(Math.abs(e.velocity)>0||Math.abs(e.velocityY)>0)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),!1},dragStart:function(t){if(e._useTarget(t.target,t)&&e.elementFocused)return t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation(),!1},selectStart:function(t){return"function"==typeof e.settings.selectStart?e.settings.selectStart.apply(e,arguments):e._useTarget(t.target,t)?(t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation(),!1):void 0}},this._attachListeners()},i.prototype._inputmove=function(e,t){if((!this.lastMove||new Date>new Date(this.lastMove.getTime()+this.throttleTimeout))&&(this.lastMove=new Date,this.mouseDown&&(this.xpos||this.ypos))){var n=e-this.xpos,i=t-this.ypos;if(this.settings.invert&&(n*=-1,i*=-1),this.threshold>0){var s=Math.sqrt(n*n+i*i);if(this.threshold>s)return;this.threshold=0}this.elementFocused&&(this.elementFocused.blur(),this.elementFocused=null,this.el.focus()),this.settings.decelerate=!1,this.velocity=this.velocityY=0;var r=this.scrollLeft(),o=this.scrollTop();this.scrollLeft(this.settings.x?r-n:r),this.scrollTop(this.settings.y?o-i:o),this.prevXPos=this.xpos,this.prevYPos=this.ypos,this.xpos=e,this.ypos=t,this._calculateVelocities(),this._setMoveClasses(this.settings.movingClass),"function"==typeof this.settings.moved&&this.settings.moved.call(this,this.settings)}},i.prototype._calculateVelocities=function(){this.velocity=this._capVelocity(this.prevXPos-this.xpos,this.settings.maxvelocity),this.velocityY=this._capVelocity(this.prevYPos-this.ypos,this.settings.maxvelocity),this.settings.invert&&(this.velocity*=-1,this.velocityY*=-1)},i.prototype._end=function(){this.xpos&&this.prevXPos&&!1===this.settings.decelerate&&(this.settings.decelerate=!0,this._calculateVelocities(),this.xpos=this.prevXPos=this.mouseDown=!1,this._move())},i.prototype._useTarget=function(e,t){return"function"!=typeof this.settings.filterTarget||!1!==this.settings.filterTarget.call(this,e,t)},i.prototype._threshold=function(e,t){return"function"==typeof this.settings.threshold?this.settings.threshold.call(this,e,t):this.settings.threshold},i.prototype._start=function(e,t){this.mouseDown=!0,this.velocity=this.prevXPos=0,this.velocityY=this.prevYPos=0,this.xpos=e,this.ypos=t},i.prototype._resetMouse=function(){this.xpos=!1,this.ypos=!1,this.mouseDown=!1},i.prototype._decelerateVelocity=function(e,t){return 0===Math.floor(Math.abs(e))?0:e*t},i.prototype._capVelocity=function(e,t){var n=e;return e>0?e>t&&(n=t):e<0-t&&(n=0-t),n},i.prototype._setMoveClasses=function(e){var t=this.settings,n=this.el;n.classList.remove(t.movingClass.up),n.classList.remove(t.movingClass.down),n.classList.remove(t.movingClass.left),n.classList.remove(t.movingClass.right),n.classList.remove(t.deceleratingClass.up),n.classList.remove(t.deceleratingClass.down),n.classList.remove(t.deceleratingClass.left),n.classList.remove(t.deceleratingClass.right),this.velocity>0&&n.classList.add(e.right),this.velocity<0&&n.classList.add(e.left),this.velocityY>0&&n.classList.add(e.down),this.velocityY<0&&n.classList.add(e.up)},i.prototype._move=function(){var t=this._getScroller(),n=this,i=this.settings;i.x&&t.scrollWidth>0?(this.scrollLeft(this.scrollLeft()+this.velocity),Math.abs(this.velocity)>0&&(this.velocity=i.decelerate?n._decelerateVelocity(this.velocity,i.slowdown):this.velocity)):this.velocity=0,i.y&&t.scrollHeight>0?(this.scrollTop(this.scrollTop()+this.velocityY),Math.abs(this.velocityY)>0&&(this.velocityY=i.decelerate?n._decelerateVelocity(this.velocityY,i.slowdown):this.velocityY)):this.velocityY=0,n._setMoveClasses(i.deceleratingClass),"function"==typeof i.moved&&i.moved.call(this,i),Math.abs(this.velocity)>0||Math.abs(this.velocityY)>0?this.moving||(this.moving=!0,e((function(){n.moving=!1,n._move()}))):n.stop()},i.prototype._getScroller=function(){return this.el},i.prototype.scrollLeft=function(e){var t=this._getScroller();if("number"!=typeof e)return t.scrollLeft;t.scrollLeft=e,this.settings.scrollLeft=e},i.prototype.scrollTop=function(e){var t=this._getScroller();if("number"!=typeof e)return t.scrollTop;t.scrollTop=e,this.settings.scrollTop=e},i.prototype._attachListeners=function(){var e=this.el,n=this.settings;t&&(e.addEventListener("touchstart",n.events.touchStart,!1),e.addEventListener("touchend",n.events.inputEnd,!1),e.addEventListener("touchmove",n.events.touchMove,!1)),e.addEventListener("mousedown",n.events.inputDown,!1),e.addEventListener("mouseup",n.events.inputEnd,!1),e.addEventListener("mousemove",n.events.inputMove,!1),e.addEventListener("click",n.events.inputClick,!1),e.addEventListener("scroll",n.events.scroll,!1),e.addEventListener("selectstart",n.events.selectStart,!1),e.addEventListener("dragstart",n.events.dragStart,!1)},i.prototype._detachListeners=function(){var e=this.el,n=this.settings;t&&(e.removeEventListener("touchstart",n.events.touchStart,!1),e.removeEventListener("touchend",n.events.inputEnd,!1),e.removeEventListener("touchmove",n.events.touchMove,!1)),e.removeEventListener("mousedown",n.events.inputDown,!1),e.removeEventListener("mouseup",n.events.inputEnd,!1),e.removeEventListener("mousemove",n.events.inputMove,!1),e.removeEventListener("click",n.events.inputClick,!1),e.removeEventListener("scroll",n.events.scroll,!1),e.removeEventListener("selectstart",n.events.selectStart,!1),e.removeEventListener("dragstart",n.events.dragStart,!1)},window.VanillaKinetic=i}()},function(e,t,n){var i,s;
/**
 * @fileoverview dragscroll - scroll area by dragging
 * @version 0.0.8
 *
 * @license MIT, see http://github.com/asvd/dragscroll
 * @copyright 2015 asvd <heliosframework@gmail.com>
 */void 0===(s="function"==typeof(i=function(e){var t,n,i=window,s=document,r=[],o=function(e,o){for(e=0;e<r.length;)(o=(o=r[e++]).container||o).removeEventListener("mousedown",o.md,0),i.removeEventListener("mouseup",o.mu,0),i.removeEventListener("mousemove",o.mm,0);for(r=[].slice.call(s.getElementsByClassName("dragscroll")),e=0;e<r.length;)!function(e,r,o,a,c,l){(l=e.container||e).addEventListener("mousedown",l.md=function(t){e.hasAttribute("nochilddrag")&&s.elementFromPoint(t.pageX,t.pageY)!==l||(a=1,r=t.clientX,o=t.clientY,t.preventDefault())},0),i.addEventListener("mouseup",l.mu=function(){a=0},0),i.addEventListener("mousemove",l.mm=function(i){a&&((c=e.scroller||e).scrollLeft-=t=-r+(r=i.clientX),c.scrollTop-=n=-o+(o=i.clientY),e===s.body&&((c=s.documentElement).scrollLeft-=t,c.scrollTop-=n))},0)}(r[e++])};"complete"===s.readyState?o():i.addEventListener("load",o,0),e.reset=o,window.resetDragscroll=o})?i.apply(t,[t]):i)||(e.exports=s)},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n,i,s=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(e){i=o}}();var c,l=[],u=!1,d=-1;function h(){u&&c&&(u=!1,c.length?l=c.concat(l):d=-1,l.length&&f())}function f(){if(!u){var e=a(h);u=!0;for(var t=l.length;t;){for(c=l,l=[];++d<t;)c&&c[d].run();d=-1,t=l.length}c=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function p(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||u||a(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=p,s.addListener=p,s.once=p,s.off=p,s.removeListener=p,s.removeAllListeners=p,s.emit=p,s.prependListener=p,s.prependOnceListener=p,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,n){function i(e){var n;function i(){if(i.enabled){var e=i,s=+new Date,r=s-(n||s);e.diff=r,e.prev=n,e.curr=s,n=s;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=t.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var c=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(n,i){if("%%"===n)return n;c++;var s=t.formatters[i];if("function"==typeof s){var r=o[c];n=s.call(e,r),o.splice(c,1),c--}return n})),t.formatArgs.call(e,o),(i.log||t.log||console.log.bind(console)).apply(e,o)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var n,i=0;for(n in e)i=(i<<5)-i+e.charCodeAt(n),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),i.destroy=s,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function s(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var i=("string"==typeof e?e:"").split(/[\s,]+/),s=i.length;for(n=0;n<s;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var r=t.instances[n];r.enabled=t.enabled(r.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(10),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n=1e3,i=6e4,s=60*i,r=24*s;function o(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var o=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*r;case"hours":case"hour":case"hrs":case"hr":case"h":return o*s;case"minutes":case"minute":case"mins":case"min":case"m":return o*i;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===a&&!1===isNaN(e))return t.long?function(e){return o(e,r,"day")||o(e,s,"hour")||o(e,i,"minute")||o(e,n,"second")||e+" ms"}(e):function(e){return e>=r?Math.round(e/r)+"d":e>=s?Math.round(e/s)+"h":e>=i?Math.round(e/i)+"m":e>=n?Math.round(e/n)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var i=n(12);"string"==typeof i&&(i=[[e.i,i,""]]);n(14)(i,{hmr:!0,transform:void 0,insertInto:void 0}),i.locals&&(e.exports=i.locals)},function(e,t,n){},,function(e,t,n){var i={},s=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}((function(){return window&&document&&document.all&&!window.atob})),r=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),o=null,a=0,c=[],l=n(15);function u(e,t){for(var n=0;n<e.length;n++){var s=e[n],r=i[s.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](s.parts[o]);for(;o<s.parts.length;o++)r.parts.push(m(s.parts[o],t))}else{var a=[];for(o=0;o<s.parts.length;o++)a.push(m(s.parts[o],t));i[s.id]={id:s.id,refs:1,parts:a}}}}function d(e,t){for(var n=[],i={},s=0;s<e.length;s++){var r=e[s],o=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(a):n.push(i[o]={id:o,parts:[a]})}return n}function h(e,t){var n=r(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=c[c.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=r(e.insertAt.before,n);n.insertBefore(t,s)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=n.nc;i&&(e.attrs.nonce=i)}return p(t,e.attrs),h(e,t),t}function p(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function m(e,t){var n,i,s,r;if(t.transform&&e.css){if(!(r=t.transform(e.css)))return function(){};e.css=r}if(t.singleton){var c=a++;n=o||(o=g(t)),i=y.bind(null,n,c,!1),s=y.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",p(t,e.attrs),h(e,t),t}(t),i=function(e,t,n){var i=n.css,s=n.sourceMap,r=void 0===t.convertToAbsoluteUrls&&s;(t.convertToAbsoluteUrls||r)&&(i=l(i)),s&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var o=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,n,t),s=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),i=function(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),s=function(){f(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else s()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var s=[],r=0;r<n.length;r++){var o=n[r];(a=i[o.id]).refs--,s.push(a)}for(e&&u(d(e,t),t),r=0;r<s.length;r++){var a;if(0===(a=s[r]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,i){var s=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=v(t,s);else{var r=document.createTextNode(s),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var s,r=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(s=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")}))}},function(e,t,n){"use strict";function i(e){const t=document.createElement(e),n=Array.prototype.slice.call(arguments,1);for(;n.length;)s(t,n.shift());return t}function s(e,t){if(null!=t)if("object"!=typeof t&&"function"!=typeof t)e.appendChild(document.createTextNode(t));else if(t instanceof window.Node)e.appendChild(t);else if(t instanceof Array){const n=t.length;for(let i=0;i<n;i++)s(e,t[i])}else r(e,t)}function r(e,t){for(const n in t)t.hasOwnProperty(n)&&("style"===n?o(e,t.style):e.setAttribute(n,t[n]))}function o(e,t){if(t)if("object"==typeof t)for(const n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n]);else e.style.cssText=t}function a(e){this.name="DivaParentElementNotFoundException",this.message=e,this.stack=(new Error).stack}function c(e){this.name="NotAnIIIFManifestException",this.message=e,this.stack=(new Error).stack}function l(e){this.name="ObjectDataNotSuppliedException",this.message=e,this.stack=(new Error).stack}n.r(t),n(4),n(5),a.prototype=new Error,c.prototype=new Error,l.prototype=new Error;var u={Events:new class{constructor(){this._cache={}}publish(e,t,n){if(this._cache[e]){const i=this._cache[e];if(void 0!==i.global){const e=i.global,s=e.length;for(let i=0;i<s;i++)e[i].apply(n||null,t||[])}if(n&&void 0!==n.getInstanceId){const i=n.getInstanceId();if(this._cache[e][i]){const s=this._cache[e][i],r=s.length;for(let e=0;e<r;e++)s[e].apply(n,t||[])}}}}subscribe(e,t,n){return this._cache[e]||(this._cache[e]={}),"string"==typeof n?(this._cache[e][n]||(this._cache[e][n]=[]),this._cache[e][n].push(t)):(this._cache[e].global||(this._cache[e].global=[]),this._cache[e].global.push(t)),n?[e,t,n]:[e,t]}unsubscribe(e,t){const n=e[0];if(this._cache[n]){let i;const s=3===e.length?e[2]:"global";if(!(i=this._cache[n][s]))return!1;if(t)return delete this._cache[n][s],i.length>0;let r=i.length;for(;r--;)if(i[r]===e[1])return this._cache[n][s].splice(r,1),!0}return!1}unsubscribeAll(e){if(e){const t=Object.keys(this._cache);let n,i=t.length;for(;i--;)n=t[i],void 0!==this._cache[n][e]&&delete this._cache[n][e]}else this._cache={}}}},d=function(e,t){e.addEventListener("dblclick",(function(e){e.ctrlKey||t(e,b(e.currentTarget,e))}));const n=y(g);e.addEventListener("contextmenu",(function(e){e.preventDefault(),e.ctrlKey&&(n.isTriggered()?(n.reset(),t(e,b(e.currentTarget,e))):n.trigger())}))},h=function(e,t){let n=0;e.addEventListener("touchstart",(function(e){e.preventDefault(),2===e.originalEvent.touches.length&&(n=v(e.originalEvent.touches[0].clientX,e.originalEvent.touches[0].clientY,e.originalEvent.touches[1].clientX,e.originalEvent.touches[1].clientY))})),e.addEventListener("touchmove",(function(e){if(e.preventDefault(),2===e.originalEvent.touches.length){const i=e.originalEvent.touches,s=v(i[0].clientX,i[0].clientY,i[1].clientX,i[1].clientY),r=s-n;if(Math.abs(r)>0){const r={pageX:(i[0].clientX+i[1].clientX)/2,pageY:(i[0].clientY+i[1].clientY)/2};t(e,b(e.currentTarget,r),n,s)}}}))},f=function(e,t){const n=y(m);let i=null;e.addEventListener("touchend",e=>{if(e.preventDefault(),n.isTriggered()){n.reset();const s={pageX:e.originalEvent.changedTouches[0].clientX,pageY:e.originalEvent.changedTouches[0].clientY};v(i.pageX,i.pageY,s.pageX,s.pageY)<p&&t(e,b(e.currentTarget,s)),i=null}else i={pageX:e.originalEvent.changedTouches[0].clientX,pageY:e.originalEvent.changedTouches[0].clientY},n.trigger()})};const g=500,p=50,m=250;function v(e,t,n,i){return Math.sqrt((n-e)*(n-e)+(i-t)*(i-t))}function y(e){let t=!1,n=null;return{trigger(){t=!0,i(),n=setTimeout((function(){t=!1,n=null}),e)},isTriggered:()=>t,reset(){t=!1,i()}};function i(){null!==n&&(clearTimeout(n),n=null)}}function b(e,t){const n=e.getBoundingClientRect();return{left:t.pageX-n.left,top:t.pageY-n.top}}var w=n(0),_=n.n(w);class E{constructor(e,t){this.page=e,this._viewerCore=t,this._innerElement=this._viewerCore.getSettings().innerElement,this._pageToolsElem=null,this.labelWidth=0}mount(){null===this._pageToolsElem&&(this._buttons=this._initializePageToolButtons(),this._pageToolsElem=i("div",{class:"diva-page-tools-wrapper"},i("div",{class:"diva-page-tools"},this._buttons)),this._pageLabelsElem=i("div",{class:"diva-page-labels-wrapper"},i("div",{class:"diva-page-labels"},this._viewerCore.settings.manifest.pages[this.page].l))),this.refresh(),this._innerElement.appendChild(this._pageToolsElem),this._innerElement.appendChild(this._pageLabelsElem)}_initializePageToolButtons(){const e=this._viewerCore.getSettings(),t=this._viewerCore.getPublicInstance(),n=this.page;return this._viewerCore.getPageTools().map(i=>{const s=i.pageToolsIcon.cloneNode(!0);return s.addEventListener("click",s=>{i.handleClick.call(i,s,e,t,n)},!1),s.addEventListener("touchend",s=>{s.preventDefault(),i.handleClick.call(i,s,e,t,n)},!1),s})}unmount(){this._innerElement.removeChild(this._pageToolsElem),this._innerElement.removeChild(this._pageLabelsElem)}refresh(){const e=this._viewerCore.getPageRegion(this.page,{includePadding:!0,incorporateViewport:!0});let t=window.getComputedStyle(this._innerElement,null).getPropertyValue("margin-left");this._pageToolsElem.style.top=e.top+"px",this._pageToolsElem.style.left=e.left-parseInt(t)+"px",this._pageLabelsElem.style.top=e.top+"px",this._pageLabelsElem.style.left=e.right-parseInt(t)-this.labelWidth-5+"px"}}class S{constructor(e){if(this._viewerCore=e,this._viewerState=e.getInternalState(),this._overlays=[],this._viewerCore.getPageTools().length){const t=e.getSettings().numPages;for(let n=0;n<t;n++){const t=new E(n,e);this._overlays.push(t),this._viewerCore.addPageOverlay(t);let i=document.createElement("span");i.innerHTML=e.settings.manifest.pages[n].l,i.classList.add("diva-page-labels"),i.setAttribute("style","display: inline-block;"),document.body.appendChild(i);let s=i.clientWidth;document.body.removeChild(i),t.labelWidth=s}}}onDoubleClick(e,t){const n=this._viewerCore.getSettings(),i=e.ctrlKey?n.zoomLevel-1:n.zoomLevel+1,s=this._viewerCore.getPagePositionAtViewportOffset(t);this._viewerCore.zoom(i,s)}onPinch(e,t,n,i){const s=this._viewerCore.getInternalState(),r=this._viewerCore.getSettings();let o=Math.log(Math.pow(2,r.zoomLevel)*i/(n*Math.log(2)))/Math.log(2);if(o=Math.max(r.minZoomLevel,o),(o=Math.min(r.maxZoomLevel,o))===r.zoomLevel)return;const a=this._viewerCore.getPagePositionAtViewportOffset(t),c=this._viewerCore.getCurrentLayout().getPageToViewportCenterOffset(a.anchorPage,s.viewport),l=1/Math.pow(2,r.zoomLevel-o);this._viewerCore.reload({zoomLevel:o,goDirectlyTo:a.anchorPage,horizontalOffset:c.x-a.offset.left+a.offset.left*l,verticalOffset:c.y-a.offset.top+a.offset.top*l})}onViewWillLoad(){this._viewerCore.publish("DocumentWillLoad",this._viewerCore.getSettings())}onViewDidLoad(){this._handleZoomLevelChange();const e=this._viewerCore.getSettings().activePageIndex,t=this._viewerCore.getPageName(e);this._viewerCore.publish("DocumentDidLoad",e,t)}onViewDidUpdate(e,t){const n=null!==t?t:function(e,t,n){const i=n.top+n.height/2,s=n.left+n.width/2,r=_()(e,e=>{const n=t.getPageDimensions(e),r=t.getPageOffset(e,{includePadding:!0}),o=r.left+n.width/2,a=r.top+n.height/2,c=Math.max(Math.abs(s-o)-n.width/2,0),l=Math.max(Math.abs(i-a)-n.height/2,0);return-(c*c+l*l)});return null!=r?r:null}(e,this._viewerCore.getCurrentLayout(),this._viewerCore.getViewport());let i=this._viewerState.viewport.intersectionTolerance;this._viewerState.viewport.intersectionTolerance=0;let s=e.filter(e=>this._viewerState.renderer.isPageVisible(e));this._viewerState.viewport.intersectionTolerance=i,null!==n&&this._viewerCore.setCurrentPages(n,s),null!==t&&this._viewerCore.publish("ViewerDidJump",t),this._handleZoomLevelChange()}_handleZoomLevelChange(){const e=this._viewerState,t=e.options.zoomLevel;e.oldZoomLevel!==t&&e.oldZoomLevel>=0&&(e.oldZoomLevel<t?this._viewerCore.publish("ViewerDidZoomIn",t):this._viewerCore.publish("ViewerDidZoomOut",t),this._viewerCore.publish("ViewerDidZoom",t)),e.oldZoomLevel=t}destroy(){this._overlays.forEach(e=>{this._viewerCore.removePageOverlay(e)},this)}}class L{constructor(e){this._viewerCore=e}onDoubleClick(e,t){const n=this._viewerCore.getPagePositionAtViewportOffset(t),i=this._viewerCore.getCurrentLayout(),s=this._viewerCore.getViewport(),r=i.getPageToViewportCenterOffset(n.anchorPage,s);this._viewerCore.reload({inGrid:!1,goDirectlyTo:n.anchorPage,horizontalOffset:r.x+n.offset.left,verticalOffset:r.y+n.offset.top})}onPinch(){this._viewerCore.reload({inGrid:!1})}onViewWillLoad(){}onViewDidLoad(){}onViewDidUpdate(e,t){if(0===e.length)return;let n=this._viewerCore.viewerState.viewport.intersectionTolerance;this._viewerCore.viewerState.viewport.intersectionTolerance=0;let i=e.filter(e=>this._viewerCore.viewerState.renderer.isPageVisible(e));if(this._viewerCore.viewerState.viewport.intersectionTolerance=n,null!==t)return void this._viewerCore.setCurrentPages(t,i);const s=this._viewerCore.getCurrentLayout(),r=[];e.forEach(e=>{const t=s.getPageInfo(e).group;0!==r.length&&t===r[r.length-1]||r.push(t)});const o=this._viewerCore.getViewport();let a;a=1===r.length||r[0].region.top>=o.top?r[0]:r[1].region.bottom<=o.bottom?r[1]:function(e,t){const n=t.top+t.height/2;return _()(e,e=>{const t=e.region.top+e.dimensions.height/2;return-Math.abs(n-t)})}(r,o);const c=this._viewerCore.getSettings().activePageIndex;a.pages.some(e=>e.index===c)||this._viewerCore.setCurrentPages(a.pages[0].index,i)}destroy(){}}class x{constructor(){this._pages={},this._renderedPages=[],this._renderedPageMap={}}addOverlay(e){(this._pages[e.page]||(this._pages[e.page]=[])).push(e),this._renderedPageMap[e.page]&&e.mount()}removeOverlay(e){const t=e.page,n=this._pages[t];if(!n)return;const i=n.indexOf(e);-1!==i&&(this._renderedPageMap[t]&&n[i].unmount(),n.splice(i,1),0===n.length&&delete this._pages[t])}updateOverlays(e){const t=this._renderedPages,n={};e.map(e=>{n[e]=!0,this._renderedPageMap[e]||(this._renderedPageMap[e]=!0,this._invokeOnOverlays(e,e=>{e.mount()}))}),t.map(e=>{n[e]?this._invokeOnOverlays(e,e=>{e.refresh()}):(delete this._renderedPageMap[e],this._invokeOnOverlays(e,e=>{e.unmount()}))}),this._renderedPages=e}_invokeOnOverlays(e,t){const n=this._pages[e];n&&n.map(e=>t(e))}}class k{constructor(e,t){this._rows=e,this._cols=t,this._map=new Array(e).fill(null).map(()=>new Array(t).fill(!1))}isLoaded(e,t){return e>=this._rows||t>=this._cols||this._map[e][t]}set(e,t,n){this._map[e][t]=n}}class A{constructor(e){this._levels=e;const t=this._urlsToTiles={};e.forEach(e=>{e.tiles.forEach(n=>{t[n.url]={zoomLevel:e.zoomLevel,row:n.row,col:n.col}})}),this.clear()}clear(){const e=this._loadedByLevel={};this._levels.forEach(t=>{e[t.zoomLevel]=new k(t.rows,t.cols)})}getTiles(e){const t=[],n=this._levels[0].zoomLevel,i=new k(this._levels[0].rows,this._levels[0].cols);let s;if(null===e)s=0;else{const t=Math.ceil(e);s=function(e,t){const n=e.length;for(let i=0;i<n;i++)if(t(e[i]))return i;return-1}(this._levels,e=>e.zoomLevel<=t)}this._levels.slice(0,s+1).reverse().concat(this._levels.slice(s+1)).forEach(e=>{const s=this._loadedByLevel[e.zoomLevel];let r=e.tiles.filter(e=>s.isLoaded(e.row,e.col));const o=Math.pow(2,n-e.zoomLevel);r=r.filter(e=>{let t=!1;const n=e.row*o,s=e.col*o;for(let e=0;e<o;e++)for(let r=0;r<o;r++)i.isLoaded(n+e,s+r)||(t=!0,i.set(n+e,s+r,!0));return t}),t.push(r)},this),t.reverse();const r=[];return t.forEach(e=>{r.push.apply(r,e)}),r}updateFromCache(e){this.clear(),this._levels.forEach(t=>{const n=this._loadedByLevel[t.zoomLevel];t.tiles.forEach(t=>{e.has(t.url)&&n.set(t.row,t.col,!0)})},this)}updateWithLoadedUrls(e){e.forEach(e=>{const t=this._urlsToTiles[e];this._loadedByLevel[t.zoomLevel].set(t.row,t.col,!0)},this)}}class C{constructor(e,t){const n=function(e,t){const n=null===t?e.pageLayouts:function(e,t){const n=Math.pow(2,t-e.maxZoomLevel);return e.pageLayouts.map(e=>({dimensions:P(e.dimensions,n),pages:e.pages.map(e=>({index:e.index,groupOffset:{top:Math.floor(e.groupOffset.top*n),left:Math.floor(e.groupOffset.left*n)},dimensions:P(e.dimensions,n)}))}))}(e,t),i=function(e,t){let n,i;const s=e.padding.document;return e.verticallyOriented?(n="width",i=s.left+s.right):(n="height",i=s.top+s.bottom),i+t.reduce((e,t)=>Math.max(t.dimensions[n],e),0)}(e,n);let s=e.verticallyOriented?e.padding.document.top:e.padding.document.left;const r=[],o={top:e.padding.page.top,left:e.padding.page.left};let a,c;return n.forEach((t,n)=>{let a,c;e.verticallyOriented?(a=s,c=(i-t.dimensions.width)/2):(a=(i-t.dimensions.height)/2,c=s);const l={top:a,bottom:a+o.top+t.dimensions.height,left:c,right:c+o.left+t.dimensions.width};r.push({index:n,dimensions:t.dimensions,pages:t.pages,region:l,padding:o}),s=e.verticallyOriented?l.bottom:l.right}),e.verticallyOriented?(a=s+o.top,c=i):(a=i,c=s+o.left),{dimensions:{height:a,width:c},pageGroups:r}}(e,t);this.dimensions=n.dimensions,this.pageGroups=n.pageGroups,this._pageLookup=function(e){const t={};return e.forEach(e=>{e.pages.forEach(n=>{t[n.index]={index:n.index,group:e,dimensions:n.dimensions,groupOffset:n.groupOffset}})}),t}(n.pageGroups)}getPageInfo(e){return this._pageLookup[e]||null}getPageDimensions(e){if(!this._pageLookup||!this._pageLookup[e])return null;const t=I(this._pageLookup[e]);return{height:t.bottom-t.top,width:t.right-t.left}}getPageOffset(e,t){const n=this.getPageRegion(e,t);return n?{top:n.top,left:n.left}:null}getPageRegion(e,t){const n=this._pageLookup[e];if(!n)return null;const i=I(n),s=n.group.padding;return t&&t.includePadding?{top:i.top+s.top,left:i.left+s.left,bottom:i.bottom,right:i.right}:{top:i.top,left:i.left,bottom:i.bottom+s.top,right:i.right}}getPageToViewportCenterOffset(e,t){const n=t.left,i=t.right-t.left,s=this.getPageOffset(e),r=n-s.left+parseInt(i/2,10),o=t.top,a=t.bottom-t.top;return{x:r,y:o-s.top+parseInt(a/2,10)}}}function I(e){const t=e.groupOffset.top+e.group.region.top,n=t+e.dimensions.height,i=e.groupOffset.left+e.group.region.left;return{top:t,bottom:n,left:i,right:i+e.dimensions.width}}function P(e,t){return{height:Math.floor(e.height*t),width:Math.floor(e.width*t)}}const O=n(1)("diva:ImageCache");class B{constructor(e){e=e||{maxKeys:100},this.maxKeys=e.maxKeys||100,this._held={},this._urls={},this._lru=[]}get(e){const t=this._urls[e];return t?t.img:null}has(e){return!!this._urls[e]}put(e,t){let n=this._urls[e];n?(n.img=t,this._promote(n)):(n={img:t,url:e},this._urls[e]=n,this._tryEvict(1),this._lru.unshift(n))}_promote(e){const t=this._lru.indexOf(e);this._lru.splice(t,1),this._lru.unshift(e)}_tryEvict(e){const t=this.maxKeys-e;if(this._lru.length<=t)return;let n=this._lru.length-1;for(;;){const e=this._lru[n];if(!this._held[e.url]&&(O("Evicting image %s",e.url),this._lru.splice(n,1),delete this._urls[e.url],this._lru.length<=t))break;if(0===n){O.enabled&&O("Cache overfull by %s (all entries are being held)",this._lru.length-t);break}n--}}acquire(e){this._held[e]=(this._held[e]||0)+1,this._promote(this._urls[e])}release(e){this._held[e]>1?this._held[e]--:delete this._held[e],this._tryEvict(0)}}class T{constructor(e){this._url=e.url,this._callback=e.load,this._errorCallback=e.error,this.timeoutTime=e.timeoutTime||0,this._aborted=this._complete=!1,this.timeout=setTimeout(()=>{this._image=new Image,this._image.crossOrigin="anonymous",this._image.onload=this._handleLoad.bind(this),this._image.onerror=this._handleError.bind(this),this._image.src=e.url},this.timeoutTime)}abort(){clearTimeout(this.timeout),this._image&&(this._image.onload=this._image.onerror=null,this._image.src=""),this._aborted=!0}_handleLoad(){this._aborted?console.error("ImageRequestHandler invoked on cancelled request for "+this._url):this._complete?console.error("ImageRequestHandler invoked on completed request for "+this._url):(this._complete=!0,this._callback(this._image))}_handleError(){this._errorCallback(this._image)}}var N=function(e){const t=e.duration,n=e.parameters,i=e.onUpdate,s=e.onEnd,r=M(),o=r+t,a={},c={},l=Object.keys(n);l.forEach(e=>{const t=n[e];a[e]=function(e,t,n){return i=>e+(t-e)*n(i)}(t.from,t.to,t.easing||q)});let u=requestAnimationFrame((function e(){const n=M();!function(e){l.forEach(t=>{c[t]=a[t](e)})}(Math.min((n-r)/t,1)),i(c),n<o?u=requestAnimationFrame(e):d({interrupted:!1})}));return{cancel(){null!==u&&(cancelAnimationFrame(u),d({interrupted:!0}))}};function d(e){u=null,s&&s(e)}};let M;function q(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1}M="undefined"!=typeof performance&&performance.now?()=>performance.now():()=>Date.now();class j{constructor(e,t){this._viewport=e.viewport,this._outerElement=e.outerElement,this._documentElement=e.innerElement,this._settings=e.settings,this._hooks=t||{},this._canvas=i("canvas",{class:"diva-viewer-canvas"}),this._ctx=this._canvas.getContext("2d"),this.layout=null,this._sourceResolver=null,this._renderedPages=null,this._config=null,this._zoomLevel=null,this._compositeImages=null,this._renderedTiles=null,this._animation=null,this._cache=new B,this._pendingRequests={}}static getCompatibilityErrors(){return"undefined"!=typeof HTMLCanvasElement?null:["Your browser lacks support for the ",i("pre","canvas")," element. Please upgrade your browser."]}load(e,t,n){if(this._clearAnimation(),this._hooks.onViewWillLoad&&this._hooks.onViewWillLoad(),this._sourceResolver=n,this._config=e,this._compositeImages={},this._setLayoutToZoomLevel(t.zoomLevel),!this.layout.getPageInfo(t.anchorPage))throw new Error("invalid page: "+t.anchorPage);this._canvas.width===this._viewport.width&&this._canvas.height===this._viewport.height||(this._canvas.width=this._viewport.width,this._canvas.height=this._viewport.height),this.goto(t.anchorPage,t.verticalOffset,t.horizontalOffset),this._canvas.parentNode!==this._outerElement&&this._outerElement.insertBefore(this._canvas,this._outerElement.firstChild),this._hooks.onViewDidLoad&&this._hooks.onViewDidLoad()}_setViewportPosition(e){if(e.zoomLevel!==this._zoomLevel){if(null===this._zoomLevel)throw new TypeError("The current view is not zoomable");if(null===e.zoomLevel)throw new TypeError("The current view requires a zoom level");this._setLayoutToZoomLevel(e.zoomLevel)}this._goto(e.anchorPage,e.verticalOffset,e.horizontalOffset)}_setLayoutToZoomLevel(e){this.layout=new C(this._config,e),this._zoomLevel=e,r(this._documentElement,{style:{height:this.layout.dimensions.height+"px",width:this.layout.dimensions.width+"px"}}),this._viewport.setInnerDimensions(this.layout.dimensions)}adjust(){this._clearAnimation(),this._render(),this._hooks.onViewDidUpdate&&this._hooks.onViewDidUpdate(this._renderedPages.slice(),null)}_render(){const e=[];this.layout.pageGroups.forEach(t=>{if(!this._viewport.intersectsRegion(t.region))return;const n=t.pages.filter((function(e){return this.isPageVisible(e.index)}),this).map(e=>e.index);e.push.apply(e,n)},this),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._paintOutline(e),e.forEach(e=>{if(!this._compositeImages[e]){const t=this.layout.getPageInfo(e),n=this._sourceResolver.getAllZoomLevelsForPage(t),i=new A(n);i.updateFromCache(this._cache),this._compositeImages[e]=i}},this),this._initiateTileRequests(e);const t=D(this._renderedPages||[],e);t.removed.forEach(e=>{delete this._compositeImages[e]},this),this._renderedPages=e,this._paint(),this._hooks.onPageWillLoad&&t.added.forEach(e=>{this._hooks.onPageWillLoad(e)},this)}_paint(){const e=[];this._renderedPages.forEach(t=>{this._compositeImages[t].getTiles(this._zoomLevel).forEach(n=>{const i=F(n,this._zoomLevel);this._isTileVisible(t,i)&&(e.push(n.url),this._drawTile(t,i,this._cache.get(n.url)))})});const t=this._cache,n=D(this._renderedTiles||[],e);n.added.forEach(e=>{t.acquire(e)}),n.removed.forEach(e=>{t.release(e)}),n.removed&&this._renderedPages.forEach(e=>{this._compositeImages[e].updateFromCache(this._cache)},this),this._renderedTiles=e}_paintOutline(e){e.forEach(e=>{let t=this.layout.getPageInfo(e),n=this._getImageOffset(e),i=Math.max(0,(this._viewport.width-this.layout.dimensions.width)/2),s=Math.max(0,(this._viewport.height-this.layout.dimensions.height)/2),r=n.left-this._viewport.left+i,o=n.top-this._viewport.top+s,a=r<0?-r:0,c=o<0?-o:0,l=Math.max(0,r),u=Math.max(0,o),d=t.dimensions.width-a,h=t.dimensions.height-c;this._ctx.strokeStyle="#AAA",this._ctx.strokeRect(l+.5,u+.5,d,h)})}_initiateTileRequests(e){const t={},n=(e,n)=>{const i=this._compositeImages[n];t[e.url]=new T({url:e.url,timeoutTime:250,load:t=>{delete this._pendingRequests[e.url],this._cache.put(e.url,t),i===this._compositeImages[n]?(i.updateWithLoadedUrls([e.url]),this._isTileForSourceVisible(n,e)&&this._paint()):this._isTileForSourceVisible(n,e)&&this._paint()},error:()=>{delete this._pendingRequests[e.url]}})};for(let i=0;i<e.length;i++){const s=e[i],r=this._sourceResolver.getBestZoomLevelForPage(this.layout.getPageInfo(s)).tiles;for(let e=0;e<r.length;e++){const i=r[e];!this._cache.has(i.url)&&this._isTileForSourceVisible(s,i)&&(this._pendingRequests[i.url]?(t[i.url]=this._pendingRequests[i.url],delete this._pendingRequests[i.url]):n(i,s))}}for(const e in this._pendingRequests)this._pendingRequests[e].abort();this._pendingRequests=t}_drawTile(e,t,n){let i=this._getTileToDocumentOffset(e,t),s=Math.max(0,(this._viewport.width-this.layout.dimensions.width)/2),r=Math.max(0,(this._viewport.height-this.layout.dimensions.height)/2),o=i.left-this._viewport.left+s,a=i.top-this._viewport.top+r,c=o<0?-o:0,l=a<0?-a:0,u=Math.max(0,o),d=Math.max(0,a),h=c/t.scaleRatio,f=l/t.scaleRatio,g=Math.min(t.dimensions.width,n.width*t.scaleRatio)-c,p=Math.min(t.dimensions.height,n.height*t.scaleRatio)-l,m=Math.max(1,Math.round(g)),v=Math.max(1,Math.round(p)),y=m/t.scaleRatio,b=v/t.scaleRatio;this._ctx.drawImage(n,h,f,y,b,u,d,m,v)}_isTileForSourceVisible(e,t){return this._isTileVisible(e,F(t,this._zoomLevel))}_isTileVisible(e,t){const n=this._getTileToDocumentOffset(e,t);return this._viewport.intersectsRegion({top:n.top,bottom:n.top+t.dimensions.height,left:n.left,right:n.left+t.dimensions.width})}_getTileToDocumentOffset(e,t){const n=this._getImageOffset(e);return{top:n.top+t.offset.top,left:n.left+t.offset.left}}_getImageOffset(e){return this.layout.getPageOffset(e,{includePadding:!0})}goto(e,t,n){this._clearAnimation(),this._goto(e,t,n),this._hooks.onViewDidUpdate&&this._hooks.onViewDidUpdate(this._renderedPages.slice(),e)}_goto(e,t,n){const i=this.layout.getPageOffset(e),s=i.top+t-Math.round(this._viewport.height/2),r=i.left+n-Math.round(this._viewport.width/2);this._viewport.top=s,this._viewport.left=r,this._render()}transitionViewportPosition(e){this._clearAnimation();const t=e.getPosition,n=this._hooks.onViewDidTransition;this._animation=N({duration:e.duration,parameters:e.parameters,onUpdate:e=>{this._setViewportPosition(t(e)),this._hooks.onZoomLevelWillChange(e.zoomLevel),n&&n()},onEnd:t=>{e.onEnd&&e.onEnd(t),this._hooks.onViewDidUpdate&&!t.interrupted&&this._hooks.onViewDidUpdate(this._renderedPages.slice(),null)}})}_clearAnimation(){this._animation&&(this._animation.cancel(),this._animation=null)}isPageVisible(e){return!!this.layout&&(!!this.layout.getPageInfo(e)&&this._viewport.intersectsRegion(this.layout.getPageRegion(e)))}getRenderedPages(){return this._renderedPages.slice()}destroy(){this._clearAnimation(),Object.keys(this._pendingRequests).forEach(e=>{const t=this._pendingRequests[e];delete this._pendingRequests[e],t.abort()},this),this._canvas.parentNode.removeChild(this._canvas)}}function F(e,t){let n;return n=null===t?1:Math.pow(2,t-e.zoomLevel),{sourceZoomLevel:e.zoomLevel,scaleRatio:n,row:e.row,col:e.col,dimensions:{width:e.dimensions.width*n,height:e.dimensions.height*n},offset:{left:e.offset.left*n,top:e.offset.top*n},url:e.url}}function D(e,t){if(e===t)return{added:[],removed:[]};const n=e.filter(e=>-1===t.indexOf(e));return{added:t.filter(t=>-1===e.indexOf(t)),removed:n}}function V(e,t){const n=t.getMaxPageDimensions(e);return{width:Math.floor(n.width),height:Math.floor(n.height)}}function R(e){if(e.inGrid)return function(e){const t=e.viewport.width,n=e.manifest,i=e.pagesPerRow,s=e.fixedHeightGrid,r=e.fixedPadding,o=e.showNonPagedPages,a=(t-r*(i+1))/i,c=a,l=s?r+n.minRatio*a:r+n.maxRatio*a,u=[];let d=[];const h={height:l,width:t};return n.pages.forEach((e,t)=>{if(!o&&n.paged&&!e.paged)return;const a=(e=>{const t=e.d[e.d.length-1],n=t.h/t.w;let i,o;return s?(i=(l-r)/n,o=l-r):o=(i=c)*n,{width:Math.round(i),height:Math.round(o)}})(e);let f=Math.floor(d.length*(r+c)+r);s&&(f+=(c-a.width)/2),d.push({index:t,dimensions:a,groupOffset:{top:0,left:f}}),d.length===i&&(u.push({dimensions:h,pages:d}),d=[])}),d.length>0&&u.push({dimensions:h,pages:d}),u}(z(e,["manifest","viewport","pagesPerRow","fixedHeightGrid","fixedPadding","showNonPagedPages"]));{const t=z(e,["manifest","verticallyOriented","showNonPagedPages"]);return e.inBookLayout?function(e){return function(e){const t=e.manifest,n=[];let i=null,s=[];const r=()=>{for(let e=0,t=s.length;e<t;e++)n.push([s[e]]);s=[]};return t.pages.forEach((o,a)=>{const c={index:a,dimensions:V(a,t),paged:!t.paged||o.paged};(e.showNonPagedPages||c.paged)&&(c.paged?0===a||o.facingPages?(n.push([c]),r()):null===i?i=c:(n.push([i,c]),i=null,r()):s.push(c))}),null!==i&&(n.push([i]),r()),n}(e).map(t=>function(e,t){const n=e.verticallyOriented;if(2===t.length)return function(e,t,n){const i=e.dimensions,s=t.dimensions,r=Math.max(i.height,s.height);let o,a,c;if(n){const e=Math.max(i.width,s.width);o=2*e,a=e-i.width,c=e}else o=i.width+s.width,a=0,c=i.width;return{dimensions:{height:r,width:o},pages:[{index:e.index,dimensions:i,groupOffset:{top:0,left:a}},{index:t.index,dimensions:s,groupOffset:{top:0,left:c}}]}}(t[0],t[1],n);const i=t[0],s=i.dimensions;let r;r=i.paged?0===i.index&&n?s.width:0:n?s.width/2:0;const o=n&&!e.manifest.pages[i.index].facingPages;return{dimensions:{height:s.height,width:o?2*s.width:s.width},pages:[{index:i.index,groupOffset:{top:0,left:r},dimensions:s}]}}(e,t))}(t):function(e){const t=e.manifest,n=[];return t.pages.forEach((i,s)=>{if(!e.showNonPagedPages&&t.paged&&!i.paged)return;const r=V(s,t);n.push({dimensions:r,pages:[{index:s,groupOffset:{top:0,left:0},dimensions:r}]})}),n}(t)}}function z(e,t){const n={};return t.forEach((function(t){n[t]=e[t]})),n}class H{constructor(e){this.whitelistedKeys=e.whitelistedKeys||[],this.additionalProperties=e.additionalProperties||[],this.validations=e.validations}isValid(e,t,n){let i=null;if(this.validations.some((t,n)=>t.key===e&&(i=n,!0)),null===i)return!0;const s={};s[e]=t;const r=U(n,s,this);return!this._runValidation(i,t,r)}validate(e){this._validateOptions({},e)}getValidatedOptions(e,t){const n=Object.assign({},t);return this._validateOptions(e,n),n}_validateOptions(e,t){const n=U(e,t,this);this._applyValidations(t,n)}_applyValidations(e,t){this.validations.forEach((n,i)=>{if(!e.hasOwnProperty(n.key))return;const s=e[n.key],r=this._runValidation(i,s,t);r&&(r.warningSuppressed||function(e,t,n){console.warn("Invalid value for "+e+": "+t+". Using "+n+" instead.")}(n.key,s,r.value),e[n.key]=r.value)},this)}_runValidation(e,t,n){const i=this.validations[e];n.index=e;let s=!1;const r={suppressWarning:()=>{s=!0}},o=i.validate(t,n.proxy,r);return void 0===o||o===t?null:{value:o,warningSuppressed:s}}}function U(e,t,n){const i={proxy:{},index:null},s=function(e,t,n){return n in t?t[n]:e[n]}.bind(null,e,t),r={};return n.whitelistedKeys.forEach(e=>{r[e]={get:s.bind(null,e)}}),n.additionalProperties.forEach(e=>{r[e.key]={get:e.get}}),n.validations.forEach((e,t)=>{r[e.key]={get:()=>{if(t<i.index)return s(e.key);const r=n.validations[i.index].key;throw new TypeError("Cannot access setting "+e.key+" while validating "+r)}}}),Object.defineProperties(i.proxy,r),i}class ${constructor(e,t){t=t||{},this.intersectionTolerance=t.intersectionTolerance||0,this.outer=e,this._top=this._left=this._width=this._height=this._innerDimensions=null,this.invalidate()}intersectsRegion(e){return this.hasHorizontalOverlap(e)&&this.hasVerticalOverlap(e)}hasVerticalOverlap(e){const t=this.top-this.intersectionTolerance,n=this.bottom+this.intersectionTolerance;return W(e.top,t,n)||W(e.bottom,t,n)||e.top<=t&&e.bottom>=n}hasHorizontalOverlap(e){const t=this.left-this.intersectionTolerance,n=this.right+this.intersectionTolerance;return W(e.left,t,n)||W(e.right,t,n)||e.left<=t&&e.right>=n}invalidate(){this._width=this.outer.clientWidth,this._height=this.outer.clientHeight,this._top=this.outer.scrollTop,this._left=this.outer.scrollLeft}setInnerDimensions(e){this._innerDimensions=e,e&&(this._top=K(this._top,0,e.height-this._height),this._left=K(this._left,0,e.width-this._width))}}function Z(e,t){const n="_"+e,i="scroll"+e.charAt(0).toUpperCase()+e.slice(1);return{get:function(){return this[n]},set:function(e){let s;s=this._innerDimensions?K(e,0,this._innerDimensions[t]-this[t]):Y(e,0),this[n]=this.outer[i]=s}}}function G(e){return{get:function(){return this["_"+e]}}}function W(e,t,n){return e>=t&&e<=n}function K(e,t,n){return Y(function(e,t){return Math.min(e,t)}(e,n),t)}function Y(e,t){return Math.max(e,t)}Object.defineProperties($.prototype,{top:Z("top","height"),left:Z("left","width"),width:G("width"),height:G("height"),bottom:{get:function(){return this._top+this._height}},right:{get:function(){return this._left+this._width}}});const X=n(1)("diva:ViewerCore");function J(){return J.counter++}J.counter=1;const Q=[{key:"goDirectlyTo",validate:(e,t)=>{if(e<0||e>=t.manifest.pages.length)return 0}},{key:"minPagesPerRow",validate:e=>Math.max(2,e)},{key:"maxPagesPerRow",validate:(e,t)=>Math.max(e,t.minPagesPerRow)},{key:"pagesPerRow",validate:(e,t)=>{if(e<t.minPagesPerRow||e>t.maxPagesPerRow)return t.maxPagesPerRow}},{key:"maxZoomLevel",validate:(e,t,n)=>{if(n.suppressWarning(),e<0||e>t.manifest.maxZoom)return t.manifest.maxZoom}},{key:"minZoomLevel",validate:(e,t,n)=>e>t.manifest.maxZoom?(n.suppressWarning(),0):e<0||e>t.maxZoomLevel?0:void 0},{key:"zoomLevel",validate:(e,t,n)=>e>t.manifest.maxZoom?(n.suppressWarning(),0):e<t.minZoomLevel||e>t.maxZoomLevel?t.minZoomLevel:void 0}];class ee{constructor(e,t,n){this.parentObject=e,this.publicInstance=n,this.viewerState={currentPageIndices:[0],activePageIndex:0,horizontalOffset:0,horizontalPadding:0,ID:null,initialKeyScroll:!1,initialSpaceScroll:!1,innerElement:null,innerObject:{},isActiveDiva:!0,isScrollable:!0,isZooming:!1,loaded:!1,manifest:null,mobileWebkit:!1,numPages:0,oldZoomLevel:-1,options:t,outerElement:null,outerObject:{},pageOverlays:new x,pageTools:[],parentObject:this.parentObject,pendingManifestRequest:null,pluginInstances:[],renderer:null,resizeTimer:-1,scrollbarWidth:0,selector:"",throbberTimeoutID:-1,toolbar:null,verticalOffset:0,verticalPadding:0,viewHandler:null,viewport:null,viewportElement:null,viewportObject:null,zoomDuration:400},this.settings=function(e){const t={};return e.forEach(e=>{!function(e,t){Object.keys(t).forEach(n=>{Object.defineProperty(e,n,{get:()=>t[n],set:()=>{throw new TypeError("Cannot set settings."+n)}})})}(t,e)}),t}([t,this.viewerState]);const s=J();this.viewerState.ID="diva-"+s+"-",this.viewerState.selector=this.settings.ID,Object.defineProperties(this.settings,{panelHeight:{get:()=>this.viewerState.viewport.height},panelWidth:{get:()=>this.viewerState.viewport.width}}),this.optionsValidator=new H({additionalProperties:[{key:"manifest",get:()=>this.viewerState.manifest}],validations:Q}),this.viewerState.scrollbarWidth=function(){let e=document.createElement("p");e.style.width="100%",e.style.height="200px";let t=document.createElement("div");t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.visibility="hidden",t.style.width="200px",t.style.height="150px",t.style.overflow="hidden",t.appendChild(e),document.body.appendChild(t);let n=e.offsetWidth;t.style.overflow="scroll";let i=e.offsetWidth;return n===i&&(i=t.clientWidth),document.body.removeChild(t),n-i}(),this.viewerState.mobileWebkit=void 0!==window.orientation,null===t.hashParamSuffix&&(t.hashParamSuffix=1===s?"":s+"");const r=i("div",this.elemAttrs("inner",{class:"diva-inner"})),o=i("div",this.elemAttrs("viewport"),r),a=i("div",this.elemAttrs("outer"),o,i("div",this.elemAttrs("throbber"),[i("div",{class:"cube cube1"}),i("div",{class:"cube cube2"}),i("div",{class:"cube cube3"}),i("div",{class:"cube cube4"}),i("div",{class:"cube cube5"}),i("div",{class:"cube cube6"}),i("div",{class:"cube cube7"}),i("div",{class:"cube cube8"}),i("div",{class:"cube cube9"})]));this.viewerState.innerElement=r,this.viewerState.viewportElement=o,this.viewerState.outerElement=a,this.viewerState.innerObject=r,this.viewerState.viewportObject=o,this.viewerState.outerObject=a,this.settings.parentObject.append(a),this.viewerState.viewport=new $(this.viewerState.viewportElement,{intersectionTolerance:this.settings.viewportMargin}),this.boundScrollFunction=this.scrollFunction.bind(this),this.boundEscapeListener=this.escapeListener.bind(this),this.initPlugins(),this.handleEvents(),this.showThrobber()}isValidOption(e,t){return this.optionsValidator.isValid(e,t,this.viewerState.options)}elemAttrs(e,t){const n={id:this.settings.ID+e,class:"diva-"+e};return t?Object.assign(n,t):n}getPageData(e,t){return this.settings.manifest.pages[e].d[this.settings.zoomLevel][t]}clearViewer(){this.viewerState.viewport.top=0,clearTimeout(this.viewerState.resizeTimer)}hasChangedOption(e,t){return t in e&&e[t]!==this.settings[t]}escapeListener(e){27===e.keyCode&&this.publicInstance.leaveFullscreenMode()}reloadViewer(e){const t=[];if(e=this.optionsValidator.getValidatedOptions(this.settings,e),this.hasChangedOption(e,"zoomLevel")&&(this.viewerState.oldZoomLevel=this.settings.zoomLevel,this.viewerState.options.zoomLevel=e.zoomLevel,t.push(["ZoomLevelDidChange",e.zoomLevel])),this.hasChangedOption(e,"pagesPerRow")&&(this.viewerState.options.pagesPerRow=e.pagesPerRow,t.push(["GridRowNumberDidChange",e.pagesPerRow])),this.hasChangedOption(e,"verticallyOriented")&&(this.viewerState.options.verticallyOriented=e.verticallyOriented),this.hasChangedOption(e,"showNonPagedPages")&&(this.viewerState.options.showNonPagedPages=e.showNonPagedPages),"goDirectlyTo"in e?(this.viewerState.options.goDirectlyTo=e.goDirectlyTo,"verticalOffset"in e&&(this.viewerState.verticalOffset=e.verticalOffset),"horizontalOffset"in e&&(this.viewerState.horizontalOffset=e.horizontalOffset)):this.viewerState.options.goDirectlyTo=this.settings.activePageIndex,(this.hasChangedOption(e,"inGrid")||this.hasChangedOption(e,"inBookLayout"))&&("inGrid"in e&&(this.viewerState.options.inGrid=e.inGrid),"inBookLayout"in e&&(this.viewerState.options.inBookLayout=e.inBookLayout),t.push(["ViewDidSwitch",this.settings.inGrid])),this.hasChangedOption(e,"inFullscreen")&&(this.viewerState.options.inFullscreen=e.inFullscreen,this.prepareModeChange(e),t.push(["ModeDidSwitch",this.settings.inFullscreen])),this.clearViewer(),this.updateViewHandlerAndRendering(),this.viewerState.renderer){const e={pageLayouts:R(this.settings),padding:this.getPadding(),maxZoomLevel:this.settings.inGrid?null:this.viewerState.manifest.maxZoom,verticallyOriented:this.settings.verticallyOriented||this.settings.inGrid},t={zoomLevel:this.settings.inGrid?null:this.settings.zoomLevel,anchorPage:this.settings.goDirectlyTo,verticalOffset:this.viewerState.verticalOffset,horizontalOffset:this.viewerState.horizontalOffset},n=this.getCurrentSourceProvider();if(X.enabled){const t=Object.keys(e).filter((function(e){return"pageLayouts"!==e&&"padding"!==e})).map((function(t){const n=e[t];return t+": "+JSON.stringify(n)})).join(", ");X("reload with %s",t)}this.viewerState.renderer.load(e,t,n)}return t.forEach(e=>{this.publish.apply(this,e)}),!0}prepareModeChange(e){const t=e.inFullscreen?"add":"remove";this.viewerState.outerObject.classList[t]("diva-fullscreen"),document.body.classList[t]("diva-hide-scrollbar"),this.settings.parentObject.classList[t]("diva-full-width");const n=this.settings.panelHeight,i=this.settings.panelWidth;if(this.viewerState.viewport.invalidate(),!(this.viewerState.loaded||this.settings.inGrid||"verticalOffset"in e)){const e=this.settings.panelHeight,t=this.settings.panelWidth;this.viewerState.verticalOffset+=(n-e)/2,this.viewerState.horizontalOffset+=(i-t)/2}e.inFullscreen?document.addEventListener("keyup",this.boundEscapeListener):document.removeEventListener("keyup",this.boundEscapeListener)}updateViewHandlerAndRendering(){const e=this.settings.inGrid?L:S;!this.viewerState.viewHandler||this.viewerState.viewHandler instanceof e||(this.viewerState.viewHandler.destroy(),this.viewerState.viewHandler=null),this.viewerState.viewHandler||(this.viewerState.viewHandler=new e(this)),this.viewerState.renderer||this.initializeRenderer()}initializeRenderer(){const e=j.getCompatibilityErrors();if(e)this.showError(e);else{const e={viewport:this.viewerState.viewport,outerElement:this.viewerState.outerElement,innerElement:this.viewerState.innerElement,settings:this.settings},t={onViewWillLoad:()=>{this.viewerState.viewHandler.onViewWillLoad()},onViewDidLoad:()=>{this.updatePageOverlays(),this.viewerState.viewHandler.onViewDidLoad()},onViewDidUpdate:(e,t)=>{this.updatePageOverlays(),this.viewerState.viewHandler.onViewDidUpdate(e,t)},onViewDidTransition:()=>{this.updatePageOverlays()},onPageWillLoad:e=>{this.publish("PageWillLoad",e)},onZoomLevelWillChange:e=>{this.publish("ZoomLevelWillChange",e)}};this.viewerState.renderer=new j(e,t)}}getCurrentSourceProvider(){if(this.settings.inGrid){const e={getAllZoomLevelsForPage:t=>[e.getBestZoomLevelForPage(t)],getBestZoomLevelForPage:e=>({zoomLevel:1,rows:1,cols:1,tiles:[{url:this.settings.manifest.getPageImageURL(e.index,{width:e.dimensions.width}),zoomLevel:1,row:0,col:0,dimensions:e.dimensions,offset:{top:0,left:0}}]})};return e}const e={width:this.settings.tileWidth,height:this.settings.tileHeight};return{getBestZoomLevelForPage:t=>this.settings.manifest.getPageImageTiles(t.index,Math.ceil(this.settings.zoomLevel),e),getAllZoomLevelsForPage:t=>{const n=[],i=this.viewerState.manifest.maxZoom;for(let s=0;s<=i;s++)n.push(this.settings.manifest.getPageImageTiles(t.index,s,e));return n.reverse(),n}}}getPadding(){let e,t,n,i;return this.settings.inGrid?(n=this.settings.fixedPadding,e=t=i=0):(e=this.settings.verticallyOriented?this.viewerState.verticalPadding:0,t=this.settings.verticallyOriented?0:this.viewerState.horizontalPadding,n=this.settings.verticallyOriented?0:this.viewerState.verticalPadding,i=this.settings.verticallyOriented?this.viewerState.horizontalPadding:0),{document:{top:n,bottom:n,left:i,right:i},page:{top:e,bottom:0,left:t,right:0}}}updatePageOverlays(){this.viewerState.pageOverlays.updateOverlays(this.viewerState.renderer.getRenderedPages())}handleZoom(e,t){if(!this.isValidOption("zoomLevel",e))return!1;if(this.viewerState.viewportObject.removeEventListener("scroll",this.boundScrollFunction),!t){const e=this.viewerState.viewport,n=this.viewerState.renderer.layout.getPageRegion(this.settings.activePageIndex);t={anchorPage:this.settings.activePageIndex,offset:{left:e.width/2-(n.left-e.left),top:e.height/2-(n.top-e.top)}}}const n=this.viewerState.renderer.layout.getPageRegion(t.anchorPage),i=n.left+t.offset.left-(this.settings.viewport.left+this.settings.viewport.width/2),s=n.top+t.offset.top-(this.settings.viewport.top+this.settings.viewport.height/2),r=(e,n)=>{const r=Math.pow(2,e-n),o=t.offset.left*r-i,a=t.offset.top*r-s;return{zoomLevel:e,anchorPage:t.anchorPage,verticalOffset:a,horizontalOffset:o}};this.viewerState.options.zoomLevel=e;let o=this.viewerState.oldZoomLevel;this.viewerState.oldZoomLevel=this.settings.zoomLevel;const a=r(e,o);this.viewerState.options.goDirectlyTo=a.anchorPage,this.viewerState.verticalOffset=a.verticalOffset,this.viewerState.horizontalOffset=a.horizontalOffset,this.viewerState.renderer.transitionViewportPosition({duration:this.settings.zoomDuration,parameters:{zoomLevel:{from:o,to:e}},getPosition:e=>r(e.zoomLevel,o),onEnd:t=>{this.viewerState.viewportObject.addEventListener("scroll",this.boundScrollFunction),t.interrupted&&(this.viewerState.oldZoomLevel=e)}});let c=document.getElementById(this.settings.selector+"zoom-in-button"),l=document.getElementById(this.settings.selector+"zoom-out-button");return c.disabled=!0,l.disabled=!0,setTimeout(()=>{c.disabled=!1,l.disabled=!1},this.settings.zoomDuration),this.publish("ZoomLevelDidChange",e),!0}getYOffset(e,t){let n=void 0===e?this.settings.activePageIndex:e;return"center"===t||"centre"===t?parseInt(this.getPageData(n,"h")/2,10):"bottom"===t?parseInt(this.getPageData(n,"h")-this.settings.panelHeight/2,10):parseInt(this.settings.panelHeight/2,10)}getXOffset(e,t){let n=void 0===e?this.settings.activePageIndex:e;return"left"===t?parseInt(this.settings.panelWidth/2,10):"right"===t?parseInt(this.getPageData(n,"w")-this.settings.panelWidth/2,10):parseInt(this.getPageData(n,"w")/2,10)}updatePanelSize(){return this.viewerState.viewport.invalidate(),this.viewerState.renderer&&(this.updateOffsets(),this.viewerState.renderer.goto(this.settings.activePageIndex,this.viewerState.verticalOffset,this.viewerState.horizontalOffset)),!0}updateOffsets(){const e=this.viewerState.renderer.layout.getPageToViewportCenterOffset(this.settings.activePageIndex,this.viewerState.viewport);e&&(this.viewerState.horizontalOffset=e.x,this.viewerState.verticalOffset=e.y)}bindMouseEvents(){this.viewerState.viewportObject.classList.add("dragscroll"),d(this.viewerState.viewportObject,(e,t)=>{X("Double click at %s, %s",t.left,t.top),this.viewerState.viewHandler.onDoubleClick(e,t)})}onResize(){this.updatePanelSize(),clearTimeout(this.viewerState.resizeTimer),this.viewerState.resizeTimer=setTimeout(()=>{const e=this.viewerState.renderer.layout.getPageToViewportCenterOffset(this.settings.activePageIndex,this.viewerState.viewport);e?this.reloadViewer({goDirectlyTo:this.settings.activePageIndex,verticalOffset:e.y,horizontalOffset:e.x}):this.reloadViewer({goDirectlyTo:this.settings.activePageIndex})},200)}bindTouchEvents(){this.settings.blockMobileMove&&document.body.addEventListener("touchmove",e=>(e.originalEvent.preventDefault(),!1)),h(this.viewerState.viewportObject,(function(e,t,n,i){X("Pinch %s at %s, %s",i-n,t.left,t.top),this.viewerState.viewHandler.onPinch(e,t,n,i)})),f(this.viewerState.viewportObject,(function(e,t){X("Double tap at %s, %s",t.left,t.top),this.viewerState.viewHandler.onDoubleClick(e,t)}))}scrollFunction(){const e=this.viewerState.viewport.top,t=this.viewerState.viewport.left;let n;this.viewerState.viewport.invalidate();const i=this.viewerState.viewport.top,s=this.viewerState.viewport.left;n=this.settings.verticallyOriented||this.settings.inGrid?i-e:s-t,this.viewerState.renderer.adjust();const r=this.settings.verticallyOriented||this.settings.inGrid?i:s;this.publish("ViewerDidScroll",r),n>0?this.publish("ViewerDidScrollDown",r):n<0&&this.publish("ViewerDidScrollUp",r),this.updateOffsets()}handleEvents(){this.viewerState.innerObject.addEventListener("mousedown",()=>{this.viewerState.innerObject.classList.add("diva-grabbing")}),this.viewerState.innerObject.addEventListener("mouseup",()=>{this.viewerState.innerObject.classList.remove("diva-grabbing")}),this.bindMouseEvents(),this.viewerState.viewportObject.addEventListener("scroll",this.boundScrollFunction),document.addEventListener("keydown.diva",e=>{if(!this.viewerState.isActiveDiva)return!0;if(this.settings.enableSpaceScroll&&!e.shiftKey&&32===e.keyCode||this.settings.enableKeyScroll&&34===e.keyCode)return this.viewerState.viewport.top+=this.settings.panelHeight,!1;if(this.settings.enableSpaceScroll||32!==e.keyCode||e.preventDefault(),this.settings.enableKeyScroll){if(e.shiftKey||e.ctrlKey||e.metaKey)return!0;switch(e.keyCode){case 33:return this.viewerState.viewport.top-=this.settings.panelHeight,!1;case 38:return this.viewerState.viewport.top-=this.settings.arrowScrollAmount,!1;case 40:return this.viewerState.viewport.top+=this.settings.arrowScrollAmount,!1;case 37:return this.viewerState.viewport.left-=this.settings.arrowScrollAmount,!1;case 39:return this.viewerState.viewport.left+=this.settings.arrowScrollAmount,!1;case 36:return this.viewerState.viewport.top=0,!1;case 35:return this.settings.verticallyOriented?this.viewerState.viewport.top=1/0:this.viewerState.viewport.left=1/0,!1;default:return!0}}return!0}),u.Events.subscribe("ViewerDidTerminate",(function(){document.removeEventListener("keydown.diva")}),this.settings.ID),window.addEventListener("resize",this.onResize.bind(this),!1),u.Events.subscribe("ViewerDidTerminate",(function(){window.removeEventListener("resize",this.onResize,!1)}),this.settings.ID),"onorientationchange"in window&&(window.addEventListener("orientationchange",this.onResize,!1),u.Events.subscribe("ViewerDidTerminate",(function(){window.removeEventListener("orientationchange",this.onResize,!1)}),this.settings.ID)),u.Events.subscribe("PanelSizeDidChange",this.updatePanelSize,this.settings.ID),u.Events.subscribe("ViewerDidTerminate",()=>{this.viewerState.renderer&&this.viewerState.renderer.destroy(),clearTimeout(this.viewerState.resizeTimer)},this.settings.ID)}initPlugins(){if(!this.settings.hasOwnProperty("plugins"))return null;this.viewerState.pluginInstances=this.settings.plugins.map(e=>{const t=new e(this);return t.isPageTool&&this.viewerState.pageTools.push(t),t})}showThrobber(){this.hideThrobber(),this.viewerState.throbberTimeoutID=setTimeout(()=>{let e=document.getElementById(this.settings.selector+"throbber");e&&(e.style.display="block")},this.settings.throbberTimeout)}hideThrobber(){clearTimeout(this.viewerState.throbberTimeoutID);let e=document.getElementById(this.settings.selector+"throbber");e&&(e.style.display="none")}showError(e){const t=i("div",this.elemAttrs("error"),[i("button",this.elemAttrs("error-close",{"aria-label":"Close dialog"})),i("p",i("strong","Error")),i("div",e)]);this.viewerState.outerObject.appendChild(t),document.querySelector(this.settings.selector+"error-close").addEventListener("click",()=>{t.parentNode.removeChild(t)})}setManifest(e,t){if(this.viewerState.manifest=e,this.hideThrobber(),this.viewerState.numPages=this.settings.manifest.pages.length,this.optionsValidator.validate(this.viewerState.options),this.publish("NumberOfPagesDidChange",this.settings.numPages),this.settings.adaptivePadding>0){const e=Math.floor((this.settings.minZoomLevel+this.settings.maxZoomLevel)/2);this.viewerState.horizontalPadding=parseInt(this.settings.manifest.getAverageWidth(e)*this.settings.adaptivePadding,10),this.viewerState.verticalPadding=parseInt(this.settings.manifest.getAverageHeight(e)*this.settings.adaptivePadding,10)}else this.viewerState.horizontalPadding=this.settings.fixedPadding,this.viewerState.verticalPadding=this.settings.fixedPadding;let n,s;this.viewerState.pageTools.length&&(this.viewerState.verticalPadding=Math.max(40,this.viewerState.verticalPadding)),this.settings.manifest.paged&&(this.viewerState.options.inBookLayout=!0),this.publish("ObjectDidLoad",this.settings),this.updatePanelSize();let r=!1,o=!1;if(null==t.goDirectlyTo?(t.goDirectlyTo=this.settings.goDirectlyTo,n=s=!0):(n=null==t.horizontalOffset||isNaN(t.horizontalOffset),s=null==t.verticalOffset||isNaN(t.verticalOffset)),n&&(0===t.goDirectlyTo&&this.settings.inBookLayout&&this.settings.verticallyOriented?t.horizontalOffset=this.viewerState.horizontalPadding:(o=!0,t.horizontalOffset=this.getXOffset(t.goDirectlyTo,"center"))),s&&(r=!0,t.verticalOffset=this.getYOffset(t.goDirectlyTo,"top")),this.reloadViewer(t),this.updatePanelSize(),this.settings.enableAutoTitle){let e=document.getElementById(this.settings.selector+"title");e?e.innerHTML=this.settings.manifest.itemTitle:this.settings.parentObject.insertBefore(i("div",this.elemAttrs("title"),[this.settings.manifest.itemTitle]),this.settings.parentObject.firstChild)}this.settings.verticallyOriented?this.viewerState.innerElement.style.minWidth=this.settings.panelWidth+"px":this.viewerState.innerElement.style.minHeight=this.settings.panelHeight+"px",(r||o)&&(r&&(this.viewerState.verticalOffset=this.getYOffset(this.settings.activePageIndex,"top")),o&&(this.viewerState.horizontalOffset=this.getXOffset(this.settings.activePageIndex,"center")),this.viewerState.renderer.goto(this.settings.activePageIndex,this.viewerState.verticalOffset,this.viewerState.horizontalOffset)),this.viewerState.loaded=!0,this.publish("ViewerDidLoad",this.settings)}publish(e){const t=Array.prototype.slice.call(arguments,1);u.Events.publish(e,t,this.publicInstance)}getSettings(){return this.settings}getInternalState(){return this.viewerState}getPublicInstance(){return this.publicInstance}getPageTools(){return this.viewerState.pageTools}getCurrentLayout(){return this.viewerState.renderer?this.viewerState.renderer.layout:null}getViewport(){const e=this.viewerState.viewport;return{top:e.top,left:e.left,bottom:e.bottom,right:e.right,width:e.width,height:e.height}}addPageOverlay(e){this.viewerState.pageOverlays.addOverlay(e)}removePageOverlay(e){this.viewerState.pageOverlays.removeOverlay(e)}getPageRegion(e,t){const n=this.viewerState.renderer.layout,i=n.getPageRegion(e,t);if(t&&t.incorporateViewport){const e=this.settings.verticallyOriented?"width":"height";if(this.viewerState.viewport[e]>n.dimensions[e]){const t=(this.viewerState.viewport[e]-n.dimensions[e])/2;return this.settings.verticallyOriented?{top:i.top,bottom:i.bottom,left:i.left+t,right:i.right+t}:{top:i.top+t,bottom:i.bottom+t,left:i.left,right:i.right}}}return i}getPagePositionAtViewportOffset(e){const t=e.left+this.viewerState.viewport.left,n=e.top+this.viewerState.viewport.top,i=this.viewerState.renderer.getRenderedPages(),s=i.length;for(let e=0;e<s;e++){const s=i[e],r=this.viewerState.renderer.layout.getPageRegion(s);if(r.left<=t&&r.right>=t&&r.top<=n&&r.bottom>=n)return{anchorPage:s,offset:{left:t-r.left,top:n-r.top}}}const r=this.viewerState.renderer.layout.getPageRegion(this.settings.activePageIndex);return{anchorPage:this.settings.activePageIndex,offset:{left:t-r.left,top:n-r.top}}}setCurrentPages(e,t){!function(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}(this.viewerState.currentPageIndices,t)?(this.viewerState.currentPageIndices=t,this.viewerState.activePageIndex!==e&&(this.viewerState.activePageIndex=e,this.publish("ActivePageDidChange",e)),this.publish("VisiblePageDidChange",t),this.viewerState.manifest.pages[e].otherImages.length>0&&this.publish("VisiblePageHasAlternateViews",e)):this.viewerState.activePageIndex!==e&&(this.viewerState.activePageIndex=e,this.publish("ActivePageDidChange",e))}getPageName(e){return this.viewerState.manifest.pages[e].f}reload(e){this.reloadViewer(e)}zoom(e,t){return this.handleZoom(e,t)}enableScrollable(){this.viewerState.isScrollable||(this.bindMouseEvents(),this.enableDragScrollable(),this.viewerState.options.enableKeyScroll=this.viewerState.initialKeyScroll,this.viewerState.options.enableSpaceScroll=this.viewerState.initialSpaceScroll,this.viewerState.viewportElement.style.overflow="auto",this.viewerState.isScrollable=!0)}enableDragScrollable(){this.viewerState.viewportObject.hasAttribute("nochilddrag")&&this.viewerState.viewportObject.removeAttribute("nochilddrag")}disableScrollable(){this.viewerState.isScrollable&&(this.disableDragScrollable(),this.viewerState.outerObject.dblclick=null,this.viewerState.outerObject.contextmenu=null,this.viewerState.viewportElement.style.overflow="hidden",this.viewerState.initialKeyScroll=this.settings.enableKeyScroll,this.viewerState.initialSpaceScroll=this.settings.enableSpaceScroll,this.viewerState.options.enableKeyScroll=!1,this.viewerState.options.enableSpaceScroll=!1,this.viewerState.isScrollable=!1)}disableDragScrollable(){this.viewerState.viewportObject.hasAttribute("nochilddrag")||this.viewerState.viewportObject.setAttribute("nochilddrag","")}clear(){this.clearViewer()}setPendingManifestRequest(e){this.viewerState.pendingManifestRequest=e}destroy(){this.publish("ViewerWillTerminate",this.settings),this.settings.pendingManifestRequest&&this.settings.pendingManifestRequest.abort(),document.body.removeClass("diva-hide-scrollbar"),this.settings.parentObject.parent().empty().removeData("diva"),this.settings.parentObject.parent().removeAttr("style").removeAttr("class"),this.publish("ViewerDidTerminate",this.settings),u.Events.unsubscribeAll(this.settings.ID)}}const te=(e,t)=>{const n=Math.max(e,t);return n<128?0:Math.ceil(Math.log((n+1)/257)/Math.log(2))},ne=(e,t)=>e/Math.pow(2,t),ie=(e,t)=>e.map(e=>{const n=e.width,i=e.height,s=re(e),r="/"!==s.url.slice(-1)?s.url+"/":s.url,o=new Array(t+1);for(let e=0;e<t+1;e++)o[e]={h:Math.floor(ne(i,t-e)),w:Math.floor(ne(n,t-e))};return{f:s.url,url:r,il:e.label||"",d:o}});function se(e){let t=e["@context"];if(!t)return console.error("Invalid IIIF Manifest; No @context found."),null;const n=(e=>"http://iiif.io/api/presentation/2/context.json"===e||Array.isArray(e)&&e.includes("http://iiif.io/api/presentation/2/context.json")?2:Array.isArray(e)&&e.includes("http://iiif.io/api/presentation/3/context.json")?3:2)(t),i=e.sequences?e.sequences[0]:null,s=i?i.canvases:e.items,r=s.length,o=new Array(s.length);let a,c,l,u,d,h,f,g,p,m,v,y,b,w,_,E,S,L=[],x=100,k=0,A=100;for(let e=0;e<r;e++){const t=s[e],n=t.width,i=t.height,r=te(n,i),o=i/n;k=Math.max(o,k),A=Math.min(o,A),x=Math.min(x,r)}const C=new Array(x+1).fill(0),I=new Array(x+1).fill(0),P=new Array(x+1).fill(0),O=new Array(x+1).fill(0);for(let e=0;e<r;e++){if(y=(a=s[e])["@id"]||a.id,b=a.label,L=[],"oa:Choice"===(c=a.images?a.images[0].resource:a.items[0].items[0].body)["@type"]||"Choice"===c.type?(l=c.default||c.items[0],u=c.item||c.items.slice(1),L=ie(u,x)):l=c,p=a.width||l.width,m=a.height||l.height,p<=0||m<=0){console.warn("Invalid width or height for canvas "+b+". Skipping");continue}v=te(p,m),w=l.label||null,h="/"!==(f=re(l)).url.slice(-1)?f.url+"/":f.url,g="http://iiif.io/api/image/2/context.json"===(d=l.service["@context"]||l.service.type)||"ImageService2"===d?2:"http://library.stanford.edu/iiif/image-api/1.1/context.json"===d?1.1:1,_=new Array(x+1);for(let e=0;e<x+1;e++)E=Math.floor(ne(p,x-e)),S=Math.floor(ne(m,x-e)),_[e]={h:S,w:E},C[e]+=E,I[e]+=S,P[e]=Math.max(E,P[e]),O[e]=Math.max(S,O[e]);let t="non-paged"!==a.viewingHint||!!a.behavior&&"non-paged"!==a.behavior[0],n="facing-pages"===a.viewingHint||!!a.behavior&&"facing-pages"===a.behavior[0];o[e]={d:_,m:v,l:b,il:w,f:f.url,url:h,api:g,paged:t,facingPages:n,canvas:y,otherImages:L,xoffset:f.x||null,yoffset:f.y||null}}const B=new Array(x+1),T=new Array(x+1);for(let e=0;e<x+1;e++)B[e]=C[e]/r,T[e]=I[e]/r;const N={a_wid:B,a_hei:T,max_w:P,max_h:O,max_ratio:k,min_ratio:A,t_hei:I,t_wid:C};return{version:n,item_title:function(e){let t,n=e.label,i="object"==typeof n?n[Object.keys(n)[0]][0]:n,s=e.value;return t=Array.isArray(s)?s.map(e=>e[Object.keys(e)[0]]):"object"==typeof s?s[Object.keys(s)[0]]:s,Array.isArray(t)&&(t=t.join(", ")),{label:i,value:t}}(e).label,metadata:e.metadata||null,dims:N,max_zoom:x,pgs:o,paged:"paged"===e.viewingHint||!!e.behaviour&&"paged"===e.behaviour[0]||!!i&&"paged"===i.viewingHint}}function re(e){let t=e["@id"]||e.id;const n=/#xywh=([0-9]+,[0-9]+,[0-9]+,[0-9]+)/;let i="",s=!0;if(/\/([0-9]+,[0-9]+,[0-9]+,[0-9]+)\//.test(t)){const e=t.split("/");i=e[e.length-4]}else n.test(t)?i=n.exec(t)[1]:e.service&&(e.service["@id"]||e.service.id)&&(t=e.service["@id"]||e.service.id,s=!1);s&&(t=t.split("/").slice(0,-4).join("/"));const r={url:t};if(i.length){const e=i.split(",");r.x=parseInt(e[0],10),r.y=parseInt(e[1],10),r.w=parseInt(e[2],10),r.h=parseInt(e[3],10)}return r}class oe{getPageImageURL(e,t,n){let i;i=!n||null==n.width&&null==n.height?"full":(null==n.width?"":n.width)+","+(null==n.height?"":n.height);const s=e.pages[t],r=s.api>1.1?"default":"native";return encodeURI(s.url+"full/"+i+"/0/"+r+".jpg")}getTileImageURL(e,t,n){const i=e.pages[t];let s,r;s=n.row===n.rowCount-1?i.d[n.zoomLevel].h-(n.rowCount-1)*n.tileDimensions.height:n.tileDimensions.height,r=n.col===n.colCount-1?i.d[n.zoomLevel].w-(n.colCount-1)*n.tileDimensions.width:n.tileDimensions.width;const o=Math.pow(2,e.maxZoom-n.zoomLevel);let a=n.col*n.tileDimensions.width*o,c=n.row*n.tileDimensions.height*o;i.hasOwnProperty("xoffset")&&(a+=i.xoffset,c+=i.yoffset);const l=[a,c,r*o,s*o].join(","),u=i.api>1.1?"default":"native";return encodeURI(i.url+l+"/"+r+","+s+"/0/"+u+".jpg")}}class ae{constructor(e,t){this.pages=e.pgs,this.maxZoom=e.max_zoom,this.maxRatio=e.dims.max_ratio,this.minRatio=e.dims.min_ratio,this.itemTitle=e.item_title,this.metadata=e.metadata,this.paged=!!e.paged,this._maxWidths=e.dims.max_w,this._maxHeights=e.dims.max_h,this._averageWidths=e.dims.a_wid,this._averageHeights=e.dims.a_hei,this._totalHeights=e.dims.t_hei,this._totalWidths=e.dims.t_wid,this._urlAdapter=t}static fromIIIF(e){const t=se(e);return new ae(t,new oe)}isPageValid(e,t){return!(!t&&this.paged&&!this.pages[e].paged)&&e>=0&&e<this.pages.length}getMaxPageDimensions(e){const t=this.pages[e].d[this.maxZoom];return{height:t.h,width:t.w}}getPageDimensionsAtZoomLevel(e,t){const n=this.pages[e].d[this.maxZoom],i=function(e,t){return 1/Math.pow(2,e-t)}(this.maxZoom,t);return{height:n.h*i,width:n.w*i}}getPageImageURL(e,t){return this._urlAdapter.getPageImageURL(this,e,t)}getPageImageTiles(e,t,n){const i=this.pages[e];if(!isFinite(t)||t%1!=0)throw new TypeError("Zoom level must be an integer: "+t);const s=Math.ceil(i.d[t].h/n.height),r=Math.ceil(i.d[t].w/n.width),o=[];let a,c,l;for(a=0;a<s;a++)for(c=0;c<r;c++)l=this._urlAdapter.getTileImageURL(this,e,{row:a,col:c,rowCount:s,colCount:r,zoomLevel:t,tileDimensions:n}),o.push({row:a,col:c,zoomLevel:t,dimensions:{height:n.height,width:n.width},offset:{top:a*n.height,left:c*n.width},url:l});return{zoomLevel:t,rows:s,cols:r,tiles:o}}}function ce(e){return function(t){return this[e][t]}}ae.prototype.getMaxWidth=ce("_maxWidths"),ae.prototype.getMaxHeight=ce("_maxHeights"),ae.prototype.getAverageWidth=ce("_averageWidths"),ae.prototype.getAverageHeight=ce("_averageHeights"),ae.prototype.getTotalWidth=ce("_totalWidths"),ae.prototype.getTotalHeight=ce("_totalHeights");class le{constructor(e){this.viewer=e,this.settings=e.settings}_elemAttrs(e,t){const n={id:this.settings.ID+e,class:"diva-"+e};return t?Object.assign(n,t):n}_subscribe(e,t){u.Events.subscribe(e,t,this.settings.ID)}createButton(e,t,n,s){const r=i("button",{type:"button",id:this.settings.ID+e,class:"diva-"+e+" diva-button",title:t});return s&&r.appendChild(s),n&&r.addEventListener("click",n),r}createLabel(e,t,n,s,r){return i("div",{id:this.settings.ID+t,class:e+" diva-label"},[n,i("span",{id:this.settings.ID+s},r)])}createZoomButtons(){let e=this._createZoomOutIcon(),t=this._createZoomInIcon(),n=[this.createButton("zoom-out-button","Zoom Out",()=>{this.viewer.setZoomLevel(this.settings.zoomLevel-1)},e),this.createButton("zoom-in-button","Zoom In",()=>{this.viewer.setZoomLevel(this.settings.zoomLevel+1)},t),this.createLabel("diva-zoom-label","zoom-label","Zoom level: ","zoom-level",this.settings.zoomLevel+1)],s=function(){document.getElementById(this.settings.ID+"zoom-level").textContent=this.settings.zoomLevel+1};return this._subscribe("ZoomLevelDidChange",s),this._subscribe("ViewerDidLoad",s),i("div",{id:this.settings.ID+"zoom-controls",style:"display: none"},n)}createGridControls(){let e=this._createGridMoreIcon(),t=this._createGridFewerIcon(),n=[this.createButton("grid-out-button","Fewer",()=>{this.viewer.setGridPagesPerRow(this.settings.pagesPerRow-1)},t),this.createButton("grid-in-button","More",()=>{this.viewer.setGridPagesPerRow(this.settings.pagesPerRow+1)},e),this.createLabel("diva-grid-label","grid-label","Pages per row: ","pages-per-row",this.settings.pagesPerRow)];return this._subscribe("GridRowNumberDidChange",(function(){document.getElementById(this.settings.ID+"pages-per-row").textContent=this.settings.pagesPerRow})),i("div",{id:this.settings.ID+"grid-controls",style:"display:none"},n)}createPageLabel(){const e=i("span",{id:this.settings.ID+"current-page"}),t=()=>{let t=this.viewer.getCurrentPageIndices(),n=t[0],i=t[t.length-1],s=this.settings.manifest.pages[n].l,r=this.settings.manifest.pages[i].l;n!==i?this.settings.enableIndexAsLabel?e.textContent=n+" - "+i:e.textContent=s+" - "+r:this.settings.enableIndexAsLabel?e.textContent=n:e.textContent=s};return this._subscribe("VisiblePageDidChange",t),this._subscribe("ViewerDidLoad",t),this._subscribe("ViewDidSwitch",t),i("span",{class:"diva-page-label diva-label"},e)}createGotoPageForm(){const e=i("input",{id:this.settings.ID+"goto-page-input",class:"diva-input diva-goto-page-input",autocomplete:"off",type:"text"}),t=i("input",{id:this.settings.ID+"goto-page-submit",class:"diva-button diva-button-text",type:"submit",value:"Go"}),n=i("div",{id:this.settings.ID+"input-suggestions",class:"diva-input-suggestions"}),s=i("form",{id:this.settings.ID+"goto-page",class:"diva-goto-form"},e,t,n);return s.addEventListener("submit",t=>{t.preventDefault();const i=e.value;if(this.settings.onGotoSubmit&&"function"==typeof this.settings.onGotoSubmit){const e=this.settings.onGotoSubmit(i);this.viewer.gotoPageByIndex(e)||window.alert("No page could be found with that label or page number")}else this.viewer.gotoPageByLabel(i)||window.alert("No page could be found with that label or page number");return n.style.display="none",!1}),["input","focus"].forEach(t=>{e.addEventListener(t,()=>{n.innerHTML="";const t=e.value;let s=0;if(this.settings.enableGotoSuggestions&&t){const e=this.settings.manifest.pages;for(let r=0,o=e.length;r<o&&s<10;r++)if(e[r].l.toLowerCase().indexOf(t.toLowerCase())>-1){const t=i("div",{class:"diva-input-suggestion"},e[r].l);n.appendChild(t),s++}s>0&&(n.style.display="block")}else n.style.display="none"})}),e.addEventListener("keydown",t=>{let n;if(13===t.keyCode){const t=document.getElementsByClassName("active")[0];void 0!==t&&(e.value=t.innerText)}if(38===t.keyCode){const e=(n=document.getElementsByClassName("active")[0])?n.previousSibling:void 0;if(void 0!==e)n.classList.remove("active"),null!==e&&e.classList.add("active");else{let e=document.getElementsByClassName("diva-input-suggestion").length-1;document.getElementsByClassName("diva-input-suggestion")[e].classList.add("active")}}else if(40===t.keyCode){const e=(n=document.getElementsByClassName("active")[0])?n.nextSibling:void 0;void 0!==e?(n.classList.remove("active"),null!==e&&e.classList.add("active")):document.getElementsByClassName("diva-input-suggestion")[0].classList.add("active")}}),function(e,t,n,i){e.addEventListener("mousedown",(function(e){for(var t=e.target;t&&t!==this;)t.matches(".diva-input-suggestion")&&i.call(t,e),t=t.parentNode}))}(n,0,0,(function(){e.value=this.textContent,n.style.display="none";let t=new Event("submit",{cancelable:!0});s.dispatchEvent(t)})),e.addEventListener("blur",()=>{n.style.display="none"}),s}createViewMenu(){const e=i("div",this._elemAttrs("view-options")),t=this._createGridViewIcon(),n=this._createBookViewIcon(),s=this._createPageViewIcon(),r=this.createButton("view-icon","Change view",()=>{e.style.display="none"===e.style.display?"block":"none"}),o=t=>{this.viewer.changeView(t),e.style.display="none"},a=()=>{this.settings.inGrid?(r.appendChild(t),r.className="diva-grid-icon diva-view-icon diva-button"):this.settings.inBookLayout?(r.appendChild(n),r.className="diva-book-icon diva-view-icon diva-button"):(r.appendChild(s),r.className="diva-document-icon diva-view-icon diva-button");const i=document.createDocumentFragment();for((this.settings.inGrid||this.settings.inBookLayout)&&i.appendChild(this.createButton("document-icon","Document View",o.bind(null,"document"),s)),!this.settings.inGrid&&this.settings.inBookLayout||i.appendChild(this.createButton("book-icon","Book View",o.bind(null,"book"),n)),this.settings.inGrid||i.appendChild(this.createButton("grid-icon","Grid View",o.bind(null,"grid"),t));e.firstChild;)e.removeChild(e.firstChild);e.appendChild(i)};return document.addEventListener("mouseup",t=>{e!==t.target&&(e.style.display="none")}),this._subscribe("ViewDidSwitch",a),this._subscribe("ObjectDidLoad",a),i("div",this._elemAttrs("view-menu"),r,e)}createFullscreenButton(){let e=this._createFullscreenIcon();return this.createButton("fullscreen-icon","Toggle fullscreen mode",()=>{this.viewer.toggleFullscreenMode()},e)}toggleZoomGridControls(){this.settings.inGrid?(document.getElementById(this.settings.ID+"zoom-controls").style.display="none",document.getElementById(this.settings.ID+"grid-controls").style.display="block"):(document.getElementById(this.settings.ID+"zoom-controls").style.display="block",document.getElementById(this.settings.ID+"grid-controls").style.display="none")}render(){this._subscribe("ViewDidSwitch",this.toggleZoomGridControls),this._subscribe("ObjectDidLoad",this.toggleZoomGridControls);let e=[this.createZoomButtons(),this.createGridControls()],t=[this.createPageLabel(),this.createViewMenu()];this.settings.enableFullscreen&&t.push(this.createFullscreenButton()),this.settings.enableGotoPage&&t.splice(1,0,this.createGotoPageForm());let n=this.viewer.viewerState.pluginInstances;for(let i=0,r=n.length;i<r;i++){let r=n[i];r.toolbarSide&&(r.toolbarIcon=r.createIcon(),r.toolbarIcon&&("right"===r.toolbarSide?t.splice(2,0,r.toolbarIcon):"left"===r.toolbarSide&&e.splice(2,0,r.toolbarIcon),r.toolbarIcon.addEventListener("click",s.bind(this,r))))}function s(e){e.handleClick(this.viewer)}const r=i("div",this._elemAttrs("tools"),i("div",this._elemAttrs("tools-left"),e),i("div",this._elemAttrs("tools-right"),t));this.settings.toolbarParentObject.insertBefore(r,this.settings.toolbarParentObject.firstChild)}_createToolbarIcon(e){let t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttributeNS(null,"viewBox","0 0 25 25"),t.setAttributeNS(null,"x","0px"),t.setAttributeNS(null,"y","0px"),t.setAttributeNS(null,"style","enable-background:new 0 0 48 48;");let n=document.createElementNS("http://www.w3.org/2000/svg","g");return n.setAttributeNS(null,"transform","matrix(1, 0, 0, 1, -12, -12)"),e.forEach(e=>{let t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttributeNS(null,"d",e),n.appendChild(t)}),t.appendChild(n),t}_createZoomOutIcon(){return this._createToolbarIcon(["M19.5,23c-0.275,0-0.5-0.225-0.5-0.5v-1c0-0.275,0.225-0.5,0.5-0.5h7c0.275,0,0.5,0.225,0.5,0.5v1c0,0.275-0.225,0.5-0.5,0.5H19.5z","M37.219,34.257l-2.213,2.212c-0.202,0.202-0.534,0.202-0.736,0l-6.098-6.099c-1.537,0.993-3.362,1.577-5.323,1.577c-5.431,0-9.849-4.418-9.849-9.849c0-5.431,4.418-9.849,9.849-9.849c5.431,0,9.849,4.418,9.849,9.849c0,1.961-0.584,3.786-1.576,5.323l6.098,6.098C37.422,33.722,37.422,34.054,37.219,34.257z M29.568,22.099c0-3.706-3.014-6.72-6.72-6.72c-3.706,0-6.72,3.014-6.72,6.72c0,3.706,3.014,6.72,6.72,6.72C26.555,28.818,29.568,25.805,29.568,22.099z"])}_createZoomInIcon(){return this._createToolbarIcon(["M37.469,34.257l-2.213,2.212c-0.202,0.202-0.534,0.202-0.736,0l-6.098-6.099c-1.537,0.993-3.362,1.577-5.323,1.577c-5.431,0-9.849-4.418-9.849-9.849c0-5.431,4.418-9.849,9.849-9.849c5.431,0,9.849,4.418,9.849,9.849c0,1.961-0.584,3.786-1.576,5.323l6.098,6.098C37.672,33.722,37.672,34.054,37.469,34.257z M29.818,22.099c0-3.706-3.014-6.72-6.72-6.72c-3.706,0-6.72,3.014-6.72,6.72c0,3.706,3.014,6.72,6.72,6.72C26.805,28.818,29.818,25.805,29.818,22.099z M26.5,21H24v-2.5c0-0.275-0.225-0.5-0.5-0.5h-1c-0.275,0-0.5,0.225-0.5,0.5V21h-2.5c-0.275,0-0.5,0.225-0.5,0.5v1c0,0.275,0.225,0.5,0.5,0.5H22v2.5c0,0.275,0.225,0.5,0.5,0.5h1c0.275,0,0.5-0.225,0.5-0.5V23h2.5c0.275,0,0.5-0.225,0.5-0.5v-1C27,21.225,26.775,21,26.5,21z"])}_createGridMoreIcon(){return this._createToolbarIcon(["M29.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z"])}_createGridFewerIcon(){return this._createToolbarIcon(["M25.5,35c-0.275,0-0.5-0.225-0.5-0.5v-9c0-0.275,0.225-0.5,0.5-0.5h9c0.275,0,0.5,0.225,0.5,0.5v9c0,0.275-0.225,0.5-0.5,0.5H25.5z M22.5,35c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H22.5z M34.5,23c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H34.5z M22.5,23c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H22.5z"])}_createGridViewIcon(){return this._createToolbarIcon(["M29.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z"])}_createBookViewIcon(){return this._createToolbarIcon(["M35,16.8v-1.323c0,0-2.292-1.328-5.74-1.328c-3.448,0-5.26,1.25-5.26,1.25s-1.813-1.25-5.26-1.25c-3.448,0-5.74,1.328-5.74,1.328V16.8l-1,0.531v0.021v15.687c0,0,4.531-1.578,6.999-1.578c2.468,0,5.001,0.885,5.001,0.885s2.532-0.885,5-0.885c0.306,0,0.643,0.024,1,0.066v4.325l1.531-2.016L33,35.852v-3.72c2,0.43,3,0.906,3,0.906V17.352v-0.021L35,16.8z M23,29.03c-1-0.292-2.584-0.679-3.981-0.679c-2.246,0-3.019,0.404-4.019,0.699V16.634c0,0,1.125-0.699,4.019-0.699c1.694,0,2.981,0.417,3.981,1.126V29.03z M33,29.051c-1-0.295-1.773-0.699-4.02-0.699c-1.396,0-2.981,0.387-3.98,0.679V17.06c1-0.709,2.286-1.126,3.98-1.126c2.895,0,4.02,0.699,4.02,0.699V29.051z"])}_createPageViewIcon(){return this._createToolbarIcon(["M29.425,29h4.47L29,33.934v-4.47C29,29.19,29.151,29,29.425,29z M34,14.563V28h-5.569C28.157,28,28,28.196,28,28.47V34H14.497C14.223,34,14,33.71,14,33.437V14.563C14,14.29,14.223,14,14.497,14h18.9C33.672,14,34,14.29,34,14.563z M25.497,26.497C25.497,26.223,25.275,26,25,26h-7c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,27.777,17.725,28,18,28h7c0.275,0,0.497-0.223,0.497-0.497V26.497z M30.497,22.497C30.497,22.223,30.275,22,30,22H18c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,23.777,17.725,24,18,24h12c0.275,0,0.497-0.223,0.497-0.497V22.497z M30.497,18.497C30.497,18.223,30.275,18,30,18H18c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,19.777,17.725,20,18,20h12c0.275,0,0.497-0.223,0.497-0.497V18.497z"])}_createFullscreenIcon(){return this._createToolbarIcon(["M35,12H13c-0.55,0-1,0.45-1,1v22c0,0.55,0.45,1,1,1h22c0.55,0,1-0.45,1-1V13C36,12.45,35.55,12,35,12z M34,34H14V14h20V34z","M17,21.75v-4.5c0-0.138,0.112-0.25,0.25-0.25h4.5c0.138,0,0.17,0.08,0.073,0.177l-1.616,1.616l1.823,1.823c0.097,0.097,0.097,0.256,0,0.354l-1.061,1.06c-0.097,0.097-0.256,0.097-0.354,0l-1.823-1.823l-1.616,1.616C17.08,21.92,17,21.888,17,21.75z M20.97,25.97c-0.097-0.097-0.256-0.097-0.354,0l-1.823,1.823l-1.616-1.616C17.08,26.08,17,26.112,17,26.25v4.5c0,0.138,0.112,0.25,0.25,0.25h4.5c0.138,0,0.17-0.08,0.073-0.177l-1.616-1.616l1.823-1.823c0.097-0.097,0.097-0.256,0-0.354L20.97,25.97z M30.75,17h-4.5c-0.138,0-0.17,0.08-0.073,0.177l1.616,1.616l-1.823,1.823c-0.097,0.097-0.097,0.256,0,0.354l1.061,1.06c0.097,0.097,0.256,0.097,0.354,0l1.823-1.823l1.616,1.616C30.92,21.92,31,21.888,31,21.75v-4.5C31,17.112,30.888,17,30.75,17z M30.823,26.177l-1.616,1.616l-1.823-1.823c-0.097-0.097-0.256-0.097-0.354,0l-1.061,1.06c-0.097,0.097-0.097,0.256,0,0.354l1.823,1.823l-1.616,1.616C26.08,30.92,26.112,31,26.25,31h4.5c0.138,0,0.25-0.112,0.25-0.25v-4.5C31,26.112,30.92,26.08,30.823,26.177z M26,22.5c0-0.275-0.225-0.5-0.5-0.5h-3c-0.275,0-0.5,0.225-0.5,0.5v3c0,0.275,0.225,0.5,0.5,0.5h3c0.275,0,0.5-0.225,0.5-0.5V22.5z"])}}var ue={get:de,update:function(e,t){const n=de(e),i=window.location.hash;if(n!==t)if("string"==typeof n){const s=i.indexOf("&"+e+"=")>0?i.indexOf("&"+e+"="):i.indexOf("#"+e+"="),r=s+e.length+2+n.length,o=0===s?"#":"&";window.location.replace(i.substring(0,s)+o+e+"="+t+i.substring(r))}else 0===i.length?window.location.replace("#"+e+"="+t):window.location.replace(i+"&"+e+"="+t)}};function de(e){const t=window.location.hash;if(""!==t){let n=t.indexOf("&"+e+"=")>0?t.indexOf("&"+e+"="):t.indexOf("#"+e+"=");if(n>=0){n+=e.length+2;const i=t.indexOf("&",n);return i>n?decodeURIComponent(t.substring(n,i)):i<0?decodeURIComponent(t.substring(n)):""}return!1}return!1}class he{constructor(e,t){if(!(e instanceof HTMLElement)&&(this.element=document.getElementById(e),null===this.element))throw new a;if(!t.objectData)throw new l("You must supply either a URL or a literal object to the `objectData` key.");this.options=Object.assign({acceptHeader:"application/json",adaptivePadding:.05,arrowScrollAmount:40,blockMobileMove:!1,objectData:"",enableAutoTitle:!0,enableFilename:!0,enableFullscreen:!0,enableGotoPage:!0,enableGotoSuggestions:!0,enableGridIcon:!0,enableGridControls:"buttons",enableImageTitles:!0,enableIndexAsLabel:!1,enableKeyScroll:!0,enableLinkIcon:!0,enableNonPagedVisibilityIcon:!0,enableSpaceScroll:!1,enableToolbar:!0,enableZoomControls:"buttons",fillParentHeight:!0,fixedPadding:10,fixedHeightGrid:!0,goDirectlyTo:0,hashParamSuffix:null,inFullscreen:!1,inBookLayout:!1,inGrid:!1,maxPagesPerRow:8,maxZoomLevel:-1,minPagesPerRow:2,minZoomLevel:0,onGotoSubmit:null,pageAliases:{},pageAliasFunction:function(){return!1},pageLoadTimeout:200,pagesPerRow:5,showNonPagedPages:!1,throbberTimeout:100,tileHeight:256,tileWidth:256,toolbarParentObject:null,verticallyOriented:!0,viewportMargin:200,zoomLevel:2},t);const n=i("div",{class:"diva-wrapper"+(this.options.fillParentHeight?" diva-wrapper-flexbox":"")});this.element.appendChild(n),this.options.toolbarParentObject=this.options.toolbarParentObject||n;const s=new ee(n,this.options,this);this.viewerState=s.getInternalState(),this.settings=s.getSettings(),this.toolbar=this.settings.enableToolbar?new le(this):null,n.id=this.settings.ID+"wrapper",this.divaState={viewerCore:s,toolbar:this.toolbar};let r=u.Events.subscribe("ObjectDidLoad",()=>{null!==this.toolbar&&this.toolbar.render(),u.Events.unsubscribe(r)});this.hashState=this._getHashParamState(),this._loadOrFetchObjectData()}_loadOrFetchObjectData(){if("object"==typeof this.settings.objectData)setTimeout(()=>{this._loadObjectData(this.settings.objectData,this.hashState)},0);else{const e=fetch(this.settings.objectData,{headers:{Accept:this.settings.acceptHeader}}).then(e=>{if(!e.ok){this._ajaxError(e);let t=new Error(e.statusText);throw t.response=e,t}return e.json()}).then(e=>{this._loadObjectData(e,this.hashState)});this.divaState.viewerCore.setPendingManifestRequest(e)}}_showError(e){this.divaState.viewerCore.showError(e)}_ajaxError(e){const t=["Invalid objectData setting. Error code: "+e.status+" "+e.statusText];if(0===this.settings.objectData.lastIndexOf("http",0)){const e=this.settings.objectData.replace(/https?:\/\//i,"").split(/[/?#]/)[0];window.location.hostname!==e&&t.push(i("p","Attempted to access cross-origin data without CORS."),i("p","You may need to update your server configuration to support CORS. For help, see the ",i("a",{href:"https://github.com/DDMAL/diva.js/wiki/Installation#a-note-about-cross-site-requests",target:"_blank"},"cross-site request documentation.")))}this._showError(t)}_loadObjectData(e,t){let n;if(!e.hasOwnProperty("@context")&&(-1===e["@context"].indexOf("iiif")||-1===e["@context"].indexOf("shared-canvas")))throw new c("This does not appear to be a IIIF Manifest.");u.Events.publish("ManifestDidLoad",[e],this),n=ae.fromIIIF(e);const i=t?this._getLoadOptionsForState(t,n):{};this.divaState.viewerCore.setManifest(n,i)}_getHashParamState(){const e={};return["f","v","z","n","i","p","y","x"].forEach(t=>{const n=ue.get(t+this.settings.hashParamSuffix);!1!==n&&(e[t]=n)}),"true"===e.f?e.f=!0:"false"===e.f&&(e.f=!1),["z","n","p","x","y"].forEach(t=>{t in e&&(e[t]=parseInt(e[t],10))}),e}_getLoadOptionsForState(e,t){t=t||this.settings.manifest;const n="v"in e?this._getViewState(e.v):{};"f"in e&&(n.inFullscreen=e.f),"z"in e&&(n.zoomLevel=e.z),"n"in e&&(n.pagesPerRow=e.n);let i=this._getPageIndexForManifest(t,e.i);if(i>=0&&i<t.pages.length||(i=e.p-1)>=0&&i<t.pages.length||(i=null),null!==i){const t=parseInt(e.x,10),s=parseInt(e.y,10);n.goDirectlyTo=i,n.horizontalOffset=t,n.verticalOffset=s}return n}_getViewState(e){switch(e){case"d":return{inGrid:!1,inBookLayout:!1};case"b":return{inGrid:!1,inBookLayout:!0};case"g":return{inGrid:!0,inBookLayout:!1};default:return{}}}_getPageIndexForManifest(e,t){let n;const i=e.pages.length;for(n=0;n<i;n++)if(e.pages[n].f===t)return n;return-1}_getState(){let e;e=this.settings.inGrid?"g":this.settings.inBookLayout?"b":"d";const t=this.divaState.viewerCore.getCurrentLayout().getPageToViewportCenterOffset(this.settings.activePageIndex,this.viewerState.viewport);return{f:this.settings.inFullscreen,v:e,z:this.settings.zoomLevel,n:this.settings.pagesPerRow,i:!!this.settings.enableFilename&&this.settings.manifest.pages[this.settings.activePageIndex].f,p:!this.settings.enableFilename&&this.settings.activePageIndex+1,y:!!t&&t.y,x:!!t&&t.x}}_getURLHash(){const e=this._getState(),t=[];let n;for(n in e)!1!==e[n]&&t.push(n+this.settings.hashParamSuffix+"="+encodeURIComponent(e[n]));return t.join("&")}_getPageIndex(e){return this._getPageIndexForManifest(this.settings.manifest,e)}_checkLoaded(){return!!this.viewerState.loaded||(console.warn("The viewer is not completely initialized. This is likely because it is still downloading data. To fix this, only call this function if the isReady() method returns true."),!1)}_toggleFullscreen(){let e;this._reloadViewer({inFullscreen:!this.settings.inFullscreen});let t=!1,n=document.getElementById(this.settings.selector+"tools");function i(){n.style.opacity=1,clearTimeout(e),!t&&this.settings.inFullscreen&&(e=setTimeout((function(){n.style.opacity=0}),2e3))}this.settings.inFullscreen?(n.classList.add("diva-fullscreen-tools"),document.addEventListener("mousemove",i.bind(this)),document.getElementsByClassName("diva-viewport")[0].addEventListener("scroll",i.bind(this)),n.addEventListener("mouseenter",(function(){t=!0})),n.addEventListener("mouseleave",(function(){t=!1}))):n.classList.remove("diva-fullscreen-tools")}_togglePageLayoutOrientation(){const e=!this.settings.verticallyOriented;return this._reloadViewer({inGrid:!1,verticallyOriented:e,goDirectlyTo:this.settings.activePageIndex,verticalOffset:this.divaState.viewerCore.getYOffset(),horizontalOffset:this.divaState.viewerCore.getXOffset()}),e}_changeView(e){switch(e){case"document":return this._reloadViewer({inGrid:!1,inBookLayout:!1});case"book":return this._reloadViewer({inGrid:!1,inBookLayout:!0});case"grid":return this._reloadViewer({inGrid:!0});default:return!1}}_gotoPageByIndex(e,t,n){let i=parseInt(e,10);if(this._isPageIndexValid(i)){const e=this.divaState.viewerCore.getXOffset(i,t),s=this.divaState.viewerCore.getYOffset(i,n);return this.viewerState.renderer.goto(i,s,e),!0}return!1}_isPageIndexValid(e){return this.settings.manifest.isPageValid(e,this.settings.showNonPagedPages)}_getPageIndexForPageXYValues(e,t){const n=this.viewerState.outerElement.getBoundingClientRect(),i=n.top,s=n.left,r=n.bottom,o=n.right;if(e<s||e>o)return-1;if(t<i||t>r)return-1;const a=document.getElementsByClassName("diva-page");let c=a.length;for(;c--;){const n=a[c],i=n.getBoundingClientRect();if(!(e<i.left||e>i.right||t<i.top||t>i.bottom))return n.getAttribute("data-index")}return-1}_reloadViewer(e){return this.divaState.viewerCore.reload(e)}_getCurrentURL(){return location.protocol+"//"+location.host+location.pathname+location.search+"#"+this._getURLHash()}activate(){this.viewerState.isActiveDiva=!0}changeObject(e){this.viewerState.loaded=!1,this.divaState.viewerCore.clear(),this.viewerState.renderer&&this.viewerState.renderer.destroy(),this.viewerState.options.objectData=e,this._loadOrFetchObjectData()}changeView(e){this._changeView(e)}deactivate(){this.viewerState.isActiveDiva=!1}destroy(){this.divaState.viewerCore.destroy()}disableScrollable(){this.divaState.viewerCore.disableScrollable()}enableScrollable(){this.divaState.viewerCore.enableScrollable()}disableDragScrollable(){this.divaState.viewerCore.disableDragScrollable()}enableDragScrollable(){this.divaState.viewerCore.enableDragScrollable()}enterFullscreenMode(){return!this.settings.inFullscreen&&(this._toggleFullscreen(),!0)}enterGridView(){return!this.settings.inGrid&&(this._changeView("grid"),!0)}getAllPageURIs(){return this.settings.manifest.pages.map(e=>e.f)}getCurrentCanvas(){return this.settings.manifest.pages[this.settings.activePageIndex].canvas}getCurrentPageDimensionsAtCurrentZoomLevel(){return this.getPageDimensionsAtCurrentZoomLevel(this.settings.activePageIndex)}getCurrentPageFilename(){return console.warn("This method will be deprecated in the next version of Diva. Please use getCurrentPageURI instead."),this.settings.manifest.pages[this.settings.activePageIndex].f}getCurrentPageIndices(){return this.settings.currentPageIndices}getActivePageIndex(){return this.settings.activePageIndex}getCurrentPageOffset(){return this.getPageOffset(this.settings.activePageIndex)}getCurrentPageURI(){return this.settings.manifest.pages[this.settings.activePageIndex].f}getCurrentURL(){return this._getCurrentURL()}getFilenames(){return console.warn("This will be removed in the next version of Diva. Use getAllPageURIs instead."),this.settings.manifest.pages.map(e=>e.f)}getGridPagesPerRow(){return this.settings.pagesPerRow}getInstanceId(){return this.settings.ID}getInstanceSelector(){return this.divaState.viewerCore.selector}getItemTitle(){return this.settings.manifest.itemTitle}getMaxZoomLevel(){return this.settings.maxZoomLevel}getMaxZoomLevelForPage(e){return!!this._checkLoaded()&&this.settings.manifest.pages[e].m}getMinZoomLevel(){return this.settings.minZoomLevel}getNumberOfPages(){return!!this._checkLoaded()&&this.settings.numPages}getOtherImages(e){return this.settings.manifest.pages[e].otherImages}getPageDimensions(e){return this._checkLoaded()?this.divaState.viewerCore.getCurrentLayout().getPageDimensions(e):null}getPageDimensionsAtCurrentZoomLevel(e){let t=parseInt(e,10);if(!this._isPageIndexValid(t))throw new Error("Invalid Page Index");return this.divaState.viewerCore.getCurrentLayout().getPageDimensions(t)}getPageDimensionsAtZoomLevel(e,t){if(!this._checkLoaded())return!1;t>this.settings.maxZoomLevel&&(t=this.settings.maxZoomLevel);const n=this.settings.manifest.pages[parseInt(e,10)].d[parseInt(t,10)];return{width:n.w,height:n.h}}getPageImageURL(e,t){return this.settings.manifest.getPageImageURL(e,t)}getPageIndexForPageXYValues(e,t){return this._getPageIndexForPageXYValues(e,t)}getPageOffset(e,t){const n=this.divaState.viewerCore.getPageRegion(e,t);return{top:n.top,left:n.left}}getSettings(){return this.settings}getState(){return this._getState()}getZoomLevel(){return this.settings.zoomLevel}gotoPageByIndex(e,t,n){return this._gotoPageByIndex(e,t,n)}gotoPageByLabel(e,t,n){const i=this.settings.manifest.pages;let s=e.toLowerCase();for(let e=0,r=i.length;e<r;e++)if(i[e].l.toLowerCase().indexOf(s)>-1)return this._gotoPageByIndex(e,t,n);const r=parseInt(e,10)-1;return this._gotoPageByIndex(r,t,n)}gotoPageByName(e,t,n){console.warn("This method will be removed in the next version of Diva.js. Use gotoPageByURI instead.");const i=this._getPageIndex(e);return this._gotoPageByIndex(i,t,n)}gotoPageByURI(e,t,n){const i=this._getPageIndex(e);return this._gotoPageByIndex(i,t,n)}hasOtherImages(e){return!0===this.settings.manifest.pages[e].otherImages}hideNonPagedPages(){this._reloadViewer({showNonPagedPages:!1})}isInFullscreen(){return this.settings.inFullscreen}isPageIndexValid(e){return this._isPageIndexValid(e)}isPageInViewport(e){return this.viewerState.renderer.isPageVisible(e)}isReady(){return this.viewerState.loaded}isRegionInViewport(e,t,n,i,s){const r=this.divaState.viewerCore.getCurrentLayout();if(!r)return!1;const o=r.getPageOffset(e),a=o.top+n,c=o.left+t;return this.viewerState.viewport.intersectsRegion({top:a,bottom:a+s,left:c,right:c+i})}isVerticallyOriented(){return this.settings.verticallyOriented}leaveFullscreenMode(){return!!this.settings.inFullscreen&&(this._toggleFullscreen(),!0)}leaveGridView(){return!!this.settings.inGrid&&(this._reloadViewer({inGrid:!1}),!0)}setGridPagesPerRow(e){return!!this.divaState.viewerCore.isValidOption("pagesPerRow",e)&&this._reloadViewer({inGrid:!0,pagesPerRow:e})}setState(e){this._reloadViewer(this._getLoadOptionsForState(e))}setZoomLevel(e){return this.settings.inGrid&&this._reloadViewer({inGrid:!1}),this.divaState.viewerCore.zoom(e)}showNonPagedPages(){this._reloadViewer({showNonPagedPages:!0})}toggleFullscreenMode(){this._toggleFullscreen()}toggleNonPagedPagesVisibility(){this._reloadViewer({showNonPagedPages:!this.settings.showNonPagedPages})}toggleOrientation(){return this._togglePageLayoutOrientation()}translateFromMaxZoomLevel(e){const t=this.settings.maxZoomLevel-this.settings.zoomLevel;return e/Math.pow(2,t)}translateToMaxZoomLevel(e){const t=this.settings.maxZoomLevel-this.settings.zoomLevel;return 0===t?e:e*Math.pow(2,t)}zoomIn(){return this.setZoomLevel(this.settings.zoomLevel+1)}zoomOut(){return this.setZoomLevel(this.settings.zoomLevel-1)}}t.default=he,function(e){e.Diva=e.Diva||he,e.Diva.Events=u.Events}(window)}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(16),s=n(80),r=n(8),o=n(6);t.default=class{constructor(e,t,n){this.neonView=e,this.container=document.getElementById("container"),this.updateCallbacks=new Array(0),this.group=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.group.id="svg_group",this.group.setAttribute("height",window.innerHeight.toString()),this.group.setAttribute("width","100%"),this.bg=document.createElementNS("http://www.w3.org/2000/svg","image"),this.bg.id="bgimg",this.bg.classList.add("background"),this.bg.setAttribute("x","0"),this.bg.setAttribute("y","0");const i=new FileReader;fetch(n).then(e=>{if(e.ok)return i.addEventListener("load",()=>{this.bg.setAttributeNS("http://www.w3.org/1999/xlink","href",i.result.toString());const e=this.bg.getBBox();if(!this.group.hasAttribute("viewBox")){let{viewBox:t}=(0,o.getSettings)();t||(t="0 0 "+e.width.toString()+" "+e.height.toString()),this.group.setAttribute("viewBox",t)}}),e.blob()}).then(e=>{i.readAsDataURL(e)}),this.svg=document.createElementNS("http://www.w3.org/svg","svg"),this.svg.id="mei_output",this.svg.classList.add("neon-container","active-page"),this.group.appendChild(this.bg),this.group.appendChild(this.svg),this.container.appendChild(this.group),this.zoomHandler=new s.default,this.displayPanel=new t(this,"neon-container","background",this.zoomHandler),this.pageURI=n,document.getElementById("loading").style.display="none"}onSVGLoad(){this.setViewEventHandlers(),this.displayPanel.setDisplayListeners()}updateSVG(e){this.group.replaceChild(e,this.svg),this.svg=e,this.svg.id="mei_output",this.svg.classList.add("neon-container","active-page");const t=parseInt(this.svg.getAttribute("height")),n=parseInt(this.svg.getAttribute("width"));this.bg.setAttribute("height",t.toString()),this.bg.setAttribute("width",n.toString());const{viewBox:s}=(0,o.getSettings)();s?this.group.setAttribute("viewBox",s):this.group.setAttribute("viewBox","0 0 "+n+" "+t),(0,i.updateHighlight)(),this.resetTransformations(),this.updateCallbacks.forEach(e=>e())}async changePage(e,t){const n=await this.neonView.getPageSVG(this.getCurrentPageURI());this.updateSVG(n)}addUpdateCallback(e){this.updateCallbacks.push(e)}removeUpdateCallback(e){const t=this.updateCallbacks.findIndex(t=>t===e);-1!==t&&this.updateCallbacks.splice(t,1)}resetTransformations(){this.displayPanel.zoomHandler.restoreTransformation(),(0,i.setOpacityFromSlider)(),(0,i.setBgOpacityFromSlider)()}getCurrentPage(){return 0}getCurrentPageURI(){return this.pageURI}setViewEventHandlers(){document.body.addEventListener("keydown",e=>{switch(e.key){case"Shift":r.select("#svg_group").on(".drag",null),r.select("#svg_group").call(r.drag().on("start",this.displayPanel.zoomHandler.startDrag.bind(this.displayPanel.zoomHandler)).on("drag",this.displayPanel.zoomHandler.dragging.bind(this.displayPanel.zoomHandler)));break;case"h":document.getElementById("mei_output").setAttribute("visibility","hidden")}}),document.body.addEventListener("keyup",e=>{switch(e.key){case"Shift":r.select("#svg_group").on(".drag",null),"viewer"!==this.neonView.getUserMode()&&this.neonView.NeumeEdit.setSelectListeners();break;case"h":document.getElementById("mei_output").setAttribute("visibility","visible")}}),r.select("#container").on("touchstart",()=>{2===r.event.touches.length&&(this.displayPanel.zoomHandler.startDrag(),r.select("#container").on("touchmove",this.displayPanel.zoomHandler.dragging.bind(this.displayPanel.zoomHandler)),r.select("#container").on("touchend",()=>{r.select("#container").on("touchmove",null)}))}),r.select("#container").on("wheel",this.displayPanel.zoomHandler.scrollZoom.bind(this.displayPanel.zoomHandler),!1),window.onresize=()=>{const e=window.innerHeight,t=document.getElementById("container");e>Number(t.getAttribute("height"))&&t.setAttribute("height",e.toString())}}getPageName(){return this.neonView.name}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ZoomHandler=t.ViewBox=void 0;const i=n(8),s=n(6);class r{constructor(e,t){this.minX=0,this.minY=0,this.width=e,this.height=t,this.imageWidth=e,this.imageHeight=t}set(e,t,n,i){this.minX=e,this.minY=t,this.width=n,this.height=i}get(){return this.minX.toString()+" "+this.minY.toString()+" "+this.width+" "+this.height}zoomTo(e){const t=this.imageHeight/e,n=this.imageWidth/e;this.width=n,this.height=t}getZoom(){return this.imageWidth/this.width}translate(e,t){this.minX+=e,this.minY+=t}}t.ViewBox=r;class o{resetZoomAndPan(e=!0){const t=document.getElementById("bgimg");this.viewBox=new r(parseInt(t.getAttribute("width")),parseInt(t.getAttribute("height"))),e&&(this.updateSVGViewBox(),(0,s.setSettings)({zoom:100}))}zoomTo(e){this.setViewBox(),this.viewBox.zoomTo(e),this.updateSVGViewBox(),(0,s.setSettings)({zoom:Math.floor(100*e)})}translate(e,t){this.setViewBox(),this.viewBox.translate(e,t),this.updateSVGViewBox()}restoreTransformation(){void 0===this.viewBox?this.resetZoomAndPan(!1):this.updateSVGViewBox()}setViewBox(){if(void 0===this.viewBox){const e=document.getElementById("bgimg");this.viewBox=new r(parseInt(e.getAttribute("width")),parseInt(e.getAttribute("height")))}const e=document.getElementById("svg_group").getAttribute("viewBox").split(" ");this.viewBox.set(parseInt(e[0]),parseInt(e[1]),parseInt(e[2]),parseInt(e[3]))}updateSVGViewBox(){const e=this.viewBox.get();document.getElementById("svg_group").setAttribute("viewBox",e),(0,s.setSettings)({viewBox:e})}startDrag(){const e=document.getElementById("svg_group");this.dragCoordinates=e.createSVGPoint(),"touchstart"===i.event.type?(this.dragCoordinates.x=i.event.touches[0].screenX,this.dragCoordinates.y=i.event.touches[0].screenY):(this.dragCoordinates.x=i.event.x,this.dragCoordinates.y=i.event.y),this.matrix=e.getScreenCTM().inverse()}dragging(){const e=document.getElementById("svg_group"),t=e.createSVGPoint();"touchmove"===i.event.type?(t.x=i.event.touches[0].screenX,t.y=i.event.touches[0].screenY):"wheel"===i.event.type&&!1===i.event.shiftKey?(void 0===this.matrix&&(this.matrix=e.getScreenCTM().inverse()),void 0===this.dragCoordinates&&(this.dragCoordinates=e.createSVGPoint()),this.dragCoordinates.x=i.event.x,this.dragCoordinates.y=i.event.y,t.x=this.dragCoordinates.x-i.event.deltaX,t.y=this.dragCoordinates.y-i.event.deltaY,i.event.preventDefault()):(t.x=i.event.x,t.y=i.event.y);const n=t.matrixTransform(this.matrix),s=this.dragCoordinates.matrixTransform(this.matrix);this.translate(-n.x+s.x,-n.y+s.y),this.dragCoordinates=t}scrollZoom(){if("wheel"!==i.event.type)return;if(!i.event.shiftKey)return void this.dragging();const e=document.getElementById("zoomSlider");this.setViewBox();let t=this.viewBox.getZoom()-i.event.deltaX/100;t<parseInt(e.getAttribute("min"))/100&&(t=.25),t>parseInt(e.getAttribute("max"))/100&&(t=4),this.zoomTo(t),e.value=(100*t).toString(),document.getElementById("zoomOutput").value=String(Math.round(100*t))}}t.ZoomHandler=o,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(47),s=n(26),r=n(48),o=n(13),a=n(16),c=n(18),l=n(7),u=n(49);t.default=class{constructor(e){this.neonView=e,this.initEditMode()}initEditMode(){document.getElementById("insert_controls").innerHTML+=l.insertControlsPanel,document.getElementById("edit_controls").innerHTML+=l.editControlsPanel,document.getElementById("undoRedo_controls").innerHTML=u.undoRedoPanel,this.dragHandler=new c.default(this.neonView,".active-page > svg"),this.insertHandler=new r.default(this.neonView,".active-page > svg"),(0,i.bindInsertTabs)(this.insertHandler),document.getElementById("primitiveTab").click(),s.setSelectHelperObjects(this.neonView,this.dragHandler),this.setSelectListeners(),o.initNeonView(this.neonView),(0,i.initInsertEditControls)(),s.setSelectStrokeWidth(1),(0,i.initSelectionButtons)(),(0,a.setHighlightSelectionControls)(),this.neonView.view.addUpdateCallback(this.setSelectListeners.bind(this)),document.getElementById("edit_controls").click()}getUserMode(){return void 0!==this.insertHandler?this.insertHandler.isInsertMode()?"insert":"edit":"viewer"}setSelectListeners(){s.clickSelect(".active-page > svg > svg, .active-page > svg > svg use, .active-page > svg > svg rect"),s.dragSelect(".active-page svg")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(47),s=n(16),r=n(50),o=n(26),a=n(48),c=n(13),l=n(18),u=n(7),d=n(49),h=n(50),f=n(6);t.default=class{constructor(e){this.neonView=e,this.initEditMode()}initEditMode(){(0,h.initNavbar)(this.neonView);const e=document.createElement("a"),t=document.createElement("hr");t.classList.add("dropdown-divider"),e.classList.add("dropdown-item"),e.id="highlight-selection",e.textContent="By Selection Mode",document.getElementsByClassName("dropdown-content")[0].prepend(t),document.getElementsByClassName("dropdown-content")[0].prepend(e),document.getElementById("insert_controls").innerHTML+=u.insertControlsPanel,document.getElementById("edit_controls").innerHTML+=u.editControlsPanel,document.getElementById("undoRedo_controls").innerHTML=d.undoRedoPanel,this.dragHandler=new l.default(this.neonView,"#svg_group"),this.insertHandler=new a.default(this.neonView,"#svg_group"),(0,i.bindInsertTabs)(this.insertHandler),document.getElementById("primitiveTab").click(),o.setSelectHelperObjects(this.neonView,this.dragHandler),this.setSelectListeners(),c.initNeonView(this.neonView),(0,i.initInsertEditControls)(),(0,i.initSelectionButtons)(),(0,r.initUndoRedoPanel)(this.neonView),(0,s.setHighlightOption)("selection"),this.neonView.view.addUpdateCallback(this.setSelectListeners.bind(this));const{selectionMode:n}=(0,f.getSettings)();document.getElementById(n).click()}getUserMode(){return void 0!==this.insertHandler?this.insertHandler.isInsertMode()?"insert":"edit":"viewer"}setSelectListeners(){o.clickSelect("#svg_group, #svg_group use, #svg_group rect"),o.dragSelect("#svg_group")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(6),s=new Map([["","Punctum"],["u","Pes"],["d","Clivis"],["uu","Scandicus"],["ud","Torculus"],["du","Porrectus"],["s","Distropha"],["ss","Tristopha"],["sd","Pressus"],["dd","Climacus"],["ddu","ClimacusResupinus"],["udu","TorculusResupinus"],["dud","PorrectusFlexus"],["udd","PesSubpunctis"],["uud","ScandicusFlexus"],["uudd","ScandicusSubpunctis"],["dudd","PorrectusSubpunctis"]]);function r(){const e=document.getElementById("neume_info"),t=document.getElementById("display-all-btn"),n=document.getElementById("displayInfo"),s=document.getElementById("displayBBox"),r=document.getElementById("displayText"),o=document.getElementById("display-errors");(0,i.setSettings)({displayInfo:n.checked}),n.checked?(e.setAttribute("style",""),(null==n?void 0:n.checked)&&(null==s?void 0:s.checked)&&(null==r?void 0:r.checked)&&(null==o?void 0:o.checked)&&(t.classList.add("selected"),t.innerHTML="Hide All")):(e.setAttribute("style","display: none"),t.classList.contains("selected")&&(t.classList.remove("selected"),t.innerHTML="Display All"))}function o(){document.getElementById("neume_info").innerHTML='<div class="info-bubble-container">\n      <div class="info-bubble-header">Element Info</div>\n      <div class="info-bubble-body"><i>Hover over any element to see its metadata</i></div>\n    </div>',document.getElementById("neume_info").setAttribute("style","display: none"),function(){const{displayInfo:e}=(0,i.getSettings)();document.querySelector("#displayInfo").checked=e}(),r(),document.getElementById("displayInfo").addEventListener("click",r)}t.default=class{constructor(e){this.neonView=e;const t=document.getElementById("display-single-container"),n=document.createElement("label");n.classList.add("checkbox-container","side-panel-btn"),n.textContent="Info";const i=document.createElement("input");i.id="displayInfo",i.classList.add("checkbox"),i.type="checkbox",i.checked=!1,n.appendChild(i),t.prepend(n),this.neonView.view.addUpdateCallback(this.resetInfoListeners.bind(this)),o(),this.resetInfoListeners()}infoListeners(){try{document.getElementsByClassName("active-page")[0].querySelectorAll(".neume,.custos,.clef,.accid,.divLine").forEach(e=>{e.addEventListener("mouseover",this.updateInfo.bind(this))})}catch(e){}}stopListeners(){document.querySelectorAll(".neume,.custos,.clef,.accid,.divLine").forEach(e=>{e.removeEventListener("mouseover",this.updateInfo.bind(this))})}resetInfoListeners(){this.stopListeners(),this.infoListeners()}async updateInfo(e){const t=e.currentTarget.id;if(""===t)return Array.from(document.getElementById("neume_info").children).forEach(e=>{e.remove()}),void console.log("No id!");const n=document.getElementById(t),i=n.getAttribute("class").match(/neume|nc|clef|custos|staff|liquescent|accid|divLine/)[0];let s,r="";switch(i){case"neume":{const e=n.querySelectorAll(".nc");if(1===e.length){const t=await this.neonView.getElementAttr(e[0].id,this.neonView.view.getCurrentPageURI());if("a"===t.curve||"c"===t.curve){let t=await this.getPitches(e);t=t.trim().toUpperCase(),r="Shape: Liquescent\r\nPitch(es): "+t;break}}let t=await this.getContour(e);if(1===e.length){const t=await this.neonView.getElementAttr(e[0].id,this.neonView.view.getCurrentPageURI());if("s"===t.tilt){let t=await this.getPitches(e);t=t.trim().toUpperCase(),r="Shape: Virga \r\nPitch(es): "+t;break}if("n"===t.tilt){let t=await this.getPitches(e);t=t.trim().toUpperCase(),r="Shape: Reversed Virga \r\nPitch(es): "+t;break}}if("Clivis"===t){(await this.neonView.getElementAttr(e[0].id,this.neonView.view.getCurrentPageURI())).ligated&&(t="Ligature")}let i=await this.getPitches(e);i=i.trim().toUpperCase(),r="Shape: "+(void 0===t?"Compound":t)+"\r\nPitch(es): "+i;break}case"custos":s=await this.neonView.getElementAttr(t,this.neonView.view.getCurrentPageURI()),r+="Pitch: "+s.pname.toUpperCase()+s.oct;break;case"accid":{s=await this.neonView.getElementAttr(t,this.neonView.view.getCurrentPageURI());let e="";"F"==s.accid.toUpperCase()?e="Flat":"N"==s.accid.toUpperCase()&&(e="Natural"),r+="Accid Type: "+e;break}case"clef":{const e=await this.neonView.getElementAttr(t,this.neonView.view.getCurrentPageURI());if(e["dis.place"]&&void 0!==e.dis){r+="Octave Displacement: "+((e,t)=>("above"===e?"+":"-")+String(Math.floor(Number(t)/7)))(e["dis.place"],e.dis)+"\r\n"}else r+="Octave Displacement: None\r\n";r+="Shape: "+e.shape+"\r\nLine: "+e.line;break}case"divLine":s=await this.neonView.getElementAttr(t,this.neonView.view.getCurrentPageURI()),r+="DivLine Type: "+s.form;break;default:r+="nothing"}r=`Type: ${i}\n${r}`,this.updateInfoModule(r)}async getPitches(e){let t="";for(const n of e){const e=await this.neonView.getElementAttr(n.id,this.neonView.view.getCurrentPageURI());t+=e.pname+e.oct+" "}return t}async getContour(e){let t="",n=null;for(const i of e){const e=await this.neonView.getElementAttr(i.id,this.neonView.view.getCurrentPageURI());null!==n&&(n.oct>e.oct?t+="d":n.oct<e.oct||this.pitchNameToNum(n.pname)<this.pitchNameToNum(e.pname)?t+="u":this.pitchNameToNum(n.pname)>this.pitchNameToNum(e.pname)?t+="d":t+="s"),n=e}return void 0===s.get(t)&&console.warn("Unknown contour: "+t),s.get(t)}updateInfoModule(e){document.getElementsByClassName("info-bubble-body")[0].innerText=e,document.getElementById("displayInfo").checked&&(document.getElementsByClassName("info-bubble-container")[0].style.display="")}pitchNameToNum(e){switch(e){case"c":return 1;case"d":return 2;case"e":return 3;case"f":return 4;case"g":return 5;case"a":return 6;case"b":return 7;default:console.log("Unknown pitch name")}}getContourByValue(e){for(const[t,n]of s.entries())if(n===e)return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const i=n(4),s=n(3),r=n(16),o=n(6);t.default=class{constructor(e){this.neonView=e,this.notificationSent=!1;const t=document.getElementById("display-single-container"),n=document.createElement("label"),i=document.createElement("label"),s=document.createElement("input"),r=document.createElement("input");s.classList.add("checkbox"),r.classList.add("checkbox"),n.classList.add("checkbox-container","side-panel-btn"),i.classList.add("checkbox-container","side-panel-btn"),n.textContent="Text",i.textContent="BBoxes",s.id="displayText",s.type="checkbox",r.id="displayBBox",r.type="checkbox",s.checked=!1,r.checked=!1,n.appendChild(s),i.appendChild(r),t.prepend(i),t.prepend(n),this.loadSettings(),this.setTextViewControls(),this.neonView.view.addUpdateCallback(this.updateTextViewVisibility.bind(this)),this.neonView.view.addUpdateCallback(this.updateBBoxViewVisibility.bind(this))}setTextViewControls(){this.updateTextViewVisibility(),this.updateBBoxViewVisibility(),document.getElementById("displayText").addEventListener("click",function(){this.updateTextViewVisibility()}.bind(this)),document.getElementById("displayBBox").addEventListener("click",function(){this.updateBBoxViewVisibility()}.bind(this))}loadSettings(){const{displayText:e,displayBBox:t}=(0,o.getSettings)();document.querySelector("#displayText").checked=e,document.querySelector("#displayBBox").checked=t}updateBBoxViewVisibility(){var e;const t=document.getElementById("display-all-btn"),n=document.getElementById("displayInfo"),i=document.getElementById("displayBBox"),a=document.getElementById("displayText"),c=document.getElementById("display-errors");if((0,o.setSettings)({displayBBox:i.checked}),i.checked)document.querySelectorAll(".sylTextRect").forEach(e=>{e.classList.add("sylTextRect-display"),e.classList.remove("sylTextRect")}),document.querySelectorAll(".syl.selected .sylTextRect-display").forEach(e=>{e.style.fill="red"}),"viewer"!==this.neonView.getUserMode()&&void 0!==this.neonView.TextEdit&&this.neonView.TextEdit.initSelectByBBoxButton(),(null==n?void 0:n.checked)&&(null==i?void 0:i.checked)&&(null==a?void 0:a.checked)&&(null==c?void 0:c.checked)&&(t.classList.add("selected"),t.innerHTML="Hide All");else{(null===(e=document.getElementById("selByBBox"))||void 0===e?void 0:e.classList.contains("is-active"))&&((0,s.unselect)(),document.getElementById("selByBBox").classList.remove("is-active"),document.getElementById("selBySyllable").classList.add("is-active")),document.querySelectorAll(".sylTextRect-display").forEach(e=>{e.classList.add("sylTextRect"),e.classList.remove("sylTextRect-display")}),document.querySelectorAll(".syl.selected .sylTextRect").forEach(e=>{e.style.fill="none"});try{document.getElementById("selByBBox").style.display="none"}catch(e){}t.classList.contains("selected")&&(t.classList.remove("selected"),t.innerHTML="Display All")}(0,r.updateHighlight)()}updateTextViewVisibility(){const e=document.getElementById("display-all-btn"),t=document.getElementById("displayInfo"),n=document.getElementById("displayBBox"),i=document.getElementById("displayText"),s=document.getElementById("display-errors");if((0,o.setSettings)({displayText:i.checked}),i.checked){const r=document.getElementById("syl_text");r.style.display="",r.innerHTML=`<div class="info-bubble-container">\n          <div class="info-bubble-header">Syllables on this page</div>\n          <div class="info-bubble-body">${this.getSylText()}</div>\n        </div>`;r.querySelectorAll("span").forEach(e=>{const t=document.getElementById(e.classList[0]),n=t.querySelector(".syl"),i=n.querySelector("text"),s=n.querySelector("rect");0===i.classList.length&&i.classList.add("text"),e.addEventListener("mouseover",()=>{t.classList.contains("syllable-highlighted")||(t.classList.add("selected"),t.querySelectorAll(".neume").forEach(e=>{e.classList.add("selected")}),null!==s&&(s.style.fill="#d00"))}),e.addEventListener("mouseleave",()=>{t.classList.contains("syllable-highlighted")||(t.classList.remove("selected"),t.querySelectorAll(".neume").forEach(e=>{e.classList.remove("selected")}),null!==s&&("rgb(0, 0, 0)"!==t.style.fill?s.style.fill=t.getAttribute("fill"):s.style.fill="blue"))})}),"viewer"!==this.neonView.getUserMode()&&void 0!==this.neonView.TextEdit&&this.neonView.TextEdit.initTextEdit(),(null==t?void 0:t.checked)&&(null==n?void 0:n.checked)&&(null==i?void 0:i.checked)&&(null==s?void 0:s.checked)&&(e.classList.add("selected"),e.innerHTML="Hide All")}else document.getElementById("syl_text").style.display="none",e.classList.contains("selected")&&(e.classList.remove("selected"),e.innerHTML="Display All")}getSylText(){let e="";return document.querySelectorAll(".active-page .syllable").forEach(t=>{if(null!==t.querySelector(".syl")){const n=t.querySelector(".syl");e+=`<span class="${t.id} syl-text-side-panel">`,""===n.textContent.trim()?e+="&#x25CA; ":Array.from(n.children[0].children[0].children).forEach(t=>{e+=""!==t.textContent?t.textContent:"&#x25CA; "}),e+=" </span>"}}),this.notificationSent||(i.queueNotification("Blank syllables are represented by ◊!"),this.notificationSent=!0),e.replace(/\ue551/g,"-")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,